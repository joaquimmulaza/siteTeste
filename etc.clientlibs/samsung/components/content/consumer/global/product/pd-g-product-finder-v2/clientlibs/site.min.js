(() => {
  if (!document.querySelector('.pd03-product-finder')) {
    return;
  }

  const $q = window.sg.common.$q;
  const BREAKPOINTS = window.sg.common.constants.BREAKPOINTS;
  const libs = window.sg.common.libs;
  const utils = window.sg.common.utils;
  const menu = window.sg.common.menu;
  const lazyLoad = window.sg.common.lazyLoad;
  const KEY_CODE = window.sg.common.constants.KEY_CODE;
  const setMobileFocusLoop = window.sg.common.utils.setMobileFocusLoop;
  const removeMobileFocusLoop = window.sg.common.utils.removeMobileFocusLoop;
  const swiperManager = window.sg.common.swiperManager;

  const selector = {
    section: '.pd03-product-finder',
    compareCnt: '.pd03-product-finder__compare-bar-cta .cta--compare .current-cnt',
    compareMaxCnt: '.pd03-product-finder__compare-bar-cta .cta--compare .max-cnt',
    compareBarItemThumb: '.pd03-product-finder__compare-bar-item-thumb',
    popupSection: '.pd03-product-finder__quick-view-popup',
    popupCloseCta: '.pd03-product-finder__quick-view-popup .layer-popup__close',
    colorName: '.option-selector-v2__color-name',
    optionTooltipCta: '.option-selector-v2__color-name-text',
    optionTooltipWrap: '.option-selector-v2__color-tooltip',
    optionCloseCta: '.option-selector-v2__color-tooltip-close',
    optionSlideButtonList: '.option-selector-v2__swiper-slide button',
    optionActiveClass: 'is-show',
    exploreLnb: '.explore-lnb.sticky-nav',
    visualLnb: '.nv14-visual-lnb__container.sticky',
    explorerLnbNV07: '.nv07-explore-floating-navigation.use-sticky-nav',
    visualLnbNew: '.nv14-visual-lnb-new__container.sticky',
  };

  const el = {
    compareCnt: $q(selector.compareCnt),
    compareMaxCnt: $q(selector.compareMaxCnt),
    popupSection: $q(selector.popupSection),
    popupCloseCta: $q(selector.popupCloseCta),
    exploreEl: $q(selector.exploreLnb),
    visualEl: $q(selector.visualLnb),
    visualNewEl: $q(selector.visualLnbNew),
    exploreNV07El: $q(selector.explorerLnbNV07),
  };

  let infoObj = {};
  let btnObj = {};

  let reInitCard = null;
  let checkedColor = {};
  let checkedCapacity = {};
  let reInitFocus = {};

  class Pd03ProductFinder {
    constructor(component) {
      this.selector = {
        pfHorizontal: 'pd03-product-finder--horizontal',
        pfInner: '.pd03-product-finder__inner',
        pfHeader: '.pd03-product-finder__header',
        itemWrap: '.pd03-product-finder__content',
        itemRow: '.pd03-product-finder__content-wrap',
        itemBoxAll: '.pd03-product-finder__content-item',
        itemBox: '.pd03-product-finder--vertical .pd03-product-finder__content-item',
        filterViewBtn: '.pd03-product-finder__filters-bar-filters-cta',
        filterCloseBtn: '.pd03-product-finder__filters-list-top-closed',
        hashtagBtn: '.pd03-product-finder__hashtag-filters-chip-item button:not(.chip__action--light-disabled)',
        hashtagActiveCls: 'chip__action--light-selected',
        filterBar: '.pd03-product-finder__filters-bar',
        filterList: '.pd03-product-finder__filters-list-list-headline',
        filterActiveCls: 'pd03-product-finder__filters-list-list--active',
        filterChk: '.pd03-product-finder__filters-list-list-items .checkbox-radio input',
        filterWrap: '.pd03-product-finder__filters-list',
        filterlist2: '.pd03-product-finder__filters-list-list',
        filterlistWrap: '.pd03-product-finder__filters-list-wrap',
        filterlist2Area: '.pd03-product-finder__filters-list-list-area',
        filterHidden: 'pd03-product-finder__filters-list-hidden',
        filterTop: '.pd03-product-finder__filters-list-top',
        filterTopActiveCls: 'pd03-product-finder__list--top-sticy',
        listOpenCls: 'pd03-product-finder__list--open',
        resetFilter: '.pd03-product-finder__filters-bar-filters-reset .cta',
        mobileResetFilter: '.pd03-product-finder__filters-list-cta .reset-cta',
        mobileViewResult: '.pd03-product-finder__filters-list-cta .view-cta',		// ## PFV2 추가내용
        btnShowMore: '.pd03-product-finder__filters-more-button',
        stickyCls: 'pd03-product-finder__sticky',
        underStickyCls: 'pd03-product-finder__menu-under-sticky',
        borderStickyCls: 'filters-bar--top-line-none',
        contentWideCls: 'pd03-product-finder__content--wide',
        compareBar: '.pd03-product-finder__compare-bar',
        compareBarItem: '.pd03-product-finder__compare-bar-item',
        compareBarCls: 'pd03-product-finder__compare-bar--view',
        compareActiveCls: 'pf-compare-bar__item-active',
        compareBtn: '.cta--icon-location',
        comparePopBtn: '.cta--compare',
        compareCloseBtn: '.cta--clear',
        compareFoldBtn: '[data-js-action="compareFoldToggle"]',
        promotionCard: '.pd03-promotion-card--vertical',
        boxFadeCls: 'pd03-product-finder__content-item-fade',
        resetDisabledCls: 'cta--desktop-disabled',
        mobileResetDisabledCls: 'cta--disabled',
        mobileFileterBtn: '.pd03-product-finder__filters-list-cta .cta',
        sameHeight: ['pd03-product-card__product-name', 'pd03-product-card__option-selector', 'pd03-product-card__price', 'pd03-product-card__fiche', 'pd03-product-card__rating', 'pd03-product-card__stock', 'pd03-product-card__spec', 'pd03-product-card__benefit', 'pd03-product-card__nonshop-option', 'pd03-product-card__label-cta-wrap', 'pd03-product-card__price-second', 'pd03-product-card__price-main', 'pd03-product-card__price-description', 'pd03-product-card__seller', 'pd03-product-card__icon-text-cta-wrap', 'pd03-product-card__combo-package'],
        tooltip: '.pd03-product-finder__filters-list-list-tip, .pd03-product-finder__zipcode-delivery-tip, .pd03-product-card__benefit-more, .pd-wishlist-cta',
        tooltipZip: '.pd03-product-finder__zipcode-delivery-tip',
        countrySelectorSelect: '.pd03-product-finder__country-selector .menu__select',
        countrySelectorOption: '.pd03-product-finder__country-selector .menu__select option',
        countrySelectorListOption: '.pd03-product-finder__country-selector .menu__list-option-wrap',
        countrySelectorCta: '.pd03-product-finder__country-selector .menu__select-field',
        countrySelectorText: '.pd03-product-finder__country-selector .menu__select-field-text',
      };

      this.el = {
        window: $q(window),
        component: $q(component),
      };

      this.handler = {
        resize: this.resize.bind(this),
        stickyHeader: this.stickyHeader.bind(this),
        focusLock: this.focusLock.bind(this),
        // activePopup: this.activePopup.bind(this),
        closePopup: this.closePopup.bind(this),
        setPopupHeight: this.setPopupHeight.bind(this),
        optionClick: this.optionClick.bind(this),
        optionTooltipShow: this.optionTooltipShow.bind(this),
        optionTooltipKeyEvent: this.optionTooltipKeyEvent.bind(this),
        showBoxEvent: this.showBoxEvent.bind(this),
        hideBoxEvent: this.hideBoxEvent.bind(this),
        compareFoldToggle: this.compareFoldToggle.bind(this),
        countryChange: this.countryChange.bind(this),
        lnbTransitionStart: this.lnbTransitionStart.bind(this),
        lnbTransitionEnd: this.lnbTransitionEnd.bind(this),

        tooltipShow: (event) => {
          const $tip = $q(event.currentTarget || event.target);

          if ($tip.hasClass('pd03-product-finder__zipcode-delivery-tip') !== true) {
            const $parent2dep = $tip.closest('.pd03-product-finder__filters-list-list-item');
            const $parent = $tip.closest(this.selector.filterlist2Area);
            const $parentCard = $tip.closest('.pd03-product-card__benefit-tooltip-wrap');
            const $wishWrap = $tip.closest('.pd03-product-card__wishlist');

            $wishWrap.addClass('is-hover');
            $parentCard.css({
              overflow: 'visible',
            });
            $parent.css({
              overflow: 'visible',
            });
            $parent2dep.css({
              overflow: 'visible',
            });
          }
        },
        tooltipHide: (event) => {
          const isTooltip = document.activeElement.matches ? document.activeElement.matches(this.selector.tooltip) : document.activeElement.msMatchesSelector(this.selector.tooltip);
          if (event.type !== 'focusout' && isTooltip === false) {
            const $tip = $q(event.currentTarget || event.target);

            if ($tip.hasClass('pd03-product-finder__zipcode-delivery-tip') !== true) {
              const $parent2dep = $tip.closest('.pd03-product-finder__filters-list-list-item');
              const $parent = $tip.closest(this.selector.filterlist2Area);
              const $parentCard = $tip.closest('.pd03-product-card__benefit-tooltip-wrap');

              $parentCard.css({
                overflow: '',
              });
              $parent.css({
                overflow: '',
              });
              $parent2dep.css({
                overflow: '',
              });
            }
          } 

          if (isTooltip === false) {
            const $tip = $q(event.currentTarget || event.target);
            const $wishWrap = $tip.closest('.pd03-product-card__wishlist');
            $wishWrap.removeClass('is-hover');
          }
        },
        tooltipZipShow: () => {
          if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
            return;
          }
          const $tooltip = this.el.component.find('.pd03-product-finder__zipcode-delivery-popup');
          $tooltip.css({
            display: 'block',
          });

          $tooltip.setLayerFocus('.layer-popup__inner', '.layer-popup__close');
          utils.setMobileFocusLoop($tooltip.target[0]);

          $tooltip.find('.layer-popup__close').off('click', this.handler.tooltipZipHide).on('click', this.handler.tooltipZipHide);
        },
        tooltipZipHide: () => {
          const $tooltip = this.el.component.find('.pd03-product-finder__zipcode-delivery-popup');
          $tooltip.css({
            display: '',
          });

          $tooltip.offLayerFocus();
          utils.removeMobileFocusLoop();
        },
      };
      this.lastScrollTop = null;
      this.lnbAnimating = null;

      Pd03ProductFinder.instances.set(component, this);

      this.setElement();

      this.init();
    }

    resetOption() {
      reInitCard = null;
      checkedColor = {};
      checkedCapacity = {};
      reInitFocus = {};
    }

    optionClick(e) {
      if (e.target.classList.contains('option-selector-v2__color') || e.target.classList.contains('option-selector-v2__size') || $q(e.target).closest('.option-selector-v2__swiper-slide').target.length > 0) {        
        this.resetOption();

        reInitCard = $q(e.target).closest('.pd03-product-finder__content-item');
        checkedColor.style = reInitCard.find('.option-selector-v2__wrap--color-chip .option-selector-v2__swiper-wrapper').attr('style');
        checkedColor.idx = reInitCard.find('.option-selector-v2__wrap--color-chip .is-checked').index();
        checkedCapacity.style = reInitCard.find('.option-selector-v2__wrap--capacity .option-selector-v2__swiper-wrapper').attr('style');
        checkedCapacity.idx = reInitCard.find('.option-selector-v2__wrap--capacity .is-checked').index();
        reInitFocus.idx = $q(e.target).closest('.option-selector-v2__swiper-slide').index();
        if ($q(e.target).closest('.option-selector-v2__wrap').hasClass('option-selector-v2__wrap--capacity')) {
          reInitFocus.type = 'capacity';
        } else {
          reInitFocus.type = 'color-chip';
        }
      }
    }

    setElement() {
      const isInIframe = (window.location !== window.parent.location);

      this.el.itemWrap = this.el.component.find(this.selector.itemWrap);
      this.el.itemRow = this.el.component.find(this.selector.itemRow);
      this.el.itemBox = this.el.component.find(this.selector.itemBox);
      this.el.itemBoxAll = this.el.component.find(this.selector.itemBoxAll);
      this.el.filterBar = this.el.component.find(this.selector.filterBar);
      this.el.filterList = this.el.component.find(this.selector.filterList);
      this.el.filterViewBtn = this.el.component.find(this.selector.filterViewBtn);
      this.el.filterCloseBtn = this.el.component.find(this.selector.filterCloseBtn);
      this.el.filterWrap = this.el.component.find(this.selector.filterWrap);
      this.el.filterTop = this.el.component.find(this.selector.filterTop);
      this.el.hashtagBtn = this.el.component.find(this.selector.hashtagBtn);
      this.el.filterChk = this.el.component.find(this.selector.filterChk);
      this.el.resetFilter = this.el.component.find(this.selector.resetFilter);
      this.el.mobileResetFilter = this.el.component.find(this.selector.mobileResetFilter);
      this.el.mobileViewResult = this.el.component.find(this.selector.mobileViewResult);		// ## PFV2 추가내용
      this.el.btnShowMore = this.el.component.find(this.selector.btnShowMore);
      this.el.comparePopBtn = this.el.component.find(this.selector.comparePopBtn);
      this.el.compareBar = this.el.component.find(this.selector.compareBar);
      this.el.compareCloseBtn = this.el.component.find(this.selector.compareCloseBtn);
      this.el.mobileFileterBtn = this.el.component.find(this.selector.mobileFileterBtn);
      this.el.pfInner = this.el.component.find(this.selector.pfInner);
      this.el.pfHeader = this.el.component.find(this.selector.pfHeader);
      this.el.filterlist2 = this.el.component.find(this.selector.filterlist2);
      this.el.filterlistWrap = this.el.component.find(this.selector.filterlistWrap);
      this.el.filterlist2Area = this.el.component.find(this.selector.filterlist2Area);
      this.el.tooltip = this.el.component.find(this.selector.tooltip);
      this.el.tooltipZip = this.el.component.find(this.selector.tooltipZip);
      this.el.compareFoldBtn = this.el.component.find(this.selector.compareFoldBtn);
      this.el.countrySelectorSelect = this.el.component.find(this.selector.countrySelectorSelect);
      this.el.countrySelectorOption = this.el.component.find(this.selector.countrySelectorOption);
      this.el.countrySelectorListOption = this.el.component.find(this.selector.countrySelectorListOption);
      this.el.countrySelectorText = this.el.component.find(this.selector.countrySelectorText);
      this.el.countrySelectorCta = this.el.component.find(this.selector.countrySelectorCta);

      this.innerHeight = isInIframe ? window.parent.innerHeight : window.innerHeight;

      this.timer = null;
      this.desktopFlg = false;
      this.mobileFlg = false;
      this.cardFlag = false;
      this.setMax = BREAKPOINTS.MOBILE < utils.getViewPort().width ? 3 : 2;

      this.isExplorerLnb = $q('.explore-lnb.sticky-nav').target.length > 0 ? true : false;
      this.isVisualLnb = $q('.nv14-visual-lnb__container').target.length > 0 ? true : false;
      this.isExplorerLnbNV07 = $q('.nv07-explore-floating-navigation').target.length > 0 ? true : false;
      this.isVisualLnbNew = $q('.nv14-visual-lnb-new__container').target.length > 0 ? true : false;
      this.el.lnbEls = null;
    }

    setStickyElements() {
      el.exploreEl = $q(selector.exploreLnb);
      el.exploreNV07El = $q(selector.explorerLnbNV07);
      el.visualEl = $q(selector.visualLnb);
      el.visualNewEl = $q(selector.visualLnbNew);
      this.el.lnbEls = [el.exploreEl, el.visualEl, el.exploreNV07El, el.visualNewEl].filter((selector) => selector.target.length > 0);
    }

    init() {
      this.setProperty();

      this.bindEvents();

      if (this.checkLnbOverlapCasesInMo()) {
        document.body.classList.add('lnb-overlap-preventer');
      } else {
        document.body.classList.remove('lnb-overlap-preventer');
      }

      // this.resetFilterStyle();
      if (this.el.component.hasClass(this.selector.pfHorizontal)) {
        this.setFilterDisplay(true, true);
        this.el.filterViewBtn.attr('disabled', true);
      } else if (this.el.filterViewBtn.hasClass('is-opened')) {
        this.setFilterDisplay(true, true);
      } else {
        this.setFilterDisplay(false, true);
      }

      if (this.el.filterlistWrap.hasClass('is-active')) {
        this.setFilterListDisplay(true);
      } else {
        this.setFilterListDisplay(false);
      }
      
      this.stickyHeader();

      this.resize();

      this.filterSingleDisplay();

      setTimeout(() => {
        this.setContentHeight();
      }, 500);
    }

    reInit() {
      this.setProperty();

      // this.el.filterlist2Area.removeClass(this.selector.filterActiveCls);
      // this.setFilterListDisplay(false);

      this.setElement();

      this.init();

      this.filterListCheck();
    }

    setProperty() {
      this.activeCta = null;
    }

    filterSingleDisplay() {
      this.el.filterlist2Area.target.forEach((item) => {
        const filterArea = $q(item);
        const filterItem = filterArea.find('.pd03-product-finder__filters-list-list-items:not(.is-disabled)');
        const btnShow = filterArea.find(this.selector.btnShowMore);

        if (filterItem.target.length > 9) {
          btnShow.show();

          this.filterItemDisplay(filterItem, false);
        } else {
          btnShow.hide();
        }
      });
    }

    filterListCheck() {
      this.el.filterlist2Area.target.forEach((item) => {
        const filterArea = $q(item);
        const filterItem = filterArea.find('.pd03-product-finder__filters-list-list-items:not(.is-disabled)');
        const btnShow = filterArea.find(this.selector.btnShowMore);

        if (filterItem.target.length > 9 && btnShow.hasClass('is-expanded')) {
          this.filterItemDisplay(filterItem, true);
        }
      });
    }

    checkLnbOverlapCasesInMo() {
      const isNv14WithNv14New = this.isVisualLnb && this.isVisualLnbNew ? true : false;
      return isNv14WithNv14New;
    }

    toggleSingleFilter(btn) {
      const filterArea = btn.closest(this.selector.filterlist2Area);
      const filterList = filterArea.find('.pd03-product-finder__filters-list-list-item');
      const filterItem = filterArea.find('.pd03-product-finder__filters-list-list-items:not(.is-disabled)');
      const globalText = JSON.parse(btn.target[0].dataset.globalText);
      let heightTime = null;

      if (!btn.hasClass('is-expanded')) {
        filterList.css({
          'height': `${filterItem.outerHeight() * 9}px`,
        });

        btn.addClass('is-expanded');
        btn.find('span').text(globalText.less);

        this.filterItemDisplay(filterItem, true);

        filterList.css({
          'height': `${filterItem.outerHeight() * filterItem.target.length}px`,
        });

        if (heightTime !== null) {
          clearTimeout(heightTime);
        }

        heightTime = setTimeout(() => {
          filterList.css({
            'height': '',
          });

          this.setContentHeight();
        }, 300);
      } else {
        filterList.css({
          'height': `${filterItem.outerHeight() * filterItem.target.length}px`,
        });

        btn.removeClass('is-expanded');
        btn.find('span').text(globalText.show);

        filterList.css({
          'height': `${filterItem.outerHeight() * 9}px`,
        });

        if (heightTime !== null) {
          clearTimeout(heightTime);
        }

        heightTime = setTimeout(() => {
          this.filterItemDisplay(filterItem, false);

          filterList.css({
            'height': '',
          });

          this.setContentHeight();
        }, 300);
      }
    }

    filterItemDisplay(item, flag) {
      item.target.forEach((item, idx) => {
        const $item = $q(item);

        if (idx > 8) {
          if (flag === true) {
            $item.show();
          } else {
            $item.hide();
          }
        }
      });
    }

    setFilterDisplay(foldFlag, firstFlag) {
      if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
        this.desktopFilter(foldFlag, firstFlag);
      }
    }

    setFilterListDisplay(foldFlag) {
      this.resetFilterList(foldFlag);
    }

    devideColumn(sliceCnt) {
      this.setDefault();

      this.el.itemRow.target.forEach((element) => {
        const myItemWrap = $q(element);
        const myItemCol = myItemWrap.find(this.selector.itemBox);
        const sliceArr = myItemCol.target;
        const itemColArr = [];
        const cnt = Math.ceil(sliceArr.length / sliceCnt) + 1;
        
        let nextCard = null;

        for (let i = 0; i <= cnt; i++) {
          let j = 0;
          itemColArr[i] = [];

          while (j < sliceCnt) {
            const divideItem = this.cardFlag === true ? nextCard : sliceArr.splice(0, 1);
            const contentCard = $q(...divideItem);
            let promotionCard = null;
            this.cardFlag = false;

            j++;

            if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
              promotionCard = contentCard.find(`${this.selector.promotionCard}.desktop-card-width--large`);

              if (promotionCard.target.length === 1) {
                if (j === sliceCnt) {
                  this.cardFlag = true;
                  nextCard = divideItem;
  
                  break;
                } else {
                  j++;
                }
              }

              itemColArr[i].push(...divideItem);
            } else {
              promotionCard = contentCard.find(this.selector.promotionCard);

              if (promotionCard.target.length === 1) {
                j--;
              } else {
                itemColArr[i].push(...divideItem);
              }
            }
          }

          if($q(itemColArr[i]).find('.pd03-product-card__icon-text-cta-wrap').target.length > 0) {
            $q(itemColArr[i]).find('.pd03-promotion-card__cta').addClass('cta--extension');
          } else {
            $q(itemColArr[i]).find('.pd03-promotion-card__cta').removeClass('cta--extension');
          }

          if($q(itemColArr[i]).find('.option-selector-v2__color-name').target.length < 1) {
            $q(itemColArr[i]).find('.option-selector-v2__wrap--capacity').addClass('select--extension');
          } else {
            $q(itemColArr[i]).find('.option-selector-v2__wrap--capacity').removeClass('select--extension');
          }
        }

        itemColArr.forEach((item) => {
          this.setHeight(item);
        });
      });
    }

    setHeight(elList) {
      const cardWrap = $q(elList);
      const resizeList = [cardWrap];

      this.selector.sameHeight.forEach((element) => {
        const setHeighSametArr = [];
        const $same = cardWrap.find(`.${element}`);
  
        $same.target.forEach((a) => {
          const $resizeEl = $q(a);

          setHeighSametArr.push($resizeEl.outerHeight());
        });

        const maxHeight = `${Math.floor(Math.max.apply(null, setHeighSametArr))}px`;

        $same.target.forEach((item) => {
          const $item = $q(item);

          $item.css({
            'min-height': maxHeight,
          });
        });
      });

      resizeList.forEach((item) => {
        const setHeightArr = [];

        item.target.forEach((a) => {
          const $resizeEl = $q(a);
          let setHeight;

          if ($resizeEl.find(this.selector.promotionCard).target.length > 0) {
            setHeight = 0;
          } else {
            setHeight = $resizeEl.outerHeight();
          }

          setHeightArr.push(setHeight);
        });
  
        const maxHeight = Math.max.apply(null, setHeightArr);

        item.target.forEach((item) => {
          const viewCard = $q(item);

          if (viewCard.find('.pd03-promotion-card').hasClass('pd03-promotion-card--vertical')) {
            $q(item).css({
              'height': `${Math.floor(maxHeight)}px`,
            });
          } else {
            $q(item).css({
              'min-height': `${Math.floor(maxHeight)}px`,
            });
          }
        });

        if (item === cardWrap && item.target.length === 1 && item.find(this.selector.promotionCard).target.length === 1) {
          item.target.forEach((b) => {
            $q(b).css({
              'min-height': `${cardWrap.find(this.selector.promotionCard).outerHeight()}px`,
            });
          });
        }
      });
    }

    setDefault() {
      const defaultList = [
        this.el.component.find(this.selector.itemBox),
      ];
      this.selector.sameHeight.forEach((element) => {
        const itemList = $q(`.${element}`);
        defaultList.push(itemList);
      });

      defaultList.forEach((item) => {
        item.css({
          'min-height': '',
          'height': '',
        });
      });
    }

    // resetFilterStyle() {
    //   this.el.filterlist2Area.target.forEach((item) => {
    //     const $item = $q(item);
    //     const activeList = $item.closest(this.selector.filterlist2Area).find('.pd03-product-finder__filters-list-item-wrap');
    //     const $hiddenText = $item.find('span.hidden');
    //     const globalText = {
    //       Expand: 'Click to Expand',
    //       Collapse: 'Click to Collapse',
    //     };

    //     activeList.parent().addClass(this.selector.filterActiveCls);

    //     this.setContentHeight();

    //     this.stickyHeader(true);

    //     $hiddenText.text(globalText.Collapse);
    //   });
    // }

    resetFilterList(flag = null) {
      this.el.filterlist2Area.target.forEach((item) => {
        const $item = $q(item);
        const activeList = $item.closest(this.selector.filterlist2Area).find('.pd03-product-finder__filters-list-item-wrap');
        const $hiddenText = $item.find('span.hidden');
        const globalText = {
          Expand: 'Click to Expand',
          Collapse: 'Click to Collapse',
        };

        if (flag === false) {
          activeList.parent().removeClass(this.selector.filterActiveCls);

          this.setContentHeight();

          this.stickyHeader();

          $hiddenText.text(globalText.Expand);     
        } else {
          activeList.parent().addClass(this.selector.filterActiveCls);

          this.setContentHeight();

          this.stickyHeader(true);
          
          $hiddenText.text(globalText.Collapse);
        }
      });
    }

    resize() {
      this.innerHeight = (window.location !== window.parent.location) ? window.parent.innerHeight : window.innerHeight;

      if (this.timer) {
        clearTimeout(this.timer);
      }

      this.timer = setTimeout(() => {
        this.setDefault();

        if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
          if (this.desktopFlg === false) {
            this.desktopFlg = true;
            this.mobileFlg = false;
            this.setMax = 3;

            this.el.filterWrap.removeAttr('style');

            if(el.popupSection.css('display') === 'block'){
              if(document.querySelector('body').style.position !== 'fixed'){
                utils.hiddenScroll();
              }
            } else if(this.el.filterTop.hasClass(this.selector.filterTopActiveCls)){
              utils.visibleScroll();
            }

            this.countCompare();

            this.el.filterWrap.css({
              'visibility': '',
            });

            this.el.resetFilter.target.forEach((item) => {
              const $item = $q(item);

              if ($item.hasClass('cta--outlined')) {
                $item.removeClass('cta--outlined');
                $item.addClass('cta--underline');
              }
            });
            this.handler.tooltipZipHide();
          }

          if (this.el.filterWrap.hasClass(this.selector.filterHidden)) {
            this.setFilterDisplay(false, true);
            this.devideColumn(4);
          } else {
            this.setFilterDisplay(true, true);
            this.devideColumn(3);
          }

          if (this.el.component.hasClass(this.selector.pfHorizontal)) {
            this.setFilterDisplay(true, true);
            this.el.filterViewBtn.attr('disabled', true);
          }
        } else {
          if (this.mobileFlg === false) {
            this.mobileFlg = true;
            this.desktopFlg = false;
            this.setMax = 2;

            this.el.component.removeClass(this.selector.underStickyCls);

            this.el.filterWrap.removeAttr('style');

            if (this.el.filterTop.hasClass(this.selector.filterTopActiveCls)) {
              if(document.querySelector('body').style.position !== 'fixed'){
                utils.hiddenScroll();
              }
            } else if (el.popupSection.css('display') !== 'block') {
              utils.visibleScroll();
            }

            this.countCompare();

            this.el.resetFilter.target.forEach((item) => {
              const $item = $q(item);

              if ($item.hasClass('cta--underline')) {
                $item.removeClass('cta--underline');
                $item.addClass('cta--outlined');
              }
            });

            this.el.filterViewBtn.attr('an-la', 'filter:open');
            this.el.filterViewBtn.attr('aria-expanded', false);
            this.el.filterViewBtn.removeClass('is-opened');

            if (this.el.component.hasClass(this.selector.pfHorizontal)) {
              this.setFilterDisplay(true, true);
              this.el.filterViewBtn.removeAttr('disabled');
            }
          }
        }

        this.setContentHeight();
        this.stickyHeader();
        this.setPopupHeight();
        this.countFilter();
        $q('.pd03-product-card__wishlist').removeClass('is-hover');
      }, 300);
    }

    visibleFilter(item) {
      const activeList = item.closest(this.selector.filterlist2Area).find('.pd03-product-finder__filters-list-item-wrap');
      const $hiddenText = item.find('span.hidden');
      const globalText = {
        Expand: 'Click to Expand',
        Collapse: 'Click to Collapse',
      };//JSON.parse($hiddenText.target[0].dataset.globalText)

      if (activeList.css('display') === 'block') {
        activeList.stop().animate({
          'height': '0',
        }, 300, 'cubic-bezier(.4,0,.2,1)', () => {
          activeList.parent().removeClass(this.selector.filterActiveCls);

          activeList.css({
            'height': '',
          });

          this.setContentHeight();

          this.stickyHeader();
        });

        $hiddenText.text(globalText.Expand);
      } else {
        activeList.parent().addClass(this.selector.filterActiveCls);

        const listHeight = activeList.outerHeight();

        activeList.css({
          'height': '0',
          'transition-property': 'height',
        });

        activeList.stop().animate({
          'height': `${listHeight}px`,
        }, 300, 'cubic-bezier(.4,0,.2,1)', () => {
          activeList.css({
            'height': '',
          });

          this.setContentHeight();

          this.stickyHeader(true);
        });

        $hiddenText.text(globalText.Collapse);
      }
    }

    activeHash(item) {
      let movePos = 0;
      const top = document.body.scrollTop || document.documentElement.scrollTop;

      if (!item.hasClass(this.selector.hashtagActiveCls)) {
        item.addClass(this.selector.hashtagActiveCls);

        movePos = this.el.pfInner.offset().top + top;

        $q('html').moveScroll(movePos, 300);
      } else {
        item.removeClass(this.selector.hashtagActiveCls);
      }
    }

    resetFilter() {
      this.el.filterChk.target.forEach((item) => {
        const $item = $q(item);

        $item.target[0].checked = false;
      });

      this.countFilter();
    }

    countFilter() {
      const activeFilter = this.el.component.find(`${this.selector.filterChk}:checked`);

      if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
        if (activeFilter.target.length < 3) {
          this.el.resetFilter.parent().addClass(this.selector.resetDisabledCls);
          this.el.resetFilter.target.forEach((item) => {
            const $item = $q(item);
  
            $item.off('click');
          });
        } else {
          this.el.resetFilter.parent().removeClass(this.selector.resetDisabledCls);
          this.el.resetFilter.target.forEach((item) => {
            const $item = $q(item);
  
            $item.on('click', () => {
              this.resetFilter();
            });
          });
        }
      } else {
        // ## PFV2 추가내용 S : 필터 적용시 view Result 의 disabled 처리
        if (activeFilter.target.length > 0) {
          this.el.mobileViewResult.removeClass(this.selector.mobileResetDisabledCls);
        } else {
          this.el.mobileViewResult.addClass(this.selector.mobileResetDisabledCls);
        }
        // ## PFV2 추가내용 E.
        if (activeFilter.target.length < 3) {
          this.el.mobileResetFilter.addClass(this.selector.mobileResetDisabledCls);
          this.el.mobileResetFilter.target.forEach((item) => {
            const $item = $q(item);
  
            $item.off('click');
          });
        } else {
          this.el.mobileResetFilter.removeClass(this.selector.mobileResetDisabledCls);
          this.el.mobileResetFilter.target.forEach((item) => {
            const $item = $q(item);
  
            $item.on('click', () => {
              this.resetFilter();
            });
          });
        }
      }
    }

    stickyHeader() {
      if(this.activeCta || this.isMobileFilterOpen) return;
      this.setStickyElements();

      const top = document.body.scrollTop || document.documentElement.scrollTop;
      const bodyEl = document.querySelector('body');
      const fixedH = this.getStickyHeaderHeight();

      const winRect = utils.getViewPort();
      // const barPos = BREAKPOINTS.MOBILE < winRect.width ? this.el.pfInner.offset().top + top - fixedH : this.el.pfInner.offset().top + top;
      const barPos = this.el.pfInner.offset().top + top - fixedH;

      lazyLoad.setLazyLoad();

      const fixStart = top >= barPos;
      const fixEnd = this.el.component.offset().bottom > 0;
      const noScrollEnd = top + winRect.height + 10 < document.body.scrollHeight && window.getComputedStyle(document.body).position !== 'fixed';
      const withLnb = this.isExplorerLnb || this.isVisualLnb || this.isExplorerLnbNV07 || this.isVisualLnbNew;
      if(!fixStart && withLnb) {
        document.documentElement.style.setProperty('--sticky-nav-height-for-pf-filter', '0px');
      }

      if (fixStart && fixEnd && noScrollEnd) {
        this.el.component.addClass(this.selector.stickyCls);

        if (BREAKPOINTS.MOBILE > winRect.width) {
          this.el.filterBar.addClass('mobile-filters-bar');
          this.el.filterBar.removeAttr('style');
          if(!withLnb) {
            bodyEl.classList.add('mobile-filters-bar--body');
          } else {
            if(!this.lnbAnimating) {
              const currentScrollTop = window.scrollY || document.documentElement.scrollTop;
              this.el.lnbEls.forEach((lnbEl) => lnbEl.off('transitionstart', this.handler.lnbTransitionStart).on('transitionstart', this.handler.lnbTransitionStart));
              this.el.lnbEls.forEach((lnbEl) => lnbEl.off('transitionend', this.handler.lnbTransitionEnd).on('transitionend', this.handler.lnbTransitionEnd));

              if (currentScrollTop > this.lastScrollTop) {
                // When scroll down hide sticky lnb
                document.documentElement.style.setProperty('--sticky-nav-height-for-pf-filter', '0px');
                bodyEl.classList.add('mobile-filters-bar--body');
              } else if (currentScrollTop < this.lastScrollTop) {
                // When scroll up show sticky lnb
                const stickyLnbsHeight = this.el.lnbEls.map((selector) => selector.target[0].getBoundingClientRect().height);
                const currentStickyNavHeight = Math.max.apply(null, stickyLnbsHeight);
                if(bodyEl.classList.contains('mobile-filters-bar--body')) {
                  document.documentElement.style.setProperty('--sticky-nav-height-for-pf-filter', `${currentStickyNavHeight}px`);
                  bodyEl.classList.remove('mobile-filters-bar--body');
                }
              }
            
              this.lastScrollTop = currentScrollTop;
            }
          }
        } else {
          if (this.isExplorerLnb) {
            this.el.component.addClass(this.selector.underStickyCls);

            this.el.filterBar.css({
              'top': `${el.exploreEl.height()}px`,
            });
          }

          if (this.isVisualLnb) {
            this.el.filterBar.css({
              'top': `${el.visualEl.height()}px`,
            });
          }

          if (this.isExplorerLnbNV07) {
            this.el.filterBar.addClass(this.selector.borderStickyCls);

            this.el.filterBar.css({
              'top': `${el.exploreNV07El.height()}px`,
            });
          }

          if (this.isVisualLnbNew) {
            this.el.filterBar.css({
              'top': `${el.visualNewEl.height()}px`,
            });
          }

          if(this.el.lnbEls.length > 1) {
            this.el.filterBar.css({
              'top': `${Math.max.apply(null, this.el.lnbEls.map((selector) => selector.target[0].getBoundingClientRect().height))}px`,
            });
          }
        }
      } else {
        if (el.popupSection.css('display') === 'block' && this.el.component.hasClass(this.selector.stickyCls)) {
          this.el.component.addClass(this.selector.stickyCls);
        } else {
          this.el.component.removeClass(this.selector.stickyCls);
        }

        if (BREAKPOINTS.MOBILE > winRect.width) {
          this.el.filterBar.removeClass('mobile-filters-bar');
          this.el.filterBar.removeAttr('style');
          bodyEl.classList.remove('mobile-filters-bar--body');
          this.lastScrollTop = null;
        } else {
          if (el.popupSection.css('display') === 'block' && this.el.component.hasClass(this.selector.stickyCls)) {
            if (this.isExplorerLnb) {
              this.el.component.addClass(this.selector.underStickyCls);
  
              this.el.filterBar.css({
                'top': `${el.exploreEl.height()}px`,
              });
            }
  
            if (this.isVisualLnb) {
              this.el.filterBar.css({
                'top': `${el.visualEl.height()}px`,
              });
            }

            if (this.isExplorerLnbNV07) {
              this.el.filterBar.addClass(this.selector.borderStickyCls);

              this.el.filterBar.css({
                'top': `${el.exploreNV07El.height()}px`,
              });
            }

            if (this.isVisualLnbNew) {
              this.el.filterBar.css({
                'top': `${el.visualNewEl.height()}px`,
              });
            }

            if(this.el.lnbEls.length > 1) {
              this.el.filterBar.css({
                'top': `${Math.max.apply(null, this.el.lnbEls.map((selector) => selector.target[0].getBoundingClientRect().height))}px`,
              });
            }
          } else {
            if (this.isExplorerLnb) {
              this.el.component.removeClass(this.selector.underStickyCls);
  
              this.el.filterBar.css({
                'top': '',
              });
            }
            
            if (this.isVisualLnb) {
              this.el.filterBar.css({
                'top': '',
              });
            }

            if (this.isExplorerLnbNV07) {
              this.el.filterBar.removeClass(this.selector.borderStickyCls);

              this.el.filterBar.css({
                'top': '',
              });
            }

            if (this.isVisualLnbNew) {
              this.el.filterBar.css({
                'top': '',
              });
            }
          }
        }
      }

      if (BREAKPOINTS.MOBILE < winRect.width) {
        if (this.el.filterWrap.hasClass(this.selector.filterHidden)) {
          this.el.filterWrap.css({
            'margin-left': '',
          });

          this.el.filterWrap.show();

          const filterPos = Math.abs(parseFloat(this.el.filterWrap.css('margin-left')));

          this.el.filterWrap.css({
            'display': 'none',
            'margin-left': `-${filterPos}px`,
          });
        }
      }
    }

    desktopFilter(flag = null, first = null, clickFlag = null) {
      if (flag === false) {
        this.el.filterWrap.css({
          'margin-left': '',
        });

        this.el.filterWrap.show();

        const filterPos = Math.abs(parseFloat(this.el.filterWrap.css('margin-left')));
        const filterWid = this.el.filterWrap.width();

        this.el.filterViewBtn.attr('an-la', 'filter:open');
        this.el.filterViewBtn.attr('aria-expanded', false);
        this.el.filterViewBtn.removeClass('is-opened');
        this.el.filterWrap.addClass(this.selector.filterHidden);

        if (first === true) {
          this.el.filterWrap.css({
            'opacity': '0',
            'margin-left': `-${filterPos + filterWid}px`,
            'display': 'none',
          });

          if (!this.el.itemRow.hasClass(this.selector.contentWideCls)) {
            this.el.itemRow.addClass(this.selector.contentWideCls);
          }
        } else {
          this.el.filterWrap.css({
            'transition-property': 'margin-left, opacity',
            'transition-delay': '.1s',
          });

          this.el.filterWrap.stop().animate({
            'opacity': '0',
            'margin-left': `-${filterPos + filterWid}px`,
          }, 300, 'cubic-bezier(.4,0,.2,1)', () => {
            this.el.filterWrap.css({
              'display': 'none',
              'transition-property': '',
              'transition-delay': '',
            });
          });

          if (clickFlag === true) {
            this.cardFadeEffect();
          }

          setTimeout(() => {
            this.el.itemRow.addClass(this.selector.contentWideCls);
          }, 200);
        }

        this.devideColumn(4);
      } else {
        this.el.filterViewBtn.attr('an-la', 'filter:close');
        this.el.filterViewBtn.attr('aria-expanded', true);
        this.el.filterViewBtn.addClass('is-opened');
        this.el.filterWrap.removeClass(this.selector.filterHidden);

        if (first === true) {
          this.el.filterWrap.css({
            'opacity': '1',
            'display': 'block',
            'margin-left': '',
          });
        } else {
          this.el.filterWrap.css({
            'display': 'block',
            'transition-property': 'margin-left, opacity',
            'transition-delay': '.1s',
          });

          this.el.filterWrap.stop().animate({
            'opacity': '1',
            'margin-left': '',
          }, 300, 'cubic-bezier(.4,0,.2,1)', () => {
            this.el.filterWrap.css({
              'transition-property': '',
              'transition-delay': '',
              'top': '',
            });

            this.el.window.trigger('scroll');
          });
        }

        this.el.itemRow.removeClass(this.selector.contentWideCls);

        if (clickFlag === true) {
          this.cardFadeEffect();
        }

        this.devideColumn(3);

        this.el.window.trigger('scroll');
      }
    }

    cardFadeEffect() {
      this.el.itemBox = this.el.component.find(this.selector.itemBox);

      this.el.itemBox.addClass(this.selector.boxFadeCls);

      setTimeout(() => {
        this.el.itemBox.removeClass(this.selector.boxFadeCls);
      }, 600);
    }

    mobileFilterOpen() {
      this.isMobileFilterOpen = true;
      const $resultBtn = this.el.mobileFileterBtn.eq(1);

      this.el.filterWrap.css({
        'visibility': 'visible',
      });

      this.el.filterViewBtn.attr('an-la', 'filter:close');
      this.el.filterViewBtn.attr('aria-expanded', true);
      this.el.filterViewBtn.removeClass('is-opened');
      this.el.component.addClass(this.selector.listOpenCls);
      this.el.filterTop.addClass(this.selector.filterTopActiveCls);

      utils.hiddenScroll();

      $resultBtn.off('keydown').on('keydown', (event) => {
        if (event.keyCode === KEY_CODE.TAB && event.shiftKey === false) {
          this.el.filterCloseBtn.focus();

          event.preventDefault();
        }
      });

      this.el.filterCloseBtn.off('keydown').on('keydown', (event) => {
        if (event.keyCode === KEY_CODE.TAB && event.shiftKey === true) {
          $resultBtn.focus();

          event.preventDefault();
        }
      });
    }

    mobileFilterClose(setFocus) {
      this.el.filterViewBtn.attr('an-la', 'filter:open');
      this.el.filterViewBtn.attr('aria-expanded', false);
      this.el.filterTop.removeClass(this.selector.filterTopActiveCls);
      this.el.component.removeClass(this.selector.listOpenCls);

      setTimeout(() => {
        this.el.filterWrap.css({
          'visibility': 'hidden',
        });
      }, 300);

      utils.visibleScroll();
      if (setFocus === true) {
        this.el.filterViewBtn.focus();
      }
      
      this.isMobileFilterOpen = false;
    }

    activeCompare() {
      this.el.compareBar.addClass(this.selector.compareBarCls);
    }

    deActiveCompare() {
      this.el.compareBar.removeClass(this.selector.compareBarCls);

      this.el.component.find('.cta--icon-compare').target.forEach((item) => {
        const $item = $q(item);

        if ($item.hasClass('cta--done')) {
          $item.removeClass('cta--done');
          $item.attr('aria-selected', false);
          $item.find('svg use').attr('xlink:href', '#default-circle-regular');
          $item.find('svg use').attr('href', '#default-circle-regular');
        }
      });
    }

    setContentHeight() {
      this.setPos = this.el.filterWrap.height();

      this.setHeaderFixFlag();
    }

    setHeaderFixFlag() {
      this.setMinHeight();

      this.stickyHeader();
    }

    resetMinHeight() {
      this.el.itemWrap.css({
        'min-height': '',
      });
    }

    setMinHeight() {
      this.el.itemBox = this.el.component.find(this.selector.itemBox);

      this.el.itemWrap.css({
        'min-height': '',
      });

      this.resetMinHeight();

      if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
        if (this.el.itemWrap.outerHeight() <= this.el.filterlistWrap.outerHeight()) {
          this.el.itemWrap.css({
            'min-height': `${this.el.filterlistWrap.outerHeight()}px`,
          });
        }
      }
    }

    clearCompare() {
      infoObj = {};
      btnObj = {};

      this.deActiveCompare();
      this.el.component.find('.pd03-product-finder__compare-bar-item').removeClass('pd03-product-finder__compare-bar-item--active');
      this.el.comparePopBtn.addClass('cta--disabled');
      this.el.comparePopBtn.attr('disabled');
      
      clearCompareBarItem();
      // [ADD] a 경우 aria-disabled="true", button 경우 disabled 추가 스크립트 추가 필요
    }

    countCompare() {
      const setMax = BREAKPOINTS.MOBILE < utils.getViewPort().width ? 3 : 2;
      const count = Object.keys(infoObj).length;

      if (count > setMax) {
        el.compareCnt.text(setMax);
      } else {
        el.compareCnt.text(count);
      }
      el.compareMaxCnt.text(setMax);
    }

    compareFoldToggle() {
      const hiddenText = this.el.compareFoldBtn.find('.hidden');
      const globalText = JSON.parse(hiddenText.target[0].dataset.globalText);
      const compareCloseClass = 'pd03-product-finder__compare-bar--closed';
      
      if(this.el.compareBar.hasClass(compareCloseClass)){
        this.el.compareBar.removeClass(compareCloseClass);
        hiddenText.text(globalText.Collapse);
      }else{
        this.el.compareBar.addClass(compareCloseClass);
        hiddenText.text(globalText.Expand);
      }
    }

    setFirstFocus(firstItem) {
      $q(firstItem).find('.pd03-product-card__product-name a').focus();
    }

    bindEvents() {
      this.el.window.off('resize', this.handler.resize).on('resize', this.handler.resize);
      this.el.window.off('scroll', this.handler.stickyHeader).on('scroll', this.handler.stickyHeader);

      // filter default toggle event
      this.el.filterList.target.forEach((item) => {
        const $item = $q(item);

        $item.off('click').on('click', (event) => {
          if ($q(event.target).closest(this.selector.tooltip).target.length === 0) {
            const $tip = $q(event.currentTarget || event.target);
            const $parent2dep = $tip.closest('.pd03-product-finder__filters-list-list-item');
            const $parent = $tip.closest(this.selector.filterlist2Area);

            $parent.css({
              overflow: '',
            });
            $parent2dep.css({
              overflow: '',
            });

            this.visibleFilter($item);
          }
        });
      });

      this.el.compareCloseBtn.off('click').on('click', () => {
        let $lastFocus = this.el.component.find('.pd03-product-finder__compare-bar-item--active');
        $lastFocus = $lastFocus.eq($lastFocus.target.length - 1);
        $lastFocus = btnObj[$lastFocus.target[0].dataset.id];
        this.clearCompare();
        $lastFocus.blur();
        $lastFocus.focus();
      });

      // mobile filter popup toggle event
      this.el.filterViewBtn.target.forEach((item) => {
        const $item = $q(item);

        $item.off('click').on('click', () => {
          if (BREAKPOINTS.MOBILE > utils.getViewPort().width) {
            this.mobileFilterOpen();
            this.el.filterCloseBtn.focus();
          } else {
            if (!this.el.filterWrap.hasClass(this.selector.filterHidden)) {
              this.desktopFilter(false, null, true);
            } else {
              this.desktopFilter(true, null, true);
            }
          }
        });
      });

      this.el.filterCloseBtn.target.forEach((item) => {
        const $item = $q(item);

        $item.off('click').on('click', () => {
          if (BREAKPOINTS.MOBILE > utils.getViewPort().width) {
            this.mobileFilterClose(true);
          }
        });
      });

      // hashtag active event
      this.el.hashtagBtn.target.forEach((item) => {
        const $item = $q(item);

        $item.off('click').on('click', () => {
          this.activeHash($item);
        });
      });

      // reset filter event
      this.el.resetFilter.target.forEach((item) => {
        const $item = $q(item);

        $item.off('click').on('click', () => {
          this.resetFilter();
        });
      });

      // filter checkbox event
      this.el.filterChk.target.forEach((item) => {
        const $item = $q(item);

        $item.off('change').on('change', () => {
          this.countFilter();
        });
      });

      this.el.btnShowMore.target.forEach((item) => {
        const $item = $q(item);

        $item.off('click').on('click', () => {
          this.toggleSingleFilter($item);
        });
      });

      this.el.countrySelectorOption.target.forEach((item, index) => {
        const selectedCurrency = item.dataset.countryCurrency;
        this.el.countrySelectorListOption.target[index].setAttribute('data-country-currency', selectedCurrency);
        const optionText = item.innerText.replace(/\)/gi, ')&lrm;');
        $q(this.el.countrySelectorListOption.target[index]).find('.menu__list-option-text').innerHTML(optionText);
        if(item.selected){
          this.el.countrySelectorText.text(selectedCurrency.toUpperCase());
          this.el.countrySelectorCta.target[0].setAttribute('data-country-currency', selectedCurrency);
        }
      });

      this.el.tooltip.off('mouseenter', this.handler.tooltipShow).on('mouseenter', this.handler.tooltipShow);
      this.el.tooltip.off('mouseleave', this.handler.tooltipHide).on('mouseleave', this.handler.tooltipHide);
      this.el.tooltip.off('focusin', this.handler.tooltipShow).on('focusin', this.handler.tooltipShow);
      this.el.tooltip.off('focusout', this.handler.tooltipHide).on('focusout', this.handler.tooltipHide);
      this.el.tooltip.off('click', this.handler.tooltipShow).on('click', this.handler.tooltipShow);
      this.el.tooltip.off('click', this.handler.tooltipHide).on('click', this.handler.tooltipHide);
      this.el.tooltipZip.off('click', this.handler.tooltipZipShow).on('click', this.handler.tooltipZipShow);
      this.el.itemBoxAll.off('click', this.handler.optionClick).on('click', this.handler.optionClick);
      el.popupCloseCta.off('click', this.handler.closePopup).on('click', this.handler.closePopup);
      this.el.compareFoldBtn.off('click', this.handler.compareFoldToggle).on('click', this.handler.compareFoldToggle);
      this.el.countrySelectorSelect.off('change', this.handler.countryChange).on('change', this.handler.countryChange);
    }

    optionTooltipShow() {
      if (this.el.optionTooltipCta.target.length > 0) {
        if (this.el.optionTooltipCta.outerWidth() < this.el.optionTooltipCta.target[0].scrollWidth) {
          if (!this.tooltipFlag) {
            this.tooltipFlag = true;
            if (this.el.optionTooltipCta.attr('disabled', true)) {
              this.el.optionTooltipCta.removeAttr('disabled');
            }
          }
        } else {
          if (this.tooltipFlag) {
            this.tooltipFlag = false;
          }
          this.el.optionTooltipCta.attr('disabled', true);
        }
      }
    }

    showBoxEvent() {
      if (this.tooltipFlag) {
        if (!this.el.colorName.hasClass(selector.optionActiveClass)) {
          this.el.colorName.addClass(selector.optionActiveClass);
          this.hiddenText.text(this.globalText.Expand);
        }
      }
    }

    hideBoxEvent() {
      if (this.el.colorName.hasClass(selector.optionActiveClass)) {
        this.el.colorName.removeClass(selector.optionActiveClass);
        this.hiddenText.text(this.globalText.Collapse);
      }

      if (document.activeElement === this.el.optionCloseCta.target[0]) {
        this.el.optionTooltipCta.focus();
        this.el.colorName.removeClass(selector.optionActiveClass);
        this.hiddenText.text(this.globalText.Collapse);
      }
    }

    optionTooltipKeyEvent(event) {
      const ele = $q(event.currentTarget);

      if (event.keyCode === window.sg.common.constants.KEY_CODE.ESC) {
        this.hideBoxEvent();
      }

      if (event.keyCode === window.sg.common.constants.KEY_CODE.TAB) {
        if (BREAKPOINTS.MOBILE >= utils.getViewPort().width) {
          if (!event.shiftKey) {
            this.optionCloseCtaViewFlag = true;
            this.showBoxEvent();
            ele.find(selector.optionCloseCta).focus();
          } else {
            this.clickFlag = false;
            this.hideBoxEvent();
          }
        }
      }
    }

    // POPUP
    focusKey(e, element) {
      if (e.shiftKey === false && el.popupCloseCta.target[0] === document.activeElement) {
        e.preventDefault();
        element.focus();
      } else if (e.shiftKey === true && element === document.activeElement) {
        e.preventDefault();
        el.popupCloseCta.focus();
      } else if (e.shiftKey === true && el.popupSection.target[0] === document.activeElement) {
        e.preventDefault();
        el.popupCloseCta.focus();
      }
    }

    focusLock(e) {
      if (e.keyCode === libs.keyCode.TAB_KEY) {
        const firstEl = el.popupSection.find('a, button').target[0];
        if ($q(firstEl).css('visibility') === 'hidden' || $q(firstEl).css('display') === 'none') {
          for (let i = 1; i < el.popupSection.find('a, button').target.length; i++) {
            const elem = el.popupSection.find('a, button').target[i];
            if ($q(elem).css('display') !== 'none') {
              const nextEl = el.popupSection.find('a, button').target[i];
              this.focusKey(e, nextEl);
              return;
            }
          }
        } else {
          this.focusKey(e, firstEl);
        }
      }
    }

    setPopupHeight() {
      if (el.popupSection.css('display') === 'block') {
        const $popupScroll = el.popupSection.find('.layer-popup__contents');
        const $popupInner = el.popupSection.find('.layer-popup__inner');
        const $heightEl = $popupScroll.find('.scrollbar__wrap').eq(0);
        const $heightElRight = $q('.quick-view__product-info-wrap');
        const $heightElLeft = $q('.quick-view__product-image-wrap');
        const heightBtn = $q('.quick-view__cta').outerHeight(true) + parseInt($q('.quick-view__cta').css('margin-top')) + 2;
        let maxHeight = utils.getViewPort().height;

        this.setScroll();

        $heightEl.css({
          maxHeight: '',
        });
        $heightElLeft.css({
          maxHeight: '',
        }); 
        $heightElRight.css({
          maxHeight: '',
        });  

        maxHeight -= $popupScroll.target[0].offsetTop;
        maxHeight -= $popupInner.offset().bottom - $popupScroll.offset().bottom;
        maxHeight -= BREAKPOINTS.MOBILE < utils.getViewPort().width ? 60 : $popupInner.target[0].offsetTop;
        
        if(maxHeight < 0){
          maxHeight = 0;
        }

        if ($heightEl.height() - 1 > Math.round(maxHeight)) {
          $heightEl.css({
            maxHeight: `${maxHeight}px`,
          });
          if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
            $heightElLeft.css({
              maxHeight: `${maxHeight}px`,
            });
            $heightElRight.css({
              maxHeight: `${maxHeight - heightBtn}px`,
            });  
          }
        }        
        
        el.popupSection.find('.scrollbar').target.forEach((el) => {
          window.sg.common.scrollbar.resize(el);
        });
      }
    }

    setScroll(){
      const $pcScrollBar = el.popupSection.find('.quick-view__product-image-wrap, .quick-view__product-info-wrap');
      const $moScrollBar = el.popupSection.find('.layer-popup__contents');
      
      let $removeScroll;
      let $addScroll;

      if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
        //pc
        $removeScroll = $moScrollBar;
        $addScroll = $pcScrollBar;
      }else{
        //mobile
        $removeScroll = $pcScrollBar;
        $addScroll = $moScrollBar;
      }

      $removeScroll.target.forEach((el) => {
        if(el.classList.contains('scrollbar') && el.querySelector(':scope >.scrollbar-horizontal__track')){
          window.sg.common.scrollbar.destroy(el);
          el.classList.remove('scrollbar');
          el.querySelector(':scope >.scrollbar-horizontal__track').remove();
          el.querySelector(':scope >.scrollbar-vertical__track').remove();
        }
      });

      $addScroll.target.forEach((el) => {
        if(el.classList.contains('scrollbar') && el.querySelector(':scope >.scrollbar-horizontal__track')){            
          window.sg.common.scrollbar.resize(el);
        }else{
          el.classList.add('scrollbar');

          setTimeout(() => {
            window.sg.common.scrollbar.reInit(el);
          }, 300);
        }          
      });
    }

    quickViewOpenBindEvent(focusEl) {
      if (focusEl) {
        this.activeCta = $q(focusEl);
      }
      el.popupSection.css({
        'display': 'block',
      });
      if (document.querySelector('body').style.position !== 'fixed') {
        utils.hiddenScroll();
      }

      el.popupSection.find('.basic-swiper').target.forEach((element) => {
        swiperManager.slideReInit(element);
      });

      window.sg.common.optionSelectorV2.reInit($q('.quick-view__option-selector').target[0]);
      if ($q('.quick-view__swiper').find('.swiper-slide').target.length <= 1) {
        $q('.quick-view__swiper').find('.indicator').addClass('swiper-pagination-lock');
      }
      el.popupSection.find('.scrollbar__wrap').eq(0).moveScroll(0, 0);
      
      this.handler.setPopupHeight();
      // optionSelector
      this.el.colorName = el.popupSection.find(selector.colorName);
      this.el.optionTooltipCta = el.popupSection.find(selector.optionTooltipCta);
      this.el.optionTooltipWrap = el.popupSection.find(selector.optionTooltipWrap);
      this.el.optionCloseCta = el.popupSection.find(selector.optionCloseCta);
      this.el.optionSlideButtonList = el.popupSection.find(selector.optionSlideButtonList);

      if (this.el.optionTooltipCta.target.length > 0) {
        this.hiddenText = this.el.optionTooltipCta.find('.hidden');
        this.globalText = JSON.parse(this.hiddenText.target[0].dataset.globalText);
      }
      
      if (el.popupSection.find(selector.colorName).target.length > 0) {
        this.el.optionSlideButtonList.on('click', (evt) => {
          const color = evt.target.querySelector('.hidden') || null;
          if (color) {
            el.popupSection.find('.option-selector-v2__color-name-text-in').innerHTML(color.innerText);
            el.popupSection.find('.option-selector-v2__color-tooltip-text').innerHTML(color.innerText);
            this.optionTooltipShow();
          }
        });
          
        this.el.optionTooltipCta.off('keydown', this.handler.optionTooltipKeyEvent).on('keydown', this.handler.optionTooltipKeyEvent);
        this.el.optionTooltipCta.off('mouseover', this.handler.showBoxEvent).on('mouseover', () => {
          if (!this.clickFlag) {
            this.showBoxEvent();
          }
        });
        this.el.colorName.off('mouseleave', this.handler.hideBoxEvent).on('mouseleave', () => {
          if (!this.clickFlag) {
            this.hideBoxEvent();
          }
        });
        this.el.optionCloseCta.off('click', this.handler.hideBoxEvent).on('click', () => {
          this.hideBoxEvent();
        });
        this.el.optionTooltipCta.off('click', this.handler.showBoxEvent).on('click', (e) => {
          e.preventDefault();
          this.clickFlag = true;
          this.showBoxEvent();
          if (this.optionCloseCtaViewFlag) {
            this.optionCloseCtaViewFlag = false;
          }
        });
        this.el.optionTooltipCta.off('focus', this.handler.showBoxEvent).on('focus', () => {
          this.clickFlag = true;
          
          this.showBoxEvent();
          if (this.optionCloseCtaViewFlag) {
            this.optionCloseCtaViewFlag = false;
          }
        });
        this.el.optionTooltipCta.off('focusout', this.handler.hideBoxEvent).on('focusout', () => { 
          if (this.desktopFlag) {
            if (this.clickFlag) {
              this.clickFlag = false;
            }
            this.hideBoxEvent();
          } else { 
            if (!this.optionCloseCtaViewFlag) {
              this.clickFlag = false;
              this.hideBoxEvent();
            }
          }
        });
        this.el.optionCloseCta.off('focusout', this.handler.hideBoxEvent).on('focusout', () => { 
          this.clickFlag = false;
          this.hideBoxEvent();
        });
      }

      // mobile only view more
      const $specBtn = el.popupSection.find('.quick-view__spec-cta button');
      const $specList = el.popupSection.find('.quick-view__spec');

      $specBtn.off('click').on('click', () => {
        if (!$specList.hasClass('is-show')) {
          $specList.addClass('is-show');
          $specBtn.addClass('cta--less');
          $specBtn.find('span').text($specBtn.attr('data-text-less'));
        } else {
          $specList.removeClass('is-show');
          $specBtn.removeClass('cta--less');
          $specBtn.find('span').text($specBtn.attr('data-text-more'));
        }

        el.popupSection.find('.scrollbar').target.forEach((element) => {
          window.sg.common.scrollbar.reInit(element);
        });
      });

      this.el.window.off('keydown', this.handler.focusLock).on('keydown', this.handler.focusLock);

      const focusableEl = el.popupSection.find('a, button').target[0];
      if ($q(focusableEl).css('visibility') === 'hidden' || $q(focusableEl).css('display') === 'none') {
        for (let i = 1; i < el.popupSection.find('a, button').target.length; i++) {
          const elem = el.popupSection.find('a, button').target[i];
          if ($q(elem).css('display') !== 'none') {
            const focusNextEl = el.popupSection.find('a, button').target[i];
            setTimeout(() => {
              focusNextEl.focus();
            }, 1500);
            return;
          }
        }
      } else {
        setTimeout(() => {
          focusableEl.focus();
        }, 1500);
      }

      if (document.querySelectorAll('[data-aria-hidden]').length <= 0) {
        setMobileFocusLoop(el.popupSection.target[0]);
      }

      utils.changeActiveReCaptchaProperty();
    }

    closePopup(e) {
      if (e !== undefined) {
        e.preventDefault();
      }

      if (document.querySelectorAll('[data-aria-hidden]').length > 0) {
        removeMobileFocusLoop();
      }

      utils.changeInActiveReCaptchaProperty();

      if (this.activeCta !== null) {
        this.activeCta.focus();
      }

      utils.visibleScroll();
      el.popupSection.css({
        'display': 'none',
      });
      this.el.window.off('keydown', this.handler.focusLock);

      this.activeCta = null;

      // mobile only view more
      const $specBtn = el.popupSection.find('.quick-view__spec-cta button');
      const $specList = el.popupSection.find('.quick-view__spec');

      $specList.removeClass('is-show');
      $specBtn.removeClass('cta--less');
      $specBtn.find('span').text($specBtn.attr('data-text-more'));
    }

    countryChange() {
      const selectedCurrency = this.el.countrySelectorSelect.target[0].options[this.el.countrySelectorSelect.target[0].selectedIndex].dataset.countryCurrency;
      this.el.countrySelectorText.text(selectedCurrency.toUpperCase());
      this.el.countrySelectorCta.target[0].setAttribute('data-country-currency', selectedCurrency);
    }

    lnbTransitionStart() {
      this.lnbAnimating = true;
    }

    lnbTransitionEnd() {
      this.lnbAnimating = false;
    }

    getStickyHeaderHeight() {
      let fixedH;
      if (this.isExplorerLnb) {
        fixedH = this.el.filterBar.height() + el.exploreEl.height();
      } else if (this.isVisualLnb) {
        fixedH = this.el.filterBar.height() + el.visualEl.height();
      } else if (this.isExplorerLnbNV07) {
        fixedH = this.el.filterBar.height() + el.exploreNV07El.height();
      } else if (this.isVisualLnbNew) {
        fixedH = this.el.filterBar.height() + el.visualNewEl.height();
      } else {
        fixedH = this.el.filterBar.height();
      }

      return fixedH;
    }

    scrollToFirstItem() {
      const firstItemOffsetTop = this.el.itemRow.target[0].getBoundingClientRect().top;
      const isScrollUp = this.el.component.hasClass('pd03-product-finder__sticky') ? true : false;
      const isMobile = utils.getCurrentDevice() === 'mobile';

      // Mobile 에서 필터바와 아이템 간의 간격 조정
      const tempOffset = isMobile ? 16 * (window.innerWidth / BREAKPOINTS.MOBILE) : 0;
      const fixedH = this.getStickyHeaderHeight() + tempOffset;

      if(!isScrollUp && isMobile) {
        window.scrollTo(0, firstItemOffsetTop + window.pageYOffset - this.el.filterBar.height() - tempOffset);
      } else {
        window.scrollTo(0, firstItemOffsetTop + window.pageYOffset - fixedH);
      }
    }
  }

  const init = () => {
    if (!$q(selector.section).target.length) {
      return;
    }

    $q(selector.section).target.forEach((element) => {
      if (!Pd03ProductFinder.instances.has(element)) {
        new Pd03ProductFinder(element);
      }
    });
  };

  const reInit = () => {
    $q(selector.section).target.forEach((element) => {
      const $element = $q(element);

      $element.find('.menu').target.forEach((dn) => {
        menu.init(dn); //if call reinit -> .pd03-product-finder__filters-bar-select select change
      });

      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.reInit();
      } else {
        new Pd03ProductFinder(element);
      }
    });
  };

  const resize = () => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.handler.resize();
      }
    });
  };

  const cardFadeEffect = () => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.cardFadeEffect();
      }
    });
  };

  const replaceText = (text) => {
    const changeText = text.replace(/\\"/gi, '"');
    return changeText;
  };

  // const
  const setCompareBarItem = () => {
    const itemAll = $q(selector.section).find('.pd03-product-finder__compare-bar-item');
    const ObjAllLength = Object.keys(infoObj).length;
    const activeItemLength = $q(selector.section).find('.pd03-product-finder__compare-bar-item--active').target.length;
    if (ObjAllLength <= activeItemLength) {
      //infoObj가 active된 item보다 적은 경우 compare item 전체 초기화
      clearCompareBarItem();
    }

    Object.keys(infoObj).forEach((key, idx) => {
      const item = itemAll.eq(idx);
      const obj = infoObj[key];
      if (!$q(selector.section).find(`.pd03-product-finder__compare-bar-item[data-id='${obj.id}']`).target[0]) {
        //이미 추가된 제품이 아닌 경우에만 추가
        item.find(`${selector.compareBarItemThumb} .image`).remove();
        item.addClass('pd03-product-finder__compare-bar-item--active');
        item.find('.pd03-product-finder__compare-bar-item-product-name').text(replaceText(obj.title));

        if(obj.description){
          item.find('.pd03-product-finder__compare-bar-item-description').show();
          item.find('.pd03-product-finder__compare-bar-item-description').text(replaceText(obj.description));
        }

        if(obj['samcol-price-vat']){
          item.find('.pd03-product-finder__compare-bar-item-price-excluding-vat').show();
          item.find('.pd03-product-finder__compare-bar-item-price-excluding-vat span').text(obj['samcol-price-vat']);
        }

        if(obj['samcol-price-special']){
          item.find('.pd03-product-finder__compare-bar-item-price-special').show();
          item.find('.pd03-product-finder__compare-bar-item-price-special span').text(obj['samcol-price-special']);
        }

        if(obj['samcol-price-rrp']){
          item.find('.pd03-product-finder__compare-bar-item-price-rrp').show();
          item.find('.pd03-product-finder__compare-bar-item-price-rrp del').text(obj['samcol-price-rrp']);
        }
        if(obj.thumbDesktop || obj.thumbMobile){
          const thumbHtml = `<div class="image">
            <img class="image__main responsive-img" data-desktop-src="${obj.thumbDesktop || obj.thumbMobile}" data-mobile-src="${obj.thumbMobile || obj.thumbDesktop}" alt="${obj.thumbAlt || ''}" role="img" data-comp-name="image">
          </div>`;
          item.find(selector.compareBarItemThumb).target[0].insertAdjacentHTML('afterbegin', thumbHtml);
          window.sg.common.image.reInit(item.find(`${selector.compareBarItemThumb} img`).target[0]);
        }
        item.attr('data-id', obj.id);
      }
    });
  };

  const clearCompareBarItem = () => {
    const itemAll = $q(selector.section).find('.pd03-product-finder__compare-bar-item');
    itemAll.removeClass('pd03-product-finder__compare-bar-item--active');
    itemAll.find('p:not(.pd03-product-finder__compare-bar-item-product-name)').removeAttr('style');
    itemAll.find('.pd03-product-finder__compare-bar-item-product-name').text('');
    itemAll.find('.pd03-product-finder__compare-bar-item-description').text('');
    itemAll.find('.pd03-product-finder__compare-bar-item-price-excluding-vat span').text('');
    itemAll.find('.pd03-product-finder__compare-bar-item-price-special span').text('');
    itemAll.find('.pd03-product-finder__compare-bar-item-price-rrp del').text('');
    itemAll.attr('data-id', '');
  };

  // pd03-product-finder__compare-bar
  const comparebarSlotOpen = (obj, btn) => {
    if (document.querySelector('.pd03-product-finder__snack-bar').classList.contains('show')) {
      return;
    }

    const setMax = BREAKPOINTS.MOBILE < utils.getViewPort().width ? 3 : 2;

    if (infoObj[obj.id]) {
      window.sg.components.pd03ProductFinder.comparebarSlotClose(obj.id);
      return;
    }

    if (Object.keys(infoObj).length >= setMax) {
      return;
    }

    const $btn = $q(btn);

    $btn.addClass('cta--done');
    $btn.attr('aria-selected', true);
    $btn.find('svg use').attr('xlink:href', '#circle-selected-regular');
    $btn.find('svg use').attr('href', '#circle-selected-regular');

    infoObj[obj.id] = obj;
    btnObj[obj.id] = btn;

    setCompareBarItem();

    $q('.pd03-product-finder__compare-bar').addClass('pd03-product-finder__compare-bar--view');

    const count = Object.keys(infoObj).length;
    const compare = $q('.pd03-product-finder__compare-bar-cta .cta--compare');

    if (count >= 2) {
      compare.removeClass('cta--disabled');
      compare.removeAttr('disabled');
      // [ADD] a 경우 aria-disabled="true", button 경우 disabled 삭제 스크립트 추가 필요
    }

    el.compareCnt.text(count);
    el.compareMaxCnt.text(setMax);
  };

  const comparebarSlotClose = (id) => {
    delete infoObj[id];

    setCompareBarItem();

    const $btn = $q(btnObj[id]);

    $btn.removeClass('cta--done');
    $btn.attr('aria-selected', false);
    $btn.find('svg use').attr('xlink:href', '#default-circle-regular');
    $btn.find('svg use').attr('href', '#default-circle-regular');

    delete btnObj[id];

    const count = Object.keys(infoObj).length;
    const compare = $q('.pd03-product-finder__compare-bar-cta .cta--compare');
    const setMax = BREAKPOINTS.MOBILE < utils.getViewPort().width ? 3 : 2;

    if (count < 2) {
      compare.addClass('cta--disabled');
      compare.attr('disabled');
      // [ADD] a 경우 aria-disabled="true", button 경우 disabled 추가 스크립트 추가 필요
    }

    el.compareCnt.text(count);
    el.compareMaxCnt.text(setMax);

    if (count === 0) {
      $q(selector.section).target.forEach((element) => {
        if (Pd03ProductFinder.instances.has(element)) {
          const instances = Pd03ProductFinder.instances.get(element);
          instances.clearCompare();
        }
      });
    }
  };

  // window.sg.components.pd03ProductFinder.comparebarSlotClose();
  const comparebarClose = () => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.clearCompare();
      }
    });
  };

  // reset content height
  const setHeaderFixFlag = () => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.setHeaderFixFlag();
      }
    });
  };

  /**
  //  @description : filter list show/hide when call mobileFilterClose.
  //  @example1 : filter list show > window.sg.components.pd03ProductFinder.setFilterDisplay(true, true)
  //  @example2 : filter list hide > window.sg.components.pd03ProductFinder.setFilterDisplay(false, true)
  **/
  const setFilterDisplay = (foldFlag) => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.setFilterDisplay(foldFlag, true);
      }
    });
  };

  /**
  //  @description : filter list toggle show/hide.
  //  @example1 : filter list toggle show > window.sg.components.pd03ProductFinder.setFilterListDisplay(true)
  //  @example2 : filter list toggle hide > window.sg.components.pd03ProductFinder.setFilterListDisplay(false)
  **/
  const setFilterListDisplay = (foldFlag) => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.setFilterListDisplay(foldFlag);
      }
    });
  };

  const mobileFilterClose = (setFocus = true) => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.mobileFilterClose(setFocus);
      }
    });
  };

  const setFirstFocus = (firstEl) => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.setFirstFocus(firstEl);
      }
    });
  };

  const filterListCheck = () => {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.filterListCheck();
      }
    });
  };

  /**
   * Description...
   * @func snackBarOpen (In case of impossible to compare product) occur Warning pop up
   * @param {HTMLElement} btn set focus when closed snack bar
   */
  const snackBarOpen = (btn) => {
    const $snackBar = $q(document.querySelector('.pd03-product-finder__snack-bar'));
    $snackBar.addClass('is-show');
    $snackBar.find('.cta').focus();
    $snackBar.find('.cta').off('click').on('click', () => {
      $snackBar.removeClass('is-show');
      btn.focus();
    });
  };

  /**
  //  @param       : focus element(value of id attribute)
  //  @description : set focus when closed Popup.
  //  @example : window.sg.components.Pd03ProductFinder.activePopup(document.querySelector('.layer-popup__close'))
  **/
  // const activePopup = (focusEl) => {
  //   if (Pd03ProductFinder.instances.has(document.querySelector(selector.section))) {
  //     const instances =  Pd03ProductFinder.instances.get(document.querySelector(selector.section));
  //     instances.activePopup(focusEl);
  //   }
  // };

  const closePopup = () => {
    if (Pd03ProductFinder.instances.has(document.querySelector(selector.section))) {
      const instances =  Pd03ProductFinder.instances.get(document.querySelector(selector.section));
      instances.closePopup();
    }
  };

  const quickViewOpenBindEvent = (focusEl) => {
    if (Pd03ProductFinder.instances.has(document.querySelector(selector.section))) {
      const instances =  Pd03ProductFinder.instances.get(document.querySelector(selector.section));
      instances.quickViewOpenBindEvent(focusEl);
    }
  };

  const reCaptchaHidden = () => {
    utils.changeActiveReCaptchaProperty();
  };

  function returnOption() {
    const optionVal = [reInitCard, checkedColor, checkedCapacity, reInitFocus];
    return optionVal;
  }

  function resetClickedOption() {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.resetOption();
      }
    });
  }

  function scrollToFirstItem() {
    $q(selector.section).target.forEach((element) => {
      if (Pd03ProductFinder.instances.has(element)) {
        const instances = Pd03ProductFinder.instances.get(element);
        instances.scrollToFirstItem();
      }
    });
  }

  Pd03ProductFinder.instances = new WeakMap();

  // $q.ready(init); console.log('call : pd03ProductFinder.init()');

  window.sg.components.pd03ProductFinder = {
    init,
    reInit,
    resize,
    cardFadeEffect,
    comparebarSlotOpen,
    comparebarSlotClose,
    comparebarClose,
    setHeaderFixFlag,
    setFilterDisplay,
    setFilterListDisplay,
    mobileFilterClose,
    setFirstFocus,
    filterListCheck,
    snackBarOpen,
    closePopup,
    reCaptchaHidden,
    returnOption,
    resetClickedOption,
    quickViewOpenBindEvent,
    scrollToFirstItem,
  };
})();

(() => {
  if (!document.querySelector('.pd03-product-finder')) {
    return;
  }

  const $q = window.sg.common.$q;
  const BREAKPOINTS = window.sg.common.constants.BREAKPOINTS;
  const utils = window.sg.common.utils;
  const lazyLoad = window.sg.common.lazyLoad;
  const swiperManager = window.sg.common.swiperManager;
  const optionSelectorV2 = window.sg.common.optionSelectorV2;
  const icon = window.sg.common.icon;
  const pd03ProductFinder = window.sg.components.pd03ProductFinder;

  const selector = {
    component: '.pd03-product-card',
    container: '.swiper-container',
    itemImageWrap: '.pd03-product-card__product-image',
    itemImage: '.pd03-product-card__image-item',
    colorName: '.option-selector-v2__color-name',
    tooltipCta: '.option-selector-v2__color-name-text',
    tooltipWrap: '.option-selector-v2__color-tooltip',
    closeCta: '.option-selector-v2__color-tooltip-close',
    slideButtonList: '.option-selector-v2__swiper-slide button',
    activeClass: 'is-show',
    comboSlide: '.pd03-product-card__combo-package-container',
  };

  const el = {
    window: null,
    component: null,
  };

  class Pd03ProductCard {
    constructor(component) {
      this.el = {
        window: $q(window),
        component: $q(component),
      };

      this.handler = {
        resize: this.resize.bind(this),
        tooltipShow: this.tooltipShow.bind(this),
        tooltipKeyEvent: this.tooltipKeyEvent.bind(this),
        showBoxEvent: this.showBoxEvent.bind(this),
        hideBoxEvent: this.hideBoxEvent.bind(this),
      };

      this.timer = null;

      Pd03ProductCard.instances.set(component, this);

      this.setProperty();

      this.init();
    }

    setProperty() {
      this.el.itemImageWrap = this.el.component.find(selector.itemImageWrap);
      this.el.itemImage = this.el.component.find(selector.itemImage);
      this.el.colorName = this.el.component.find(selector.colorName);
      this.el.tooltipCta = this.el.component.find(selector.tooltipCta);
      this.el.tooltipWrap = this.el.component.find(selector.tooltipWrap);
      this.el.closeCta = this.el.component.find(selector.closeCta);
      this.el.slideButtonList = this.el.component.find(selector.slideButtonList);
      this.el.comboSlide = this.el.component.find(selector.comboSlide);

      this.desktopFlag = false;
      this.mobileFlag = false;
      this.changeImg = null;
      this.tooltipFlag = false;
      this.clickFlag = false;
      this.closeCtaViewFlag = false;

      if (this.el.tooltipCta.target.length > 0) {
        this.hiddenText = this.el.tooltipCta.find('.hidden');
        this.globalText = JSON.parse(this.hiddenText.target[0].dataset.globalText);
      }
    }

    init() {
      this.bindEvents();
    }

    reInit() {
      this.setProperty();
      const clickedOption = pd03ProductFinder.returnOption();

      if (clickedOption[0] !== null) {
        const activeColor = clickedOption[1];
        const activeCapa = clickedOption[2];
        const focusOption = clickedOption[3];
        const focusEl = this.el.component.find(`.option-selector-v2__wrap--${focusOption.type}`).find('.option-selector-v2__swiper-slide').eq(focusOption.idx);

        if (this.el.component.find('.option-selector-v2__wrap--color-chip').target.length > 0 && activeColor.style !== null) {
          if (activeColor.style.indexOf('transition') >= 0) {
            const transform = activeColor.style.split('transition')[0];
            activeColor.style = transform;
          }
          const colorStyle = `${activeColor.style} transition: none 0s ease 0s;`;
          this.el.component.find('.option-selector-v2__wrap--color-chip .option-selector-v2__swiper-wrapper').target[0].style = colorStyle;
        }
        if (this.el.component.find('.option-selector-v2__wrap--capacity').target.length > 0 && activeCapa.style !== null) {
          if (activeCapa.style.indexOf('transition') >= 0) {
            const transform = activeCapa.style.split('transition')[0];
            activeCapa.style = transform;
          }
          const capaStyle = `${activeCapa.style} transition: none 0s ease 0s;`;
          this.el.component.find('.option-selector-v2__wrap--capacity .option-selector-v2__swiper-wrapper').target[0].style = capaStyle;
        }
        setTimeout(() => {
          focusEl.find('button').focus();
          pd03ProductFinder.resetClickedOption();
        }, 500);
      }

      optionSelectorV2.reInit(this.el.component.target[0]);

      this.el.comboSlide.target.forEach((swiperEl) => {
        swiperManager.slideReInit(swiperEl);
      });

      if (BREAKPOINTS.MOBILE > utils.getViewPort().width) {
        this.el.component.find(selector.itemImageWrap).target.forEach((item) => {
          const imgSwiper = $q(item).find(selector.container).target[0];

          if(imgSwiper.swiper === undefined){
            swiperManager.slideInit(imgSwiper);
          }else{
            swiperManager.slideReInit(imgSwiper);
          }
        });
      }

      this.bindEvents();

      this.resize();

      lazyLoad.setLazyLoad();

      icon.update(this.el.component.target[0]);
    }

    changeThumbnail(item) {
      let cnt = 0;

      clearInterval(this.changeImg);
      this.changeImg = null;

      function myTimer() {
        item.find(selector.itemImage).hide();
        
        item.find(selector.itemImage).eq(cnt).show();
        lazyLoad.setLazyLoad();

        cnt++;

        if (cnt >= item.find(selector.itemImage).target.length) {
          cnt = 0;
        }
      }

      this.changeImg = setInterval(myTimer, 500);
    }

    stopThumbmail(item) {
      clearInterval(this.changeImg);
      this.changeImg = null;

      item.find(selector.itemImage).hide();
      item.find(selector.itemImage).eq(0).show();
    }

    resize() {
      if (BREAKPOINTS.MOBILE > utils.getViewPort().width) {
        if (this.mobileFlag === false) {
          this.mobileFlag = true;
          this.desktopFlag = false;

          this.el.itemImageWrap.target.forEach((item) => {
            const $item = $q(item);
      
            $item.off('mouseenter');
            $item.off('mouseleave');
            $item.off('focusin');
            $item.off('focusout');
          });

          this.el.itemImage.show();

          this.el.itemImageWrap.target.forEach((item) => {
            swiperManager.slideInit($q(item).find(selector.container).target[0]);
          });
        }
      } else {
        if (this.desktopFlag === false) {
          this.desktopFlag = true;
          this.mobileFlag = false;

          this.el.itemImageWrap.target.forEach((item) => {
            const $item = $q(item);

            $item.find(selector.itemImage).target.forEach((itemImage, idx) => {
              const imageEle = $q(itemImage);
              imageEle.css({
                'width': '',
              });

              if (idx !== 0) {
                imageEle.hide();
              }
            });
          });

          this.el.itemImageWrap.target.forEach((item) => {
            swiperManager.slideRemove($q(item).find(selector.container).target[0]);
          });
        }

        this.el.itemImageWrap.target.forEach((item) => {
          const $item = $q(item);
    
          $item.on('mouseenter', () => {
            this.changeThumbnail($item);
          });
    
          $item.on('mouseleave', () => {
            this.stopThumbmail($item);
          });

          $item.on('focusin', () => {
            this.changeThumbnail($item);
          });
    
          $item.on('focusout', () => {
            this.stopThumbmail($item);
          });
        });
      }
      this.tooltipShow();
    }

    bindEvents() {
      this.el.window.off('resize', this.handler.resize).on('resize', this.handler.resize);

      // card image splite event
      if (BREAKPOINTS.MOBILE < utils.getViewPort().width) {
        this.el.itemImageWrap.target.forEach((item) => {
          const $item = $q(item);
    
          $item.on('mouseenter', () => {
            this.changeThumbnail($item);
          });
    
          $item.on('mouseleave', () => {
            this.stopThumbmail($item);
          });

          $item.on('focusin', () => {
            this.changeThumbnail($item);
          });
    
          $item.on('focusout', () => {
            this.stopThumbmail($item);
          });
        });
      }

      if (this.el.component.find(selector.colorName).target.length > 0) {
        this.el.slideButtonList.on('click', (evt) => {
          const color = evt.target.querySelector('.hidden') || null;
          if (color) {
            this.el.component.find('.option-selector-v2__color-name-text-in').innerHTML(color.innerText);
            this.el.component.find('.option-selector-v2__color-tooltip-text').innerHTML(color.innerText);
            this.tooltipShow();
          }
        });
          
        this.el.tooltipCta.off('keydown', this.handler.tooltipKeyEvent).on('keydown', this.handler.tooltipKeyEvent);
        this.el.tooltipCta.off('mouseover', this.handler.showBoxEvent).on('mouseover', () => {
          if (!this.clickFlag) {
            this.showBoxEvent();
          }
        });
        this.el.colorName.off('mouseleave', this.handler.hideBoxEvent).on('mouseleave', () => {
          if (!this.clickFlag) {
            this.hideBoxEvent();
          }
        });
        this.el.closeCta.off('click', this.handler.hideBoxEvent).on('click', () => {
          this.hideBoxEvent();
        });
        this.el.tooltipCta.off('click', this.handler.showBoxEvent).on('click', (e) => {
          e.preventDefault();
          this.clickFlag = true;
          this.showBoxEvent();
          if (this.closeCtaViewFlag) {
            this.closeCtaViewFlag = false;
          }
        });
        this.el.tooltipCta.off('focus', this.handler.showBoxEvent).on('focus', () => {
          this.clickFlag = true;
          
          this.showBoxEvent();
          if (this.closeCtaViewFlag) {
            this.closeCtaViewFlag = false;
          }
        });
        this.el.tooltipCta.off('focusout', this.handler.hideBoxEvent).on('focusout', () => { 
          if (this.desktopFlag) {
            if (this.clickFlag) {
              this.clickFlag = false;
            }
            this.hideBoxEvent();
          } else { 
            if (!this.closeCtaViewFlag) {
              this.clickFlag = false;
              this.hideBoxEvent();
            }
          }
        });
        this.el.closeCta.off('focusout', this.handler.hideBoxEvent).on('focusout', () => { 
          this.clickFlag = false;
          this.hideBoxEvent();
        });
      }
    }

    tooltipShow() {
      if (this.el.tooltipCta.target.length > 0) {
        if (this.el.tooltipCta.outerWidth() < this.el.tooltipCta.target[0].scrollWidth) {
          if (!this.tooltipFlag) {
            this.tooltipFlag = true;
            if (this.el.tooltipCta.attr('disabled', true)) {
              this.el.tooltipCta.removeAttr('disabled');
            }
          }
        } else {
          if (this.tooltipFlag) {
            this.tooltipFlag = false;
          }
          this.el.tooltipCta.attr('disabled', true);
        }
      }
    }

    showBoxEvent() {
      if (this.tooltipFlag) {
        if (!this.el.colorName.hasClass(selector.activeClass)) {
          this.el.colorName.addClass(selector.activeClass);
          this.hiddenText.text(this.globalText.Expand);
        }
      }
    }

    hideBoxEvent() {
      if (this.el.colorName.hasClass(selector.activeClass)) {
        this.el.colorName.removeClass(selector.activeClass);
        this.hiddenText.text(this.globalText.Collapse);
      }

      if (document.activeElement === this.el.closeCta.target[0]) {
        this.el.tooltipCta.focus();
        this.el.colorName.removeClass(selector.activeClass);
        this.hiddenText.text(this.globalText.Collapse);
      }
    }

    tooltipKeyEvent(event) {
      const ele = $q(event.currentTarget);

      if (event.keyCode === window.sg.common.constants.KEY_CODE.ESC) {
        this.hideBoxEvent();
      }

      if (event.keyCode === window.sg.common.constants.KEY_CODE.TAB) {
        if (BREAKPOINTS.MOBILE >= utils.getViewPort().width) {
          if (!event.shiftKey) {
            this.closeCtaViewFlag = true;
            this.showBoxEvent();
            ele.find(selector.closeCta).focus();
          } else {
            this.clickFlag = false;
            this.hideBoxEvent();
          }
        }
      }
    }
  }

  const init = () => {
    el.component = $q(selector.component);

    if (!el.component.target.length) {
      return;
    }

    $q(selector.component).target.forEach((element) => {
      if (!Pd03ProductCard.instances.has(element)) {
        new Pd03ProductCard(element);
      }
    });
  };

  // The newly created element init
  const reInit = (item) => {
    let $initItem;

    if (item) {
      $initItem = $q(item);
    } else {
      $initItem = $q(selector.component);
    }

    $initItem.target.forEach((element) => {
      if (!Pd03ProductCard.instances.has(element)) {
        new Pd03ProductCard(element);

        const instances =  Pd03ProductCard.instances.get(element);
        instances.reInit();
      }
    });

    pd03ProductFinder.resize();
  };

  // Individual elements init
  const reInitCard = (cardItem) => {
    reInit(cardItem);
  };

  Pd03ProductCard.instances = new WeakMap();

  $q.ready(init);

  window.sg.components.pd03ProductCard = {
    init,
    reInit,
    reInitCard,
  };
})();

(() => {
  if($('.pd03-product-finder').length < 1){
    return;
  }
  const $q = window.sg.common.$q;
  const KEYCODE = window.sg.common.constants.KEY_CODE;
  const selector = {
    section: '.us-epp-discount',
  };

  class UsEppDiscount {
    constructor(element) {
      this.selector = {
        discountTitle: '.us-epp-discount__title',
        selectWrap: '.us-epp-discount__select',
        selectCta: '.us-epp-discount__select-cta',
        selectItem: '.us-epp-discount__select-item input[type="radio"]',
        learnMore: '.us-epp-discount__select-link .cta',
        selectOpenCls: 'us-epp-discout__select--open',
        fixedCls: 'us-epp-discount--fiexd',
      };

      this.el = {
        component: $q(element),
        fixDummy: null,
      };

      this.isFixOnce = false;

      this.handler = {
        toggleLayer: this.toggleLayer.bind(this),
        setFocusLock: this.setFocusLock.bind(this),
        resizeFix: () => {
          if (this.el.fixDummy.target.length > 0) {
            this.el.fixDummy.css({
              height: `${this.el.component.height()}px`,
            });
          }
        },
      };

      UsEppDiscount.instances.set(element, this);

      this.setElements();

      this.init();
    }

    setElements() {
      this.el.discountTitle = this.el.component.find(this.selector.discountTitle);
      this.el.selectWrap = this.el.component.find(this.selector.selectWrap);
      this.el.selectCta = this.el.component.find(this.selector.selectCta);
      this.el.hiddenText = this.el.selectCta.find('.hidden');
      this.el.selectItem = this.el.component.find(this.selector.selectItem);
      this.el.learnMore = this.el.component.find(this.selector.learnMore);
      this.el.fixDummy = $q(this.el.component.target[0].nextElementSibling);

      this.globalText = this.el.selectCta.target.length > 0 ? JSON.parse(this.el.selectCta.target[0].dataset.globalText) : null;
    }

    init() {
      this.bindEvents();
    }

    reInit() {
      this.setElements();

      this.bindEvents();
    }

    toggleLayer() {
      if (this.el.selectWrap.hasClass(this.selector.selectOpenCls)) {
        this.closeLayer();
      } else {
        this.openLayer();
      }
    }

    openLayer() {
      this.el.selectWrap.addClass(this.selector.selectOpenCls);
      this.el.hiddenText.text(this.globalText.Close);
    }

    closeLayer() {
      this.el.selectWrap.removeClass(this.selector.selectOpenCls);
      this.el.hiddenText.text(this.globalText.Open);
    }

    setFixed(flag) {
      if (this.isFixOnce === false) {
        this.isFixOnce = true;
      }

      if (flag) {
        if (!this.el.component.target[0].classList.contains(this.selector.fixedCls)) {
          this.el.component.addClass(this.selector.fixedCls);
        }
      } else {
        if (this.el.component.target[0].classList.contains(this.selector.fixedCls)) {
          this.el.component.removeClass(this.selector.fixedCls);
        }
      }
    }

    setFocusLock(event) {
      if (event.keyCode === KEYCODE.TAB && event.shiftKey === false) {
        this.el.selectCta.focus();
        this.closeLayer();

        event.preventDefault();
      }
    }

    bindEvents() {
      this.el.selectCta.off('click', this.handler.toggleLayer).on('click', this.handler.toggleLayer);
      this.el.learnMore.off('keydown', this.handler.setFocusLock).on('keydown', this.handler.setFocusLock);
      $q(window).off('resize',this.handler.resizeFix).on('resize',this.handler.resizeFix);
      this.handler.resizeFix();
    }
  }

  const init = () => {
    $q(selector.section).target.forEach((element) => {
      if (!UsEppDiscount.instances.has(element)) {
        new UsEppDiscount(element);
      }
    });
  };

  const reInit = () => {
    $q(selector.section).target.forEach((element) => {
      if (UsEppDiscount.instances.has(element)) {
        UsEppDiscount.instances.get(element).reInit();
      } else {
        new UsEppDiscount(element);
      }
    });
  };

  const closeLayer = () => {
    $q(selector.section).target.forEach((element) => {
      if (UsEppDiscount.instances.has(element)) {
        UsEppDiscount.instances.get(element).closeLayer();
      }
    });
  };

  const setFixed = (activeFlag) => {
    $q(selector.section).target.forEach((element) => {
      if (UsEppDiscount.instances.has(element)) {
        UsEppDiscount.instances.get(element).setFixed(activeFlag);
      }
    });
  };

  UsEppDiscount.instances = new WeakMap();

  $q.ready(init);

  window.sg.components.usEppDiscount = {
    init,
    reInit,
    closeLayer,
    setFixed,
  };
})();

(() => {
	if($(".pd03-product-finder").length < 1){
		  return;
	} else {
	}
	const $q = window.sg.common.$q;
	const KEYCODE = window.sg.common.constants.KEY_CODE;

	Granite.I18n.setLocale($('#language').val());
	const BREAKPOINTS = window.sg.common.constants.BREAKPOINTS;
	const utils = window.sg.common.utils;
	const pd03ProductFinder = window.sg.components.pd03ProductFinder;

	// (nv-g-gnb.html)
	const addToCartPostYn = $("#addToCartPostYn").val() ? $("#addToCartPostYn").val() : "N";

	// PageModel 변수 ( body.html )
	const siteCode = $('#siteCode').val();
	const storeDomain = $('#storeDomain').val();
	const searchDomain = $('#searchDomain').val();
	const scene7domain = $('#scene7domain').val();
	const reviewUseYN = $('#reviewUseYN').val();
	const reevooUseYN = $('#reevooUseYN').val();
	const apiStageInfo = $('#apiStageInfo').val();
	const serverType = $('#serverType').val();
	const storeWebDomain = $("#storeWebDomain").val();
	
	// PF PageModel 변수 ( footer-include.html )
	const shopIntegrationFlag = $('#pfShopIntegrationFlag').val();
	const defaultFilter = $('#pfDefaultParameter').val();
	const categoryTypeCode= $('#pfCategoryTypeCode').val();
	const categoryGroupCode= $('#pfCategoryGroupCode').val();
	let cartUrl = $("#pfCartUrl").val();

	const GROUPCODE_VD = "04000000";
	const GROUPCODE_HA = "08000000";
	const GROUPCODE_IM = "01000000";

	const TYPECODE_HA_WAD = "08010000"; // HA > Washers and Dryers
	const TYPECODE_HA_VAC = "08070000"; // HA > vacuum cleaners
	const TYPECODE_HA_CA = "08080000"; // HA > Cooking Appliance

	if(siteCode == "levant"){
		cartUrl = cartUrl.replace("/levant/","/jo/");
	} else if(siteCode == "levant_ar"){
		cartUrl = cartUrl.replace("/levant_ar/","/jo_ar/");
	}

	const priceDisplayYn = $("#pfPriceDisplayYn").val();
	const pfPriceCurrency = $("#pfPriceCurrency").val();

	const emiUrl = $("#pfEmiUrl").val();
	const financingUrl = $("#pfFinancingUrl").val();
	const pdurlAnchorCheckYn = $("#pfPdurlAnchorCheckYn").val();
	const hybrisApiJson = $("#pfHybrisApiJson").val(); 		//hybris api 호출 시 json 으로 호출하는 국가 ( N : jsonp )

	const isEditMode = $('#pfEditMode').val();

	const pageTrack = $("#pfPageTrack").val();
	const wtbTaggingAttr =
		' an-tr="pd03_product finder:where to buy compare-'+pageTrack+'-text-link" an-ca="buy cta" an-ac="where to buy" an-la="pf product card:where to buy"';
	const compareCTATaggingAttr =
		' an-tr="pd03_product finder:where to buy compare-'+pageTrack+'-text-compare" an-ca="content click" an-ac="feature" an-la="pf product card:compare"';
	const addToCartTaggingAttr =
		' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-cart page" an-ca="ecommerce" an-ac="addToCart" an-la="pf product card:add to cart"';
	const buyNowToCartTaggingAttr =
		' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-button cart page" an-ca="ecommerce" an-ac="addToCart" an-la="pf product card:buy now"';
	const buyNowtoLinkTaggingAttr =
		' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-button" an-ca="buy cta" an-ac="buy now" an-la="pf product card:buy now"';
	const preOrderToCartTaggingAttr =
		' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-button cart page" an-ca="ecommerce" an-ac="addToCart" an-la="pf product card:pre order"';
	const preOrderToLinkTaggingAttr =
		' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-button" an-ca="buy cta" an-ac="pre-order" an-la="pf product card:pre order"';
	const bespokeCtaTaggingAttr =
		' an-tr="pd03_product finder:bespoke cta-'+pageTrack+'-cta-button" an-ca="content click" an-ac="feature" an-la="pf product card:customize yours"';

	const isGPv2 = (shopIntegrationFlag === 'GPv2')?true:false;
	const isHybrisIntg = (shopIntegrationFlag === 'Hybris-intg')?true:false;		//old-hybris
	const isNonShop = fnIsNull(shopIntegrationFlag)?true:false;
	const isNewHybris = (shopIntegrationFlag === 'Hybris-new')?true:false;			//new-hybris
	const isOldHybris = (shopIntegrationFlag === 'Hybris')?true:false;				//old-hybris

	const pfImagePresetDesktop = "?$160_160_PNG$";
	const pfImagePresetMobile = "?$320_320_PNG$";
	const pfImagePresetDesktopForUS = "?$212_N_PNG$"
	const pfImagePresetMobileForUS = "?$484_N_PNG$"
	const pfImageLazyloadPreset = "LazyLoad_Home";
	const pfKeyImagePreset = "?$24_24_PNG$";

	const pfImagePresetDesktopQuickView = "?$592_472_PNG$";
	const pfImagePresetMobileQuickView = "?$624_512_PNG$";

	// lowestWasPrice 없을 시 strikethrough 제거
	const LOWEST_WAS_PRICE_STRIKETHROUGH_SITE_CODE = ["pl", "gr", "si", "fi", "it", "se", "no", "dk", "fr"]; // lowestWasPrice strikethrough siteCode 
	const isStrikethroughRmSite = $.inArray(siteCode, LOWEST_WAS_PRICE_STRIKETHROUGH_SITE_CODE) >= 0 ? true : false;
	
	// local benefit icon
	const localBenefitIcons = {
		"cart": "#cart-regular",
		"shipping": "#shipping-regular",
		"shipping_help": "#shipping-help-regular",
		"order_tracking": "#order-tracking-regular",
		"shipping_free": "#shipping-free-regular",
		"in_stock": "#in-stock-regular",
		"cancel_order": "#cancel-order-regular",
		"return_order": "#return-order-regular",
		"find_order": "#find-order-regular",
		"finance": "#finance-regular",
		"barcode": "#barcode-regular",
		"qr_code": "#qr-code-regular",
		"coupon": "#coupon-regular",
		"event": "#event-regular",
		"bundle": "#bundle-regular",
		"gift": "#gift-regular",
		"payment": "#payment-regular",
		"deal": "#shopping-deal-regular",
		"exclusive_color": "#exclusive-color",
		"store": "#store-regular",
		"repair_support": "#repair-support-regular",
		"warranty": "#warranty-regular",
		"smart_care": "#smart-care-regular",
		"trade_in": "#trade-in-regular",
		"upgrade": "#upgrade-regular",
		"emotion_worst": "#service-emoticon-worst",
		"emotion_sorry": "#emoticon-sorry-regular",
		"early_upgrade_program": "#early-upgrade-program",
		"galaxy_free_trial_program": "#galaxy-free-trial-program",
		"cracked_screen_trade_in": "#cracked-screen-trade-in",
		"support_labtop": "#support-laptop",
		"support_laptop": "#support-laptop",
		"pick_up_from_store" : "#pick-up-from-store"
	}

	// Deep Copy
	const Copy = (function() {
		function deepCopy(item) {
			if(typeof item === 'undefined') {
				return item;
			}
			if(item === null) {
				return item;
			}
			if(typeof item !== 'object') {
				return item;
			}
			if(item.constructor.name === 'Object') {
				return deepCopyObject(item);
			}
			if(item instanceof Array) {
				return deepCopyArray(item);
			}
			if(item instanceof Map) {
				return deepCopyMap(item);
			}
			if(item instanceof Set) {
				return deepCopySet(item);
			}
			if(item instanceof Date) {
				return deepCopyDate(item);
			}
			if(item instanceof RegExp) {
				return deepCopyRegExp(item);
			}
			return item;
		}

		function deepCopyObject(obj) {
			const newObj = {};
			for(const key of Object.keys(obj)) {
				newObj[key] = deepCopy(obj[key]);
			}
			return newObj;
		}

		function deepCopyArray(arr) {
			const newObj = [];
			for(const item of arr) {
				newObj.push(deepCopy(item));
			}
			return newObj;
		}

		function deepCopyMap(map) {
			const newObj = new Map();
			for(const key of map.keys()) {
				newObj.set(key, deepCopy(map.get(key)));
			}
			return newObj;
		}

		function deepCopySet(set) {
			const newObj = new Set();
			for(const item of set) {
				newObj.add(deepCopy(item));
			}
			return newObj;
		}

		function deepCopyDate(date) {
			const newObj = new Date(date.getTime());
			return newObj;
		}

		function deepCopyRegExp(regExp) {
			const source = regExp.source;
			const flags = regExp.flags;
			const newObj = new RegExp(source, flags);
			return newObj;
		}

		return {
			deepCopy: deepCopy,
		};
	})();

	let currentElem = null;

	var isButtonShow = true;

	let defaultFilterObjList = [];
	let defaultFilterCodeList = []; // defaultParameter가 search api 에 parameter로 전달 시 사용되는 code 로 변환된 데이터  ( 첫 로딩 시 셋팅된다 )
	let isDefaultFilter = false;
	let pfCompareCategorySubTypeCode = "";

	// 필터용 map
	let noDispFilterAry=[];

	//[EPP] epp 관련 변수
	const isEppSite = checkEppSite();
	if(isEppSite && window.sg.epp == null){
		window.sg.epp={};
		window.sg.epp.common ={};
	}
	const eppCompanyCode = isEppSite ? window.sg.epp.common.companyCode : "";
	const apiSiteInfo = isEppSite ? "epp/v2" : "b2c";
	const pfType = isEppSite ? $("#pfType").val() : "";
	const offerId = isEppSite ? $("#pfOfferId").val() : "";
	const eppIsRefurbish = pfType =="R" ? true : false;
	const eppIsFlash = pfType == "F" ? true : false;

	if(siteCode=="in" && isEppSite){
		// epp in 사이트 cart url 적용
		cartUrl = storeWebDomain + "/in/web/store/"+eppCompanyCode+"/cart/";
	}

	// api 관련 변수
	let pfSearchApiUrl = searchDomain+'/'+apiStageInfo+'/b2c/product/finder/global';   		// PF Searchapi url
	if( isGPv2 ){
		pfSearchApiUrl = searchDomain+'/'+apiStageInfo+'/b2c/product/finder/gpv2';
	} else if ( isHybrisIntg ){
		pfSearchApiUrl = searchDomain+'/'+apiStageInfo+'/b2c/product/finder/hybris';
	} else if ( isNewHybris ){					//new-hybris
		pfSearchApiUrl = searchDomain+'/'+apiStageInfo+'/b2c/product/finder/newhybris';
	}

	let pfSearchApiParam= 																		// PF Searchapi Param
	{
		"type":categoryTypeCode,
		"siteCode":siteCode,
		"start":1,
		"num":12,
		"sort":"newest",
		"onlyFilterInfoYN":"Y",
		"keySummaryYN":"N"
	};

	let dotcom_multistore = $.cookies.get("estoreSitecode") ? $.cookies.get("estoreSitecode").toString() : '';

	let shopSiteCd = '';
	if(siteCode === "ae" || siteCode==="ae_ar"){
		//NOTICE : dotcomMultistore 값이 존재 하는 경우 ae, ae_ar, kw, kw_ar, om, om_ar, bh, bh_ar 인 경우만 세팅
		if(dotcom_multistore === "ae" || dotcom_multistore === "ae_ar" || dotcom_multistore === "kw" || dotcom_multistore === "kw_ar" || dotcom_multistore === "om" || dotcom_multistore === "om_ar" || dotcom_multistore === "bh" || dotcom_multistore === "bh_ar"
		|| dotcom_multistore === "qa" || dotcom_multistore === "qa_ar"
		) {
			shopSiteCd = isNotNull(dotcom_multistore) ? dotcom_multistore : siteCode;
		}else{
			shopSiteCd = siteCode;
		}
	} else if(siteCode === "levant"){
		shopSiteCd = "jo";
	} else if(siteCode === "levant_ar"){
		shopSiteCd = "jo_ar";
	} else if(siteCode === "n_africa"){
		shopSiteCd = "ma";
	}

	if(siteCode == "ae"){
		cartUrl = cartUrl.replace("/ae/","/"+shopSiteCd+"/");
	} else if(siteCode == "ae_ar"){
		cartUrl = cartUrl.replace("/ae_ar/","/"+shopSiteCd+"/");
	}

	if(isNotNull(shopSiteCd)){
		pfSearchApiParam['shopSiteCode'] = shopSiteCd;
	}

	let loadPageCount = 1;

	//제품 전체 데이터
	let productListData = [];
	let productListIndex = 0;
	let fullNavJsonData = null;

	//loading bar
	let $LoaderEl = $('.pd03-product-finder__progress-line-filled');
	let $loaderContainer = $('.pd03-product-finder__progress');

	let $pfComponent = $(".js-pfv2-finder");
	let $filtersCTAWrap = $(".pd03-product-finder__filters-bar-filters"); //Total Count, View Result, Reset Filter CTA 포함
	let $filterListWrap = $(".js-pfv2-filter_list-wrap"); // Filter 리스트 영역

	let $totalCount = $filtersCTAWrap.find(".js-pfv2-result-total-count");
	let $resetFilterBtn = $filtersCTAWrap.find('a.js-pfv2-reset-filters-cta');
	let $mobileViewResultBtn = $('.js-pfv2-view-results-cta');
	let $mobileViewResultCount = $mobileViewResultBtn.find('.js-pfv2-view-results-count');
	let $mobileResetBtn = $('.js-pfv2-mobile-reset-cta');

	let $sortByWrap = $('.js-pfv2-sortby-wrap');
	let $sortBySelect = $sortByWrap.find('select');
	let $sortByOption = $sortByWrap.find('option');

	let $viewMoreArea = $('.js-pfv2-cta-area');
	let $viewMoreBtn = $('.js-pfv2-view-more-cta');

	let $hashtagChip = $('.js-pfv2-hashtag-item').find('button');
	let hashChipSelectClass = "chip__action--light-selected";
	let hashChipDisabledClass = "chip__action--light-disabled";

	let $productCardListWrap = $('.js-pfv2-content-wrap');

	let $compareBarCont = $('.pd03-product-finder__compare-bar');
	let $compareItemDelete = $compareBarCont.find('.pd03-product-finder__compare-bar-item-close');
	let $compareCta = $compareBarCont.find('.js-pfv2-open-compare-layer');
	let $compareClearCta = $compareBarCont.find('.js-pfv2-compare-clear-cta');

	let productCardType = $productCardListWrap.data("product-cardtype");
	let isDefaultCardType = productCardType==="default"?true:false;
	let isOptionalCardType = productCardType==="optional"?true:false;

	let gbm = $productCardListWrap.data("gbm");
	let useMobileTwoCard = $productCardListWrap.data("mobile-two-card");
	if(isDefaultCardType && useMobileTwoCard){
		useMobileTwoCard = true;
	}

	let shopPromoOnlyFl = $productCardListWrap.data("shop-promo-only");

	let ctaDisabledClass = "cta--disabled";

	// calculator popup 영역
	let $emiPopupEl = $('.eip-popup');

	let useFilter = false;
	if($pfComponent.data("usefilter")){
		useFilter = true;
	}
	let useFilterType = false;
	if($pfComponent.data("usefiltertype")){
		useFilterType = true;
	}
	let useCompareButton = false;
	if($pfComponent.data("usecomparebutton")){
		useCompareButton = true;
	}
	let desktopCardLayout = $pfComponent.data("desktopcardlayout");
	if(typeof desktopCardLayout === 'undefined' || desktopCardLayout === null || desktopCardLayout === "") {
		desktopCardLayout = "vertical";
	}

	var useHighlightCard = false;
	var highlightBarText = "";
	if($pfComponent.data("usehighlightcard")){
		useHighlightCard = true;
		highlightBarText = $pfComponent.data("highlightbar");
	}
	var productgroupcode = $pfComponent.data("productgroupcode");

	// [US-Zipcode] 관련 데이터
	var useZipCode = false;
	var zipCodeText = $.cookies.get("HA-Deeplink-Zipcode") ? $.cookies.get("HA-Deeplink-Zipcode").toString() : '';
	var $zipCodeInput;
	var $zipCodePlaceHolder;

	//## PFV2 : 운영시 조건절 수정할것
	//if((siteCode === "us" || siteCode === "test") && categoryGroupCode===GROUPCODE_HA){
	if((siteCode === "us" || siteCode === "test")) { // && categoryGroupCode===GROUPCODE_HA){
		useZipCode = true;
		$zipCodeInput = $('.js-pfv2-zipcode-input');
		$zipCodePlaceHolder = $('.js-pfv2-zipcode-placeholder');
	}
	//Eligible for 3-Day Delivery 설정
	var isThreeDayEligibility = false;
	var $threeDayEligibilitySection = $('.pd03-product-finder__zipcode-delivery');
	var $threeDayEligibilityInput;

	// [US-EppDiscount] 관련 데이터
	var useUSEppDiscount = false; // us epp discount price 사용 여부
	var useUSEppDiscountSelect = false; // us epp discount select 사용 여부
	var usEppApiDomain = "";
	var tmktid;
	var tsgmt; // Ex) First Responder
	var epp_verified;
	if(siteCode === "us"){
		tmktid = $.cookies.get("tmktid");
		var epp_verified = $.cookies.get("epp_verified");
		tsgmt = isNotNull($.cookies.get("tsgmt")) ? $.cookies.get("tsgmt").toString() : '';
		if(isNotNull(tmktid) && isNotNull(epp_verified) && epp_verified.toString()=='true'){
			tmktid = tmktid.toString();
			useUSEppDiscount = true;
			// guest user 가 아닌 경우
		}
		// us EppDiscount 테블릿(01020000) 제외
		if(categoryGroupCode===GROUPCODE_IM && categoryTypeCode !== '01020000'){
			if (window.AEMapp.eppStore.isRealEppUser()) {
				tmktid = tmktid.toString();
				useUSEppDiscount = true;
			} else if (window.AEMapp.eppStore.isUnverifiedEppUser()) {
				tmktid = tmktid.toString();
				useUSEppDiscount = true;
				useUSEppDiscountSelect = true;
			} else {
				useUSEppDiscountSelect = true;
			}
			// if(isNotNull(tmktid)){
			// 	tmktid = tmktid.toString();
			// 	useUSEppDiscount = true;
			// }
			// useUSEppDiscountSelect = true;
			// epp guest user 인 경우 select 표시
		}
		if(serverType==="stg"){
			usEppApiDomain = "https://hshopfront.samsung.com";
		}
	}
	var searchApiTotalRecord;
	var $gnb = $('.epp-bar-wrap');

	// Dialog 에서 authoring 한 Promotion Card 1, 2
	var $firstPromotionCard = $("#pf-promotion_card_1");
	var firstPromotionCardIdx = 5;
	var $secondPromotionCard = $("#pf-promotion_card_2");
	var secondPromotionCardIdx = 10;

	var useLargePromotionCard = false;
	var usePromotionCard = false;
	var useSecondPromotionCard = false;
	var usePromotionPosition = false;

	if(isNotNull($firstPromotionCard) && $firstPromotionCard.length > 0){
		usePromotionCard = true;
		pfSearchApiParam.num = 11;

		if(isNotNull($secondPromotionCard) && $secondPromotionCard.length > 0){
			useSecondPromotionCard = true;

			pfSearchApiParam.num = 10;
		}

		/*
		Promotion Card_Placement Rules 적용
		*/
		if(desktopCardLayout == "vertical"){
			if($firstPromotionCard.parent().data("cardwidth")==="Large"){
				useLargePromotionCard = true;
				firstPromotionCardIdx = 4;
				secondPromotionCardIdx = 8;

				pfSearchApiParam.num = 10;
				if(useSecondPromotionCard){
					pfSearchApiParam.num = 8;
				}
			}
			// Dialog 에서 authoring 한 position
			if($firstPromotionCard.parent().data("cardwidth") === "Small"){
				if($firstPromotionCard.find('#position').val() != ""){
					firstPromotionCardIdx = parseInt($firstPromotionCard.find('#position').val());
					if(useSecondPromotionCard){
						secondPromotionCardIdx = firstPromotionCardIdx + 6;
					}
					usePromotionPosition = true;
				}else if(useSecondPromotionCard && $secondPromotionCard.find('#position').val() != ""){
					secondPromotionCardIdx = parseInt($secondPromotionCard.find('#position').val());
					firstPromotionCardIdx = secondPromotionCardIdx + 6;
					usePromotionPosition = true;
				}
			}
		}else{
			firstPromotionCardIdx = 2;
			secondPromotionCardIdx = 5;
		}
	}

	// PageModel 변수 ( body.html )


	// ###### Quickview 전용

	// let qvProduct = {};

	function isNotNull(_str){
		return !fnIsNull(_str) && _str !== "null";
	};

	function _trimToNull(str) {
		let s = $.trim(str);
		return s.length > 0 ? s : null;
	}

	function arrayContains(array, element) {
		for (let i = 0; i < array.length; i++) {
			if (array[i] === element) {
				return true;
			}
		}
		return false;
	};

	function escapeHtml(text) {
		let newText = text;
		if(isNotNull(newText)){
			newText = newText
				.replace(/&/g, "&amp;")
				.replace(/</g, "&lt;")
				.replace(/>/g, "&gt;")
				.replace(/"/g, "&quot;")
				.replace(/'/g, "&#039;");
		}
		return newText;
	};

	function unescapeHtml(text){
		var newText = text;
		if(isNotNull(newText)){
			newText = newText
				.replace(/&amp;/g, "&")
				.replace(/&lt;/g, "<")
				.replace(/&gt;/g, ">")
				.replace(/&quot;/g, "\"")
				.replace(/&#039;/g, "\'");
		}
		return newText;
	};

	function clPrdPreset(presetStr) {
		let preset = "?$" + presetStr;
		preset += "_PNG$";

		return preset;
	};

	/**
	 * Ru 국가 count 별 단위문구 타입지정
	 *
	 * TypeA : 1,21,31,...
	 * TypeB : 2~4, 22~24, 32~34,...
	 * TypeC : 5~10, 25~30, 35~40,...
	 * TypeD : 11~20, 111~120, 211~220,...
	 *
	 * @param count
	 * @return wordType
	 */
	var getSiteRuCountWordType = function(count){
		var wordType = '';

		if( count%100 >= 11 && count%100 <= 20 ){
			wordType = 'TypeD';
		} else if( count%10 === 1 ){
			wordType = 'TypeA';
		} else if( count%10 >= 2 && count%10 <= 4 ){
			wordType = 'TypeB';
		} else {
			wordType = 'TypeC';
		}
		return wordType;
	};

	var pfPrdPreset = function(presetStr, imgUrl){
		var preset = "?$"+presetStr;
		var tempImgUrl = imgUrl.toLowerCase();

		if (tempImgUrl.indexOf(".jpg") > -1) {
			preset += "_JPG$";
		} else if (tempImgUrl.indexOf(".jpeg") > -1) {
			preset += "_JPG$";
		} else if (tempImgUrl.indexOf(".png") > -1) {
			preset += "_PNG$";
		} else if (tempImgUrl.indexOf(".gif") > -1) {
			preset += "_GIF$";
		} else {
			preset += "_PNG$";
		}

		return preset;

	};

	/**
	 * imageUrl 앞에 scene7domain을 붙여준다
	 *
	 * @param imgUrl 이미지 url
	 * @param presetType : lazy, prd_desktop, prd_mobile, none
	 * @param iconFl icon 여부
	 * @return newUrl scene7domain 을 붙인 imgUrl
	 */
	var pfImgDomain = function(imgUrl, presetType, iconFl) {
		var newUrl = "";
		var useScene7domain = scene7domain;
		if(fnIsNull(imgUrl) || imgUrl.indexOf("http:") > -1 || imgUrl === "" || imgUrl.indexOf("//image-us.samsung.com/") > -1 ||
				imgUrl.indexOf("//stg-images.samsung.com/") > -1 || imgUrl.indexOf("//images.samsung.com/") > -1 || imgUrl.indexOf("image.samsung.com/") > -1 ||
				imgUrl.indexOf("//stg-images.samsung.com.cn/") > -1 || imgUrl.indexOf("//images.samsung.com.cn/") > -1 || imgUrl.indexOf("image.samsung.com.cn/") > -1 ||
				imgUrl.indexOf("www.samsung.com/") > -1){
			newUrl = imgUrl;
		}else{
			if(iconFl){
				useScene7domain = useScene7domain.replace("/image/","/content/");
			}
			newUrl = useScene7domain + imgUrl;
		}

		if(isNotNull(newUrl) && newUrl.indexOf("?$") < 0 && isNotNull(imgUrl)){
			if(presetType === "lazy"){
				newUrl += pfPrdPreset(pfImageLazyloadPreset, newUrl);
			} else if( presetType === "product-desktop"){
				// if(siteCode==="us"){
				// 	newUrl += pfImagePresetDesktopForUS;
				// } else {
				// 	newUrl += pfImagePresetDesktop;
				// }
				newUrl += pfImagePresetDesktopQuickView;
			} else if( presetType === "product-mobile"){
				// if(siteCode === "us"){
				// 	newUrl += pfImagePresetMobileForUS;
				// } else {
				// 	newUrl += pfImagePresetMobile;
				// }
				newUrl += pfImagePresetMobileQuickView;
			} else if( presetType === "key-feature"){
				newUrl += pfKeyImagePreset;
			}
		}
		return newUrl;
	};

	var getPdpUrlParamText = function(pdpUrl, filterParamText){
		var result = pdpUrl;
		if(isNotNull(filterParamText)){
			if(pdpUrl.indexOf("?") > -1){
				result = pdpUrl + "&" + filterParamText;
			}else{
				result = pdpUrl + "?" + filterParamText;
			}
		}
		return result;
	}


	/**
	 * viewOptionObj : 현재 그리고 있는 Product 의 전체 옵션정보
	 * optionChip 선택 시 화면에 표시해 줄 sku의 index 를 반환함
	 * selectOptionMoIdx : 현재 선택한 옵션의 moidx 값
	 * otherSelectedOptionMoIdxList : 현재 선택한 타입을 제외한 타입중 선택된 나머지 옵션 리스트
	 * isColorType : 현재 타입이 color 인지에 대한 여부
	 * optionTypeList : 현재 그리고있는 Product 의  optionTypeList
	 */
	var getSelectedModelIdx = function(viewOptionObj, selectOptionMoIdx, otherSelectedOptionMoIdxList, isColorType, optionTypeList){
		var modelIdx = 0;

		var modelIdxList = selectOptionMoIdx.split(',');
		var firstIdx = modelIdxList[0];

		var memoryIdx = optionTypeList.indexOf("MEMORY");

		if(!isGPv2 && !isNewHybris && isColorType && memoryIdx > 0){
			// [global, hybrisIntg] 상위 옵션이 color 이고, 하위에 같이 바뀌는 옵션이 memory 일 때 가장 큰값으로 선택처리

			var memoryOptionList = viewOptionObj["MEMORY"].optionList;
			var selectedModelIdx = 0;
			var highestOption = 0;
			for(var moi in memoryOptionList){
				var temp_mi = memoryOptionList[moi].modelIdx.split(',');
				for(var tmi in temp_mi){
					// 선택한 옵션칩의 modelIdx 리스트에 해당하는 model idx 가 있으면  비교
					if(arrayContains(modelIdxList, temp_mi[tmi])){
						var this_memory_num = memoryOptionList[moi].optionCode.replace("TB","000").replace(/[^0-9]/g,"");
						if(highestOption < this_memory_num){
							highestOption = this_memory_num;
							selectedModelIdx = temp_mi[tmi];
						}
						break;
					}
				}
			}
			modelIdx = selectedModelIdx;

		} else {
			var selectModelIdxList = [];
			var tempMappingModelIdx = [];

			for(var omi in otherSelectedOptionMoIdxList){
				var otherMoIdx = otherSelectedOptionMoIdxList[omi];
				if(isNotNull(otherMoIdx)){
					var otherMoIdxArr = otherMoIdx.split(',');

					tempMappingModelIdx = [];
					for(var mli in modelIdxList){
						if(otherMoIdxArr.indexOf(String(modelIdxList[mli]))>-1) {
							tempMappingModelIdx.push(modelIdxList[mli]);
						}
					}
					if(tempMappingModelIdx.length > 0){
						modelIdxList = tempMappingModelIdx;
					}
				}

			}
			if(modelIdxList.length > 0){
				modelIdx = modelIdxList[0];
			} else {
				modelIdx = firstIdx;
			}
		}

		return modelIdx;
	};

	// saveText -> KUNA & EURO 변환
	/*
	var euroToKunaPrice = function(saveText){
		let tempDecimalPoint = Math.pow(10, 2);
		let euroPriceTemp = Number(saveText)*7.53450;
		euroPriceTemp = Math.round(euroPriceTemp * tempDecimalPoint) / tempDecimalPoint;
		return currencyComma(euroPriceTemp, "HRK");
	}
	*/
	// 할인율
	var getDiscountRate = function(savePrice, originPrice){
		let tempDecimalPoint = Math.pow(10, 2);
		let discountRateTemp = Number(savePrice) / Number(originPrice) * tempDecimalPoint;
		discountRateTemp = Number(discountRateTemp).toFixed(2);
		return discountRateTemp.replace('.', ',');
	}
	var buildProductImageArea = function(product){

		var buildLocalBenefitArea = function(product){
			var frontModel = product.modelList[product.frontModelIdx];
			var featureItems = [];
			const localBenefitList = product.localBenefitList ?? [];

			var buildLocalBenefitItem = function(featureTxt, featureIconHtml) {
				if(typeof featureIconHtml === 'undefined' || featureIconHtml === null) {
					featureIconHtml = "";
				}
				var featureItem = `
				<div class="quick-view__benefit-item">
					<div class="quick-view__benefit-icon">
					${featureIconHtml}
					</div>
					<p class="quick-view__benefit-text">${featureTxt}</p>
				</div>
				`;
				return featureItem;
			}


			if(!isNonShop && frontModel.ctaTypeUpperCase === "LEARNMORE"){
				const featureHtml = `
				<div class="quick-view__benefit for-desktop no-data"></div>
				`;
				
				return featureHtml;
			}else{
				for(const localBenefitItem of localBenefitList) {
					const localBenefitText = localBenefitItem.localBenefitText;
					const localBenefitIconType = localBenefitItem.localBenefitIconType;
					const iconId = localBenefitIcons[localBenefitIconType] ?? "";
					const localBenefitImgAltText = localBenefitItem.localBenefitImgAltText;
					const localBenefitImgUrl = pfImgDomain(localBenefitItem.localBenefitImgUrl ?? "", "key-feature");
					// const iconHtml = `<img class="image__main lazy-load responsive-img" data-desktop-src="${localBenefitImgUrl}" data-mobile-src="${localBenefitImgUrl}" alt="${localBenefitImgAltText}">`;
					const iconHtml = iconId !== ""?
							`<svg class="icon" focusable="false"><use xlink:href="${iconId}" href="${iconId}"></use></svg>` :
							`<img class="image__main lazy-load responsive-img" data-desktop-src="${localBenefitImgUrl}" data-mobile-src="${localBenefitImgUrl}" alt="${localBenefitImgAltText}">`;
	
					// totalFeatureCnt++;
					// totalFeatureArr.push(localBenefitText);
					// if(itemCnt < 4) {
					// 	itemCnt++;
					// 	featureItems.push(buildLocalBenefitItem(localBenefitText, iconHtml));
					// }
					featureItems.push(buildLocalBenefitItem(localBenefitText, iconHtml));
				}
	
				// var featureHtml = "";
				// if(featureItems.length > 0)
				const featureHtml = featureItems.length > 0? `
				<div class="quick-view__benefit for-desktop">
					${featureItems.join("")}
				</div>
				` : `
				<div class="quick-view__benefit for-desktop no-data"></div>
				`;
				// if(!shopPromoOnlyFl) {
				// 	var benefitWrap = "";
				// 	if(featureItems.length > 0) {
				// 		benefitWrap = `
				// 		<div class="quick-view__offers">
				// 		<p class="quick-view__offers-title">Offer</p>
				// 			${featureItems.join("")}
				// 		</div>
				// 		`;
				// 	}
				// 	featureHtml = benefitWrap;
				// }
	
				return featureHtml;
			}


		};


		var productImageArea = "";

		var galleryImage = product.modelList[product.frontModelIdx].galleryList;
		var galleryItem = "";
		for (var i=0; i<galleryImage.length ; i++) {
			var galItem = galleryImage[i];
			var galleryAlt = (galItem.imageAlt ? galItem.imageAlt : "");
			if(typeof galItem.imageUrlQuickViewDesktop === 'undefined' || galItem.imageUrlQuickViewDesktop === null || galItem.imageUrlQuickViewDesktop === "") {
				continue;
			}
			galleryItem += `
			<div class="swiper-slide" role="listitem" data-tagging='{
				"an-tr":"ftd16_interactive multi feature-product detail-indicator",
				"an-ca":"indication",
				"an-ac":"carousel",
				"an-la":"carousel:index:${(i+1)}"
			}'>
				<div class="quick-view__swiper-inner">
					<!--/* Preset desktop: 592_472, mobile: 624_512 */-->
					<div class="image">
						<img class="image__preview lazy-load responsive-img"
							data-desktop-src="${galItem.imageUrlQuickViewDesktop}"
							data-mobile-src="${galItem.imageUrlQuickViewMobile}"
							alt="${galleryAlt}" role="img" data-comp-name="image">
						<img class="image__main lazy-load responsive-img"
						data-desktop-src="${galItem.imageUrlQuickViewDesktop}"
						data-mobile-src="${galItem.imageUrlQuickViewMobile}"
						alt="${galleryAlt}" role="img" data-comp-name="image">
					</div>

				</div>
			</div>
			`;
		}


		// productImage += '<div style="float:left;width:450px;">';
		// productImage += buildImageArea(product);
		// productImage += buildLocalBenefitArea(product);
		// productImage += '</div>';
		productImageArea = `
		<div class="quick-view__product-image">
			<div class="quick-view__product-image-wrap scrollbar inner-scroll">
				<div class="scrollbar__contents">
					<div class="quick-view__swiper">
						<div class="swiper-container basic-swiper" data-swiper-option='{
							"slidesPerView":"1",
							"keepWrapper":true,
							"loop":false,
							"pagination": true,
							"componentEl":".quick-view__swiper",
							"offTxtAccesibility":"true",
							"noSwiping": true,
							"noSwipingClass": "button-controller--scroll",
							"watchOverflow":"true"
							}'>
	
							<button type="button" class="swiper-button-prev"
							an-tr="pd03_product finder-product finder-arrow-indication" an-ca="indication" an-ac="carousel" an-la="carousel:arrow:left">
								<span class="hidden">Previous</span>
								<svg class="icon" focusable="false" aria-hidden="true">
									<use xlink:href="#previous-regular" href="#previous-regular"></use>
								</svg>
							</button>
	
							<div class="swiper-wrapper" role="list">
								<!-- [D] an-* 아래의 값 사용
								an-tr: 'an-tr 내용'
								an-ca: 'indication'
								an-ac: 'carousel'
								an-la: 'carousel:index:<no>' *<no> : 해당 인덱스 번호 -->
								${galleryItem}
							</div>
	
							<button type="button" class="swiper-button-next"
							an-tr="pd03_product finder-product finder-arrow-indication" an-ca="indication" an-ac="carousel" an-la="carousel:arrow:right">
								<span class="hidden">Next</span>
								<svg class="icon" focusable="false" aria-hidden="true">
									<use xlink:href="#next-regular" href="#next-regular"></use>
								</svg>
							</button>
						</div>
	
						<div class="indicator dot-indicator" data-comp-name="indicator" data-indicator-data='{
							"type": "dot-indicator",
							"play": true,
							"autoRolling": true,
							"infiniteRolling": false
							}'>
							<div class="indicator-wrap">
								<!--/* data-indicator-data.autoRolling 이 true 일 때만 아래 button 마크업 적용 */-->
								<button class="indicator__controls indicator__controls--play" an-tr="hd01_home kv carousel-homeimage-action" an-ca="indication" an-ac="carousel" an-la="carousel:index:kvplay">
									<svg class="play" focusable="false">
										<use xlink:href="#play-bold" href="#play-bold"></use>
									</svg>
									<svg class="pause" focusable="false">
										<use xlink:href="#pause-bold" href="#pause-bold"></use>
									</svg>
									<span class="hidden">play</span>
								</button>
								<div class="indicator__list-wrap">
									<div class="indicator__list" role="tablist">
										<!--/* 웹 접근성을 위해 필요 시 carousel 과 연결할 id 추가 */-->
										<button class="indicator__item" role="tab" data-indicator-delay="5000">
											<span class="indicator__dot-wrap">
												<span class="indicator__dot">
													<span class="indicator__dot-inner"></span>
												</span>
												<!--/* (21/05/06 접근성) dialog 에서 indicator text 를 넣어야 하는 경우 아래 element 에 text 넣음 */-->
												<span class="hidden">Indicator 1</span>
											</span>
										</button>
	
										<button class="indicator__item" role="tab" data-indicator-delay="5000">
											<span class="indicator__dot-wrap">
												<span class="indicator__dot">
													<span class="indicator__dot-inner"></span>
												</span>
	
												<span class="hidden">Indicator 2</span>
											</span>
										</button>
	
										<button class="indicator__item" role="tab" data-indicator-delay="5000">
											<span class="indicator__dot-wrap">
												<span class="indicator__dot">
												<span class="indicator__dot-inner"></span>
												</span>
	
												<span class="hidden">Indicator 3</span>
											</span>
										</button>
	
										<button class="indicator__item" role="tab" data-indicator-delay="5000">
											<span class="indicator__dot-wrap">
												<span class="indicator__dot">
												<span class="indicator__dot-inner"></span>
												</span>
	
												<span class="hidden"></span>
											</span>
										</button>
	
										<button class="indicator__item" role="tab" data-indicator-delay="5000">
											<span class="indicator__dot-wrap">
												<span class="indicator__dot">
												<span class="indicator__dot-inner"></span>
												</span>
	
												<span class="hidden"></span>
											</span>
										</button>
	
										<button class="indicator__item" role="tab" data-indicator-delay="5000">
											<span class="indicator__dot-wrap">
												<span class="indicator__dot">
												<span class="indicator__dot-inner"></span>
												</span>
	
												<span class="hidden">Indicator 6</span>
											</span>
										</button>
	
										<button class="indicator__item" role="tab" data-indicator-delay="5000">
											<span class="indicator__dot-wrap">
												<span class="indicator__dot">
												<span class="indicator__dot-inner"></span>
												</span>
	
												<span class="hidden">Indicator 7</span>
											</span>
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
					${buildLocalBenefitArea(product)}
				</div>
			</div>
		</div>
		`;
		return productImageArea;
	};

	var buildProductInfoArea = function(product){

		product.siteCode = siteCode;
		var frontModel = product.modelList[product.frontModelIdx];

		if(product.iaCtaDisplay === 'Y'){
			isButtonShow = true;
		} else if (product.iaCtaDisplay === 'N'){
			isButtonShow = false;
		}

		var emiPrice = ""; // finance calculate data
		var originPrice = ""; // 기본 가격 (Tagging Data)
		var discountPrice = ""; // 할인후 가격  (Tagging Data)
		var dataPricetext = ""; // add on 버튼
		var dataMonth = ""; // add on 버튼

		var upperStock = "";
		if(isNotNull(frontModel.ctaType)){
			upperStock = frontModel.ctaType.toUpperCase();
			product.modelList[product.frontModelIdx].ctaTypeUpperCase = upperStock;
		}

		var isHighligtedSKU = product.isRecommended === 'Y'; // 어떻게 처리?
		var quickViewCtaClass = " cta--outlined cta--black";
		if(useHighlightCard && isHighligtedSKU) {
			quickViewCtaClass = " cta--contained cta--white";
		}
		// standard PD 인경우 filterParamText 추가
		var isSTDPD = false;
		if(product.simplePdYN !== "Y" && frontModel.marketingpdpYN === "N"){
			var isSTDPD = true;
		}

		var buildProductNameArea = function(product, isSTDPD){
			var model = product.modelList[product.frontModelIdx];
			// var pdpUrl = frontModel.pdpUrl;
			// if(isSTDPD){
			//     pdpUrl = getPdpUrlParamText(pdpUrl, product.filterParamText);
			// }

			var productNameArea = "";
			productNameArea += `<p class="quick-view__product-name">${model.displayName}</p>`;
			// 	'<div class="product-card-v2__name">';
			// if(isNotNull(frontModel.displayName)){
			// 	ProductNameArea +=
			// 		'<a class="product-card-v2__name-link" aria-label="'+escapeHtml(frontModel.displayName.replace(/<br>/ig," ").replace(/<sup>/ig," "))+'" href="'+pdpUrl+'" data-modelcode="'+frontModel.modelCode+'" data-modelname="'+frontModel.modelName+'"'+
			// 		' an-tr="pd03_product finder:option-'+pageTrack+'-product-link" an-ca="product click" an-ac="pf product card" an-la="display name">'+
			// 			'<p class="product-card-v2__name-text">'+frontModel.displayName+'</p>'+
			// 		'</a>';
			// }
			// ProductNameArea +=''
			// 	'</div>';

			return productNameArea;
		}


		var buildPriceArea = function(product, upperStock, thirdPASeller) {
			if(isNonShop && siteCode !== "tr") {
				return "";
			}

			var frontModel = product.modelList[product.frontModelIdx];
			var priceDisplay = frontModel.priceDisplay;
			if((siteCode==="nl" || siteCode==="be" || siteCode ==="be_fr") && isNotNull(priceDisplay)){
				priceDisplay = deleteCurrency(priceDisplay, pfPriceCurrency);
			}

			var priceTextForCompare = "";

			//Hybris Intg > tradeIn price text 표시
			var tradeInPriceText = "";
			var tradeInClass = "";

			if(isHybrisIntg && isNotNull(frontModel.tradeInPriceText)) {
				tradeInPriceText = frontModel.tradeInPriceText;
				tradeInClass = " use-tradein-price";
			}


			var usePriceArea = false;
			if(priceDisplayYn === "Y" && isNotNull(priceDisplay)){
				usePriceArea = true;
			}

			if (siteCode==="mx" ){
				if( isNotNull(frontModel.priceDisplay)){
					originPrice = deleteCurrencyComma(frontModel.priceDisplay,pfPriceCurrency);
				}
			}

			if (siteCode==="tr" && isNotNull(priceDisplay)){
				usePriceArea = true;
			}

			var priceItem = "";
			let priceMainClass = "quick-view__price-main";
			const priceSecondClass = "quick-view__price-second";
			if(usePriceArea) {
				var promotionDisplay = "";
				var currentDisplay = priceDisplay;
				var currentDisplayForMiniCard = priceDisplay;

				// tagging data - originPrice Set ( data-modelprice )
				if(isNotNull(frontModel.price)){
					originPrice = frontModel.price;
				} else if( isNotNull(frontModel.priceDisplay)){
					originPrice = deleteCurrencyComma(frontModel.priceDisplay,pfPriceCurrency);
				}

				// monthlyPrice data
				var useMonthlyPrice = false;
				var monthlyPrice = "";
				var tenureVal = "";
				var leasingInterest = "";

				// leasingInfo data
				var useLeasingInfo = false;
				var downPaymentFormatted = "";
				var tenureUnit = "";
				var monthlyRate = "";

				// [US-EppDiscount] US Epp Discount Price
				var usEppCurrentPrice = 0; // epp discount 적용된 가격
				var usEppSavePrice = 0;
				var usDefaultCurrentPrice = 0; // epp discount 전 기본 할인가격
				var usCurrentPriceAttr = "";
				var usSuggestPriceAttr = "";
				var usUseTradeInDiscount = false;

				// msrpPrice
				var useMsrpPrice = false;
				// installmentDesc EMI popup
				let financingInstallmentDescText = "";

				if(siteCode==="us"){

					// 기본 가격정보 셋팅 ( exit epp 할 경우 api 호출 없이 가격정보만 변경처리 )
					usDefaultCurrentPrice = frontModel.price;
					var usPromotionPriceForTradeIn = frontModel.listPrice;
					if(isNotNull(frontModel.promotionPrice)){
						usDefaultCurrentPrice = frontModel.promotionPrice;
						usPromotionPriceForTradeIn = frontModel.promotionPrice;
					}

					//[US] tradeInDiscount 가 있는 경우 > listPrice : 원가 , tradeInDiscount : save, 재고없음이 아닌 경우
					if(isNotNull(frontModel.tradeInDiscount) && isNotNull(frontModel.listPrice)
							&& frontModel.tradeInDiscount != 0 && frontModel.listPrice != 0 && Number(frontModel.listPrice) > Number(frontModel.tradeInDiscount)
							&& upperStock !== "OUTOFSTOCK"
							){
						usUseTradeInDiscount = true;

						priceDisplay = currencyComma(frontModel.listPrice, pfPriceCurrency);

						usDefaultCurrentPrice = Number(usPromotionPriceForTradeIn) - Number(frontModel.tradeInDiscount);

						currentDisplay = 'From '+currencyComma(usDefaultCurrentPrice, pfPriceCurrency)+' with trade-in<sup>θ</sup>';

						// tagging data - originPrice Set ( data-modelprice )
						originPrice = frontModel.listPrice;
						// tagging data - discountPrice Set ( data-discountprice )
						discountPrice = usDefaultCurrentPrice;
					}

					usCurrentPriceAttr = ' data-de-currentprice="'+usDefaultCurrentPrice+'"';
					if(usUseTradeInDiscount){
						usCurrentPriceAttr += ' data-de-use-tradein="true"';
					}
					usSuggestPriceAttr = ' data-de-originpricetxt="'+priceDisplay+'"';

					// US Epp 가격표시 관련 정보 셋팅
					if((isNotNull(frontModel.prdSavePriceInf) || isNotNull(frontModel.tradeDiscountPrice)) && isNotNull(frontModel.prdPriceInf)){
						usEppSavePrice = 0;
						if(isNotNull(frontModel.prdSavePriceInf)){
							usEppSavePrice += frontModel.prdSavePriceInf;
						}
						if(isNotNull(frontModel.tradeDiscountPrice)){
							usEppSavePrice += frontModel.tradeDiscountPrice;
						}

						// US Epp 할인 가격 : prdSavePriceInf + tradeDiscountPrice
						usEppCurrentPrice = frontModel.prdPriceInf - usEppSavePrice;

						// tagging data - originPrice Set ( data-modelprice )
						originPrice = frontModel.prdPriceInf;
						// tagging data - discountPrice Set ( data-discountprice )
						discountPrice = usEppCurrentPrice;
					}
				}
				//new-hybris
				if(isGPv2 || isNewHybris){
					if(isNotNull(frontModel.leasingInfo) && (siteCode === "nl" || siteCode === "be" ||siteCode === "be_fr") && frontModel.upgrade === "Y"){
						// nl 사이트만 leasingInfo 사용
						var leasingInfo = frontModel.leasingInfo;
						if(isNotNull(leasingInfo.monthlyRate) && isNotNull(leasingInfo.downPaymentFormatted)){
							monthlyRate = deleteCurrency(leasingInfo.monthlyRate, pfPriceCurrency);
							tenureVal = leasingInfo.tenureVal;
							downPaymentFormatted = deleteCurrency(leasingInfo.downPaymentFormatted, pfPriceCurrency);
							tenureUnit = leasingInfo.tenureUnit;
							useLeasingInfo = true;
						}
					} else if ( isNotNull(frontModel.monthlyPriceInfo)
							&& isNotNull(frontModel.monthlyPriceInfo.leasingMonthly) && isNotNull(frontModel.monthlyPriceInfo.leasingMonths) && isNotNull(frontModel.monthlyPriceInfo.interest)){
						monthlyPrice = frontModel.monthlyPriceInfo.leasingMonthly;
						monthlyPrice = currencyComma(monthlyPrice, pfPriceCurrency);
						tenureVal = frontModel.monthlyPriceInfo.leasingMonths;
						dataMonth = frontModel.monthlyPriceInfo.leasingMonths;// add on
						leasingInterest = frontModel.monthlyPriceInfo.interest;

						useMonthlyPrice = true;
					}

					promotionDisplay = frontModel.promotionPriceDisplay;
					if((siteCode==="nl" || siteCode==="be" || siteCode ==="be_fr") && isNotNull(promotionDisplay)){
						promotionDisplay = deleteCurrency(promotionDisplay, pfPriceCurrency);
					}
					if((siteCode==="nl" || siteCode==="be" || siteCode ==="be_fr") && isNotNull(frontModel.msrpPrice)){
						useMsrpPrice = true;
					}
				} else {
					if( isNotNull(frontModel.monthlyPriceInfo) &&
							isNotNull(frontModel.monthlyPriceInfo.leasingMonthly) && isNotNull(frontModel.monthlyPriceInfo.leasingMonths) &&
							(siteCode === "au" || siteCode === "nz" || siteCode === "ae" || siteCode === "my" || siteCode === "sg" || siteCode === "ca" || siteCode === "ca_fr" ||
							siteCode === "it" || siteCode === "se" || siteCode === "dk" || siteCode === "fi" || siteCode === "no" || siteCode === "es" || siteCode === "pt" ||
							siteCode === "th" || siteCode === "tw" || siteCode === "ru" || siteCode === "ch" || siteCode === "ch_fr" || siteCode === "br")){
						var monthlyPriceInfo = frontModel.monthlyPriceInfo;
						monthlyPrice = monthlyPriceInfo.leasingMonthly;
						monthlyPrice = currencyComma(monthlyPrice, pfPriceCurrency);
						tenureVal = monthlyPriceInfo.leasingMonths;

						useMonthlyPrice = true;
					}
					if(isHybrisIntg){
						promotionDisplay = frontModel.promotionPriceDisplay;
					}
				}

				if(isNotNull(promotionDisplay) && !usUseTradeInDiscount){
					currentDisplay = promotionDisplay;
					currentDisplayForMiniCard = promotionDisplay;
				}

				let topPrice = ``;
				let topPriceAttr = '';
				var savePriceSpan = ``;

				if(isGPv2 || isNewHybris) {
					if(isNotNull(promotionDisplay) || usUseTradeInDiscount ) {
						var listPrice = 0;
						if(frontModel.listPrice != null){
							listPrice = parseFloat(frontModel.listPrice) - parseFloat(frontModel.price);
						}

						var savePrice = parseFloat(frontModel.price) - parseFloat(frontModel.promotionPrice);

						// US Epp Exit 시 원래 save 가격 표시를 위한 attr
						var usOriginSaveAttr = "";
						if(siteCode === "us"){
							var usOriginSaveText = isNotNull(frontModel.saveText) && savePrice > 0 ? frontModel.saveText : 0;

							if(usUseTradeInDiscount){
								savePrice = Number(frontModel.listPrice) - discountPrice;
								usOriginSaveText = currencyComma(savePrice, pfPriceCurrency);
								frontModel.saveText = usOriginSaveText;
							}
							usOriginSaveAttr = ' data-de-saveprice="'+usOriginSaveText+'"';
						}

						if(siteCode==="us" && usEppSavePrice > 0) {
							topPriceAttr = `${usSuggestPriceAttr}`;

							topPrice = `
								<span class="quick-view__price-origin">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<del>${currencyComma(frontModel.prdPriceInf, pfPriceCurrency)}</del>
								</span>
								<span class="quick-view__price-save" ${usOriginSaveAttr}>
									<span class="hidden">Save Price: </span>
									${Granite.I18n.get("Save {0}", [currencyComma(usEppSavePrice, pfPriceCurrency)])}
								</span>
							`;
						} else if(savePrice !== 0 && isNotNull(frontModel.saveText) && !(isEppSite && siteCode === "pl")) {
							var saveText = frontModel.saveText;
							
							if(siteCode !== "nl" && siteCode !== "be" && siteCode !== "be_fr") {
								/* GPv2 국가 save 문구 노출
								 * SEBN 국가 save 문구 미노출 처리 */
								let savePriceText = Granite.I18n.get("Save {0}", [currencyComma(saveText, pfPriceCurrency)]);
								/*
								if(siteCode === "hr") {
									savePriceText = Granite.I18n.get("Save {0}", [currencyComma(saveText, pfPriceCurrency) + " (" + euroToKunaPrice(saveText) + ")"]);
								}
								*/
								if(siteCode === "iq_ar" || siteCode === "iq_ku"){
									savePriceText = saveText;
								}
								savePriceSpan = `
								<span class="quick-view__price-save" ${usOriginSaveAttr}>
									<span class="hidden">Save Price: </span>
									${savePriceText}
								</span>
								`;
							}
							var priceText = "";
							if(siteCode === "nl" || siteCode === "be" || siteCode === "be_fr" || siteCode === "de") {
								priceText = Granite.I18n.get("From {0}",[`<del>${priceDisplay}</del>`]);
							} else if((isStrikethroughRmSite && frontModel.lowestWasPriceUseYn !== "Y") || siteCode === "ro") {
								priceText = "";
								savePriceSpan = `
								<span class="quick-view__price-save" ${usOriginSaveAttr}>
									<span class="hidden">Save Price: </span>
								</span>
								`;
							} else {
								priceText = `<del>${priceDisplay}</del>`;
							}

							topPriceAttr = ``;
							topPrice = `
								<span class="quick-view__price-origin">
									${(siteCode=="in")? 'MRP (Inclusive of all taxes) ' : ''}
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									${priceText}
								</span>
								${savePriceSpan}
								`;
						} else if(siteCode=="us") {
							//savePrice 가 없는 경우 Epp 선택 후 사용할 save 영역 생성 ( 미노출 )
							topPriceAttr = ``;
							topPrice = `
								<span class="quick-view__price-origin">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<del>${priceDisplay}</del>
								</span>
								<span class="quick-view__price-save" style="display:none;"></span>
							`;
						} else if(listPrice > 0 && (siteCode === "nl" || siteCode === "be" || siteCode === "be_fr")) {
							originPrice = frontModel.listPrice;
							discountPrice = frontModel.promotionPrice;
							topPriceAttr = ``;
							topPrice = `
								<span class="quick-view__price-origin">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<span>${Granite.I18n.get("Listprice")}</span> ${currencyComma(frontModel.listPrice, pfPriceCurrency)}
								</span>
							`;
						}
						emiPrice = frontModel.promotionPrice;
					} else {
						emiPrice = frontModel.price;
						var usOriginSaveAttr = ' data-de-saveprice="0"';
						if(siteCode=="us") {
							var savePriceStyle = ' style="display:none;"';
							if(isNotNull(usEppSavePrice) && usEppSavePrice != 0){
								//Epp Save 정보가 있는 경우 Show 처리
								savePriceStyle = '';
							}
							topPriceAttr = `${savePriceStyle} ${usSuggestPriceAttr}`;
							topPrice = `
								<span class="quick-view__price-origin">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<del>${priceDisplay}</del>
								</span>
								<span class="quick-view__price-save" ${usOriginSaveAttr} ${savePriceStyle}>
									<span class="hidden">Save Price: </span>
									${Granite.I18n.get("Save {0}", [currencyComma(usEppSavePrice, pfPriceCurrency)])}
								</span>
							`;
						}
					}
				} else if (isHybrisIntg) {
					emiPrice = frontModel.price;
					if(isNotNull(frontModel.promotionPrice) && isNotNull(frontModel.promotionPriceDisplay) && (Number(frontModel.price) > Number(frontModel.promotionPrice))) {
						emiPrice = frontModel.promotionPrice;
						discountPrice = frontModel.promotionPrice;
						if(siteCode === "my"){
							var savePrice = parseFloat(frontModel.price) - parseFloat(frontModel.promotionPrice);
							
							savePriceSpan = `
							<span class="quick-view__price-save">
								<span class="hidden">Save Price: </span>
								${Granite.I18n.get("Save {0}", [currencyComma(savePrice, pfPriceCurrency)])}
							</span>
							`;
						}
						topPriceAttr = ``;
						topPrice = `
							<span class="quick-view__price-origin">
								<span class="hidden">${frontModel.afterTaxPriceDisplay}</span>
								<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
								<del>${priceDisplay}</del>
							</span>
							${savePriceSpan}
						`;
					}
				} else {
					if(isNotNull(frontModel.formattedPriceSave) && siteCode !== "br") {
						topPriceAttr = ``;
						topPrice = `
							<span class="quick-view__price-origin">
								<span class="hidden">${Granite.I18n.get("Price before discount")}: </span>
								${frontModel.formattedPriceSave}
							</span>
						`;
					}
					if(isNotNull(frontModel.rrpPriceDisplay) && isNotNull(frontModel.formattedPriceSave) && siteCode === "br") {
						topPriceAttr = ``;
						topPrice = `
						<span class="quick-view__price-origin">
							<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
							<del>${frontModel.rrpPriceDisplay}</del>
						</span>
						<span class="quick-view__price-save" ${usOriginSaveAttr}>
							<span class="hidden">Save Price: </span>
							${frontModel.formattedPriceSave}
						</span>
						`;
					}
					if(siteCode === "it"){
						topPriceAttr = ``;
						topPrice = ``;
						
						if(isNotNull(frontModel.lowestWasPrice) && isNotNull(frontModel.promotionPrice) 
								&& frontModel.promotionPrice < frontModel.lowestWasPrice
								){
							let savePrice = parseFloat(frontModel.lowestWasPrice) - parseFloat(frontModel.promotionPrice);
							let savePriceText = "";
							if(siteCode === "it"){
								savePriceText = Granite.I18n.get("Save the {0}%", [getDiscountRate(savePrice, frontModel.lowestWasPrice)]);
							}else{
								savePriceText = Granite.I18n.get("Save {0}", [currencyComma(savePrice, pfPriceCurrency)]);
							}
							topPrice = `
							<span class="quick-view__price-origin">
								<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
								<del>${frontModel.lowestWasPriceDisplay}</del>
							</span>
							<span class="quick-view__price-save">
								<span class="hidden">Save Price: </span>
								${savePriceText}
							</span>
							`;
						}
					}
				}
				let mainPrice = "";
				let mainPriceAttr = "";
				let monthlyFinanceText = "";
				let rrpPricePTag = ``;
				if(siteCode === "ro" && frontModel.promotionPrice !== frontModel.price){
					rrpPricePTag = `
								<p class="quick-view__price-pr">
									<span class="hidden">PR Price :</span>
									<span class="quick-view__price-pr-unit">${Granite.I18n.get("RRP {0}", [frontModel.priceDisplay])}</span>
								</p>
								`;
				}
				if((upperStock === "LEARNMORE" || upperStock === "NOORDER") && (siteCode === "nl" || siteCode === "be" || siteCode === "be_fr")) {
					mainPriceAttr = `data-pricetext="${priceDisplay}"`;
					mainPrice = `
						<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
						${priceDisplay}
					`;
					dataPricetext = priceDisplay;
					emiPrice = frontModel.price;
				} else if(((isGPv2 || isNewHybris) && upperStock !== "LEARNMORE" && upperStock !== "NOORDER") || (!isGPv2 && !isNewHybris && upperStock !== "LEARNMORE")) {
					if(isNotNull(tradeInPriceText)) {
						mainPriceAttr = `data-pricetext="${tradeInPriceText}"`;
						mainPrice = `
							<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
							${tradeInPriceText}
						`;
						dataPricetext = tradeInPriceText;
					} else if(useMonthlyPrice && !usUseTradeInDiscount) {
						if(siteCode === "id") {
							priceTextForCompare = Granite.I18n.get("pf From {0}/mo",[monthlyPrice]) + ' ';
						} else {
							priceTextForCompare = Granite.I18n.get("From {0}/mo",[monthlyPrice]) + ' ';
						}

						if(leasingInterest !== "" && siteCode !== "pe" && siteCode !== "cl" && siteCode !== "mx" && siteCode !== "co" && siteCode !== "de"){
							priceTextForCompare +=
								Granite.I18n.get("for {0} mos at {1}% APR",[tenureVal, leasingInterest]) + ' ';
						} else {
							priceTextForCompare += Granite.I18n.get("for {0} mos",[tenureVal])+' ';
						}
						financingInstallmentDescText = priceTextForCompare;
						priceTextForCompare += Granite.I18n.get("or")+' ';

						var priceTextForCompareAttr = ' data-pricetext="'+priceTextForCompare+currentDisplay+'"';
						dataPricetext = priceTextForCompare + currentDisplay;
						if(siteCode === "us") {
							if(isNotNull(usEppCurrentPrice) && usEppCurrentPrice != 0) {
								//compare 추가시 표시되는 문구 설정
								var eppPriceTextForCompare =
									Granite.I18n.get("From {0}/mo",[monthlyPrice])+
									' '+ Granite.I18n.get("for {0} mos at {1}% APR",[tenureVal, leasingInterest])+
									' '+ Granite.I18n.get("or")+' '+currencyComma(usEppCurrentPrice, pfPriceCurrency);
								priceTextForCompareAttr = ' data-use-epp-discount="true"';
								currentDisplay = currencyComma(usEppCurrentPrice, pfPriceCurrency);
							}

							priceTextForCompareAttr += ' data-de-pricetext="' + priceTextForCompare + '" data-de-currentprice="' + usDefaultCurrentPrice + '"' + ' data-use-monthly="true"';
						}
						if(siteCode === "br") {
							var afterTaxPriceDisplay = isNotNull(frontModel.afterTaxPriceDisplay)?frontModel.afterTaxPriceDisplay:"";
							priceTextForCompareAttr = 
								' data-pricetext="' + currentDisplay + ' à vista ' + afterTaxPriceDisplay + ' em ' + tenureVal  + 'x ' + monthlyPrice + ' sem juros"';
							dataPricetext = currentDisplay + ' à vista ' + afterTaxPriceDisplay + ' em ' + tenureVal  + 'x ' + monthlyPrice + ' sem juros';
							
							mainPriceAttr = `${priceTextForCompareAttr} ${usCurrentPriceAttr}`;
							let savingInformationTag = "";
							if(isNotNull(frontModel.rrpPriceDisplay) && isNotNull(frontModel.formattedPriceSave)){
								savingInformationTag = `
								<span class="quick-view__price-main-unit">à vista</span>
								`;
							}
							mainPrice = `
							<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
							${currentDisplay} 
							${savingInformationTag}
							`;
							monthlyFinanceText = `${afterTaxPriceDisplay} em ${tenureVal}x ${monthlyPrice} sem juros`;
						} else if(siteCode === "nl" || siteCode === "be" || siteCode === "be_fr") {
							var leasingUpfront = frontModel.monthlyPriceInfo.leasingUpfront;

							priceTextForCompareAttr =
								' data-pricetext="'+currentDisplay+' '+Granite.I18n.get("or")+' '+ leasingUpfront  + " + " + monthlyPrice + " x " + tenureVal  + " " +  Granite.I18n.get("months")+'"';
							dataPricetext = currentDisplay+' '+Granite.I18n.get("or")+' '+ leasingUpfront  + " + " + monthlyPrice + " x " + tenureVal  + " " +  Granite.I18n.get("months");
							mainPriceAttr = `${priceTextForCompareAttr} ${usCurrentPriceAttr}`;
							// mainPrice = `
							// <p class="${priceMainClass}" ${priceTextForCompareAttr} ${usCurrentPriceAttr}>
							// 	<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
							// 	${dataPricetext}
							// </p>
							// `;
							mainPrice = `
								<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
								${currentDisplay}
							`;
						} else {
							var displayText = "";
							if(siteCode=="id"){
								displayText += Granite.I18n.get("pf From {0}/mo", [monthlyPrice])+' ';
							} else {
								displayText += Granite.I18n.get("From {0}/mo", [monthlyPrice])+' ';
							}

							if(leasingInterest !== "" && siteCode !== "pe" && siteCode !== "cl" && siteCode !== "mx" && siteCode !== "co" && siteCode !== "de"){
								displayText += Granite.I18n.get("for {0} mos at {1}% APR", [tenureVal, leasingInterest]);
							} else {
								displayText += Granite.I18n.get("for {0} mos", [tenureVal]);
							}
							displayText += ' ' + Granite.I18n.get("or") + ' ' + currentDisplay

							mainPriceAttr = `${priceTextForCompareAttr} ${usCurrentPriceAttr}`;

							monthlyFinanceText = displayText;
							
							if(siteCode === "pe" || siteCode === "cl" || siteCode === "mx" || siteCode === "co" || siteCode === "at"
								|| siteCode === "de"
							){
								mainPrice = `
									<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
									${displayText}
								`;
							}else if(siteCode === "ro" && frontModel.promotionPrice !== frontModel.price){
								mainPrice = `
									<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
									<span class="quick-view__price-total-unit">${currentDisplay}</span>
								`;
							}else{
								mainPrice = `
									<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
									${currentDisplay}
								`;
							}
						}
						dataMonth = tenureVal; // add on
					} else if(useLeasingInfo) {
						if(downPaymentFormatted !== "" && tenureUnit !== "" && tenureVal !== "" && monthlyRate !== "") {
							var leasingText = " " + downPaymentFormatted + " + " + tenureVal + " x " + monthlyRate + "/" + Granite.I18n.get(tenureUnit);
							  priceTextForCompare = currentDisplay + ' '+Granite.I18n.get("or")+' ' + leasingText;

							var priceTextForCompareAttr = ' data-pricetext="'+priceTextForCompare+'"';
							dataPricetext = priceTextForCompare;
							mainPriceAttr = priceTextForCompareAttr;
							mainPrice = `
								<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
								${currentDisplay} ${Granite.I18n.get("or")} ${leasingText}
							`;
						}
						dataMonth = tenureVal; // add on
					} else {
						var priceTextForCompareAttr = ' data-pricetext="'+currentDisplay+'"';
						dataPricetext = currentDisplay;
						var defaultCurrentDisplay = currentDisplay;
						if(siteCode==="us") {
							if(isNotNull(usEppCurrentPrice) && usEppCurrentPrice != 0) {
								currentDisplay = currencyComma(usEppCurrentPrice, pfPriceCurrency);
								if(frontModel.tradeDiscountPrice > 0) {
									// tradeDiscount 가 있는경우 아래 문구로 표시
									currentDisplay = 'From '+currentDisplay+' with trade-in<sup>θ</sup>';
								}
								priceTextForCompareAttr = ' data-use-epp-discount="true"';
							}
							priceTextForCompareAttr += ' data-de-pricetext="'+defaultCurrentDisplay+'" data-use-monthly="false"';
						}
						mainPriceAttr = `${priceTextForCompareAttr} ${usCurrentPriceAttr}`;
						mainPrice = `
							<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
							${currentDisplay}
						`;
					}
				}
				var advicedPriceDiv = "";
				if(useMsrpPrice) {
					// advicedPriceDiv = `
					// <div class="pd03-product-card__finance">${currencyComma(frontModel.msrpPrice, pfPriceCurrency)}</div>
					// `;
					advicedPriceDiv = `
					<div class="quick-view__finance">
						${Granite.I18n.get("Listprice")} ${currencyComma(frontModel.msrpPrice, pfPriceCurrency)}
					</div>`;
				}
				if (isEppSite && siteCode === "pl"){
                	let msrpPrice = '';
                	if ( isNotNull(frontModel.msrpPrice) ){
                		msrpPrice = ' ' + currencyComma(frontModel.msrpPrice, pfPriceCurrency);
						advicedPriceDiv = `<div class="quick-view__finance">${Granite.I18n.get("Listprice")}${msrpPrice}</div>`;
                	}
				}				
				if( useMonthlyPrice && (siteCode === "pe" || siteCode === "cl" || siteCode === "mx" || siteCode === "co" )){
					advicedPriceDiv = `
						<div class="quick-view__finance">*Aplican condiciones</div>
						`;
				}
				var calcFinance = "";
				if(isGPv2 || isNewHybris) {
					var financingDesc = [];
					if(frontModel.financingFormattedDesc != null && frontModel.financingFormattedDesc.length > 0){
						financingDesc = frontModel.financingFormattedDesc;
					} else {
						financingDesc = frontModel.financingDesc;
					}
					if (isNotNull(financingDesc) && financingDesc.length > 0 && siteCode !== "us") {
						for(var fdi in financingDesc) {
							var financingHtml = financingDesc[fdi];
							if(fdi == 0) {
								// var desc = String(financingDesc[fdi]).replace(Granite.I18n.get("Calculate Finance"), "").trim();
								if(isNotNull(emiPrice)) {
									if((siteCode === "in" || siteCode === "uk" || siteCode === "id" || siteCode === "ee" || siteCode === "lv" || siteCode === "lt" || siteCode === "pl" || siteCode === "ro" 
										|| siteCode === "ua" || siteCode === "ph" || siteCode === "cn"
									) && isNotNull(emiUrl) && frontModel.financing == "Y") {
										// new-hybris
										// financingHtml = `
										// <div class="pd03-product-card__finance">
										// 	${desc}
										// 	<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install" data-modelcode="${frontModel.shopSkuCode}"
										// 	data-link_info="${emiUrl}/?sku=${frontModel.shopSkuCode}&price=${emiPrice}&page=pf"
										// 	an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
										// 		${Granite.I18n.get("Calculate Finance")}
										// 	</button>
										// </div>
										// `;
										if(siteCode === "ua"){
											financingHtml = `
											<div class="quick-view__finance">
												${financingInstallmentDescText}.
												<button type="button" class="quick-view__finance-cta js-pfv2-calculate-popup-open" data-type="install" data-modelcode="${frontModel.shopSkuCode}"
												data-link_info="${emiUrl}/?sku=${frontModel.shopSkuCode}&price=${emiPrice}&page=pf"
												an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
													${Granite.I18n.get("Calculate Finance")}
												</button>
											</div>
											`;
										}else{
											financingHtml = `
											<div class="quick-view__finance">
												<button type="button" class="quick-view__finance-cta js-pfv2-calculate-popup-open" data-type="install" data-modelcode="${frontModel.shopSkuCode}"
												data-link_info="${emiUrl}/?sku=${frontModel.shopSkuCode}&price=${emiPrice}&page=pf"
												an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
													${financingDesc[fdi]}
												</button>
											</div>
											`;
												
										}
									} else if(siteCode !== "in" && siteCode !== "uk" && isNotNull(financingUrl)) {
										var financeLayerUrl = financingUrl;
										if(siteCode !== "de") {
											financeLayerUrl +='/?total='+ emiPrice +'&page=pf';
										}
										if(siteCode!=="fr") {
											// financingHtml = `
											// <div class="pd03-product-card__finance">
											// 	${desc}
											// 	<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install"
											// 	data-link_info="${financeLayerUrl}" aria-label="${Granite.I18n.get("Calculate Finance")}" ${isNewHybris? 'data-modelcode="' + frontModel.shopSkuCode + '"' : ""}
											// 	an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
											// 		${Granite.I18n.get("Calculate Finance")}
											// 	</button>
											// </div>
											// `;
											financingHtml = `
											<div class="quick-view__finance">
												<button type="button" class="quick-view__finance-cta js-pfv2-calculate-popup-open" data-type="install"
												data-link_info="${financeLayerUrl}" aria-label="${financingDesc[fdi]}" ${isNewHybris? 'data-modelcode="' + frontModel.shopSkuCode + '"' : ""}
												an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
													${financingDesc[fdi]}
												</button>
											</div>
											`;
										} else {
											// financingHtml = `<div class="pd03-product-card__finance">From $222.17/month. <button type="button" class="pd03-product-card__finance-cta">Calculate Finance</button></div>`;
											financingHtml = `<div class="quick-view__finance"><button type="button" class="quick-view__finance-cta">${financingDesc[fdi]}</button></div>`;
										}
									}
								}
							}
						}
						calcFinance = financingHtml;
					}
				} else if(isHybrisIntg) {
					var financingHtml = "";
					if (frontModel.financing === "Y" && isNotNull(frontModel.financingDesc)) {
						financingHtml = frontModel.financingDesc;
						if(isNotNull(emiPrice) && isNotNull(financingUrl)) {
							// var desc = String(frontModel.financingDesc).replace(Granite.I18n.get("Calculate Finance"), "").trim();
							var financeLayerUrl = financingUrl +'/?total='+ emiPrice +'&page=pf';
							// financingHtml = `
							// <div class="pd03-product-card__finance">
							// 	${desc}
							// 	<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install"
							// 	aria-label="${Granite.I18n.get("Calculate Finance")}" data-link_info="${financeLayerUrl}"
							// 	an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
							// 		${Granite.I18n.get("Calculate Finance")}
							// 	</button>
							// </div>
							// `;
							financingHtml = `
							<div class="quick-view__finance">
								<button type="button" class="quick-view__finance-cta js-pfv2-calculate-popup-open" data-type="install"
								aria-label="${Granite.I18n.get("Calculate Finance")}" data-link_info="${financeLayerUrl}"
								an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
									${frontModel.financingDesc}
								</button>
							</div>
							`;
						}
					}
					calcFinance = financingHtml;
				}

				let monthlyFinanceArea = "";
				if(monthlyFinanceText !== "" && (isOldHybris || siteCode === "br" || siteCode === "my")) {
					monthlyFinanceArea = `
					<div class="quick-view__finance">
						${monthlyFinanceText}
					</div>
					`;
				}

				const priceSecondNoDataClass = topPrice.trim() === ""? "no-data" : "";
				const priceMainNoDataClass = mainPrice.trim() === ""? "no-data" : "";
				const priceDescNoDataClass = advicedPriceDiv.trim() === "" && calcFinance.trim() === "" && monthlyFinanceArea.trim() === ""? "no-data" : "";
				// const priceDescNoDataClass = advicedPriceDiv.trim() === "" && calcFinance.trim() === ""? "no-data" : "";
				
				if(siteCode === "ro" && frontModel.promotionPrice !== frontModel.price){
					priceMainClass = `quick-view__price-total`;
				}
				if(siteCode === "co" && frontModel.vatEligible === "true"){
						let priceSpecialHtml = "";
						if(isNotNull(promotionDisplay)){
							priceSpecialHtml =`
									<p class="quick-view__price-special">${Granite.I18n.get("Price with discount")}: ${promotionDisplay}</p>
									`;
						}
						priceItem = `
							<p class="quick-view__price-excluding-vat" ${mainPriceAttr}>${Granite.I18n.get("Price without VAT")}: ${frontModel.vatFreePriceDisplay}</p>
							${priceSpecialHtml}
							<p class="quick-view__price-rrp">${Granite.I18n.get("Price before")}: <del>${priceDisplay}</del></p>
						`;
				}else if(siteCode === "it"){
					priceItem = `
						<p class="${priceMainClass} ${priceMainNoDataClass}" ${mainPriceAttr}>
							${mainPrice}
						</p>
						<p class="${priceSecondClass} ${priceSecondNoDataClass}" ${topPriceAttr}>
							${topPrice}
						</p>
						${rrpPricePTag}
							${advicedPriceDiv}
							${calcFinance}
							${monthlyFinanceArea}
						`;
				}else{
					priceItem = `
						<p class="${priceSecondClass} ${priceSecondNoDataClass}" ${topPriceAttr}>
							${topPrice}
						</p>
						<p class="${priceMainClass} ${priceMainNoDataClass}" ${mainPriceAttr}>
							${mainPrice}
						</p>
						${rrpPricePTag}
							${advicedPriceDiv}
							${calcFinance}
							${monthlyFinanceArea}
					`;
				}
			}

			if(priceItem.trim() === "") {
				priceItem = `
				<p class="${priceSecondClass} no-data"></p>
				<p class="${priceMainClass} no-data"></p>
				<div class="quick-view__finance no-data"></div>
				`;
				
			}

			var sellerInfo = "";
			
			if(isNotNull(thirdPASeller)) {
				sellerInfo += `<p class="quick-view__seller-info">${thirdPASeller}</p>`;
			}else{
				sellerInfo += `<p class="quick-view__seller-info no-data"></p>`;
			}

			const croatia = siteCode === "hr"? "quick-view__price-croatia" : "";
			const seromClass = (siteCode === "ro" && frontModel.promotionPrice !== frontModel.price) ? "quick-view__price-serom" : "";

			var productCardTemplate = `
			<div class="quick-view__price-container ${tradeInClass} ${croatia} ${seromClass}">
				${priceItem}
			</div>
			${sellerInfo}
			`;

			return productCardTemplate;
		}
		/**
		 * package 영역
		 * @param {*} frontModel
		 * @param {*} cardLayout
		 * @returns
		 */
		var buildPackageArea = function(frontModel) {
			let productCardTemplate = "";
			let energyLabelComboPackageCheck = false;
			
			if(isNotNull(frontModel.packageYN) && frontModel.packageYN === "Y"){
				
				let pkgChildModels = frontModel.pkgChildModelList;
				let pkgListTemp = ``;
				
				if(pkgChildModels.length > 0){
				
					for(var pkgChildModelIdx in pkgChildModels){
						let energyLabeleCheck = false;
						pkgChildModel = pkgChildModels[pkgChildModelIdx];
						pkgChildModel.modelCode;
						pkgChildModel.modelName;
						pkgChildModel.thumbUrl;
						//pfImgDomain(pkgChildModel.thumbUrl, "product-desktop", null, false);
						//pfImgDomain(pkgChildModel.thumbUrl, "product-mobile", null, false);
						let displayNameTemp = pkgChildModel.displayName;
						// TODO markup ~~
						let energyLabelTemp = ``;
						if(isNotNull(pkgChildModel.energyLabelGrade)){
							energyLabeleCheck = true;
							energyLabelComboPackageCheck = true;
							let isNewEnergyLabel = pkgChildModel.newEnergyLabel === "Y";
							let ficheText = ``;
							if(isNotNull(pkgChildModel.ficheFileUrl)) {
								ficheText = `
								<a class="badge-energy-label__text" href="${pkgChildModel.ficheFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}">
									${isNewEnergyLabel? Granite.I18n.get("PRODUCT INFORMATION SHEET") : Granite.I18n.get("Product Fiche")}
								</a>`;
							}
							let energyLabelClassTemp = `badge-energy-label__badge badge-energy-label__badge--${pkgChildModel.energyLabelGrade.toLowerCase()}`;
							let energyLabelGradeTag = `${pkgChildModel.energyLabelGrade}`;
							if(!isNewEnergyLabel){
								energyLabelClassTemp = `badge ${pkgChildModel.energyLabelClass2}`;
								energyLabelGradeTag = `
												<span class="badge__grade--with-text ${pkgChildModel.energyLabelClass1}">
													<span class="hidden">${pkgChildModel.energyLabelGrade}</span>
												</span>
												`;
							}

							energyLabelTemp = `
										<div class="badge-energy-label">
											${ficheText}
											<a class="${energyLabelClassTemp}" href="${pkgChildModel.energyFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}">
												${energyLabelGradeTag}
											</a>
										</div>
							`;
						}
						let repairabilityTemp = ``;
						if(isNotNull(pkgChildModel.repairabilityIndex)){
							let repairabilityIndex = Number(pkgChildModel.repairabilityIndex);
							let repairabilityAlt = Granite.I18n.get("Repairability Index : {0} / 10", [repairabilityIndex] );
							
							if(siteCode=="fr" || siteCode=="test") {
								let reparabiliteUrl = '/fr/indice-reparabilite/';
								if(isNotNull(pkgChildModel.repairabilityIndexPdfUrl)) {
									reparabiliteUrl = String(pkgChildModel.repairabilityIndexPdfUrl);
								}
								let tempArr = reparabiliteUrl.split("/");
								let reparabiliteFileName = tempArr[tempArr.length-1];
								repairabilityTemp = `
											<div class="badge-repairability">
												<a href="${reparabiliteUrl}" target="_blank" aria-label="Indice de réparabilité" target="_blank" an-tr="pd03_product finder:option-${pageTrack}-repairability index-option_click4"
													an-ca="option click" an-ac="pf product card" an-la="repairability index:${reparabiliteFileName}">
													<div class="image">
														<img class="image__main responsive-img" data-desktop-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_83x50/${repairabilityIndex}.svg" 
															data-mobile-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_130x78/${repairabilityIndex}.svg" alt="${repairabilityAlt}" role="img" data-comp-name="image">
													</div>
												</a>
											</div>
								`;
							}else{
								repairabilityTemp = `
											<div class="badge-repairability">
												<a href="javascript:;">
													<div class="image">
														<img class="image__main responsive-img" data-desktop-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_83x50/${repairabilityIndex}.svg" 
															data-mobile-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_130x78/${repairabilityIndex}.svg" alt="${repairabilityAlt}" role="img" data-comp-name="image">
													</div>
												</a>
											</div>
								`;
							}
						}
						if(energyLabeleCheck){
							pkgListTemp += `
									<div class="quick-view__combo-package-slide swiper-slide" role="listitem">
										<div class="quick-view__combo-package-slide-inner">
											<div class="quick-view__combo-package-product-name">${pkgChildModel.displayName}</div>
											<div class="quick-view__combo-package-fiche">
												<!--/* New Energy Label */-->
												${energyLabelTemp}
												<!--/* // New Energy Label */-->
												<!--/* Repairability */-->
												${repairabilityTemp}
												<!--/* // Repairability */-->
											</div>
										</div>
									</div>
							`;
						}
					}
				}
				if(energyLabelComboPackageCheck){
					productCardTemplate = `
						<div class="quick-view__combo-package">
							<div class="quick-view__combo-package-container swiper-container basic-swiper" data-swiper-option='{
									"slidesPerView":"1",
									"keepWrapper":true,
									"loop":false,
									"componentEl":".quick-view__combo-package",
									"offTxtAccesibility":"true",
									"noSwiping": true,
									"noSwipingClass": "button-controller--scroll",
									"watchOverflow":"true"
								}'>
								
								<div class="quick-view__combo-package-wrapper swiper-wrapper" role="list">
									${pkgListTemp}
								</div>
								<button type="button" class="quick-view__combo-package-button swiper-button-prev">
									<span class="hidden">Previous</span>
									<svg class="icon" focusable="false" aria-hidden="true">
									<use xlink:href="#previous-regular" href="#previous-regular"></use>
									</svg>
								</button>
								<button type="button" class="quick-view__combo-package-button swiper-button-next">
									<span class="hidden">Next</span>
									<svg class="icon" focusable="false" aria-hidden="true">
									<use xlink:href="#next-regular" href="#next-regular"></use>
									</svg>
								</button>
							</div>
						</div>
					`;
				}
			}
			
			return productCardTemplate;
		}

		var buildFicheArea = function(frontModel, thirdPASeller) {


			var productCardTemplate = "";
			var labelText = "";
			if(isNotNull(frontModel.energyLabelGrade) && isNotNull(frontModel.energyLabelClass1) && isNotNull(frontModel.energyFileUrl) && frontModel.newEnergyLabel != "Y") {
				labelText = `<div class="badge-energy-label">`;
				if(isNotNull(frontModel.ficheFileUrl)) {
					labelText += `
					<a class="badge-energy-label__text" href="${frontModel.ficheFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}"
					an-tr="pd03_product finder:option-${pageTrack}-product fiche-link" an-ca="option click" an-ac="pf product card" an-la="product fiche">
						${Granite.I18n.get("Product Fiche")}
					</a>
					`;
				}
				labelText += `
				<a class="badge ${frontModel.energyLabelClass2}" href="${frontModel.energyFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}"
				an-tr="pd03_product finder:option-${pageTrack}-product fiche-link" an-ca="option click" an-ac="pf product card" an-la="product fiche">
					<span class="badge__grade--with-text ${frontModel.energyLabelClass1}">
						<span class="hidden">${frontModel.energyLabelGrade}</span>
					</span>
				</a>
				`;
				labelText += `</div>`;
			} else if(isNotNull(frontModel.energyLabelGrade) && isNotNull(frontModel.energyLabelClass1) && isNotNull(frontModel.energyFileUrl) && frontModel.newEnergyLabel == "Y") {
				labelText = `<div class="badge-energy-label">`;
				var energyLabelClass = "";
				if(isNotNull(frontModel.ficheFileUrl)) {
					labelText += `
					<a class="badge-energy-label__text" href="${frontModel.ficheFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}"
					an-tr="pd03_product finder:option-${pageTrack}-product fiche-link" an-ca="option click" an-ac="pf product card" an-la="product fiche">
						${Granite.I18n.get("PRODUCT INFORMATION SHEET")}
					</a>
					`;
				}
				if(frontModel.energyLabelClass) { //energyLabelClass 있으면
					energyLabelClass = frontModel.energyLabelClass;
				} else { //energyLabelClass 없으면
					energyLabelClass = frontModel.energyLabelClass1;
				}
				labelText += `
				<a class="badge-energy-label__badge ${energyLabelClass}" href="${frontModel.energyFileUrl}" target="_blank" aria-label="badge title"
				an-tr="pd03_product finder:option-${pageTrack}-product fiche-link" an-ca="option click" an-ac="pf product card" an-la="product fiche">
					${frontModel.energyLabelGrade}
				</a>
				`;
				labelText += `</div>`;
			}
			// repair랑 sellerinfo는 퀵뷰에 없음 확인 후 추가
			if(isNotNull(frontModel.repairabilityIndex)) {
				var repairabilityIndex = Number(frontModel.repairabilityIndex);
				var repairabilityAlt = Granite.I18n.get("Repairability Index : {0} / 10", [repairabilityIndex] );

				if(siteCode=="fr" || siteCode=="test") {
					var reparabiliteUrl = '/fr/indice-reparabilite/';
					if(isNotNull(frontModel.repairabilityIndexPdfUrl)) {
						reparabiliteUrl = frontModel.repairabilityIndexPdfUrl;
					}
					var tempArr = reparabiliteUrl.split("/");
					var reparabiliteFileName = tempArr[tempArr.length-1];
					labelText += `
					<div class="badge-repairability">
						<a class="badge-repairability__link" href="${reparabiliteUrl}" target="_blank" aria-label="Indice de réparabilité" target="_blank" an-tr="pd03_product finder:option-${pageTrack}-repairability index-option_click4"
						an-ca="option click" an-ac="pf product card" an-la="repairability index:${reparabiliteFileName}">
							<div class="image">
								<img class="image__main responsive-img"  data-desktop-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_83x50/${repairabilityIndex}.svg" 
									data-mobile-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_130x78/${repairabilityIndex}.svg" alt="${repairabilityAlt}" role="img" data-comp-name="image">
							</div>
						</a>
					</div>
					`;
				} else {
					labelText += `
					<div class="badge-repairability">
							<a class="badge-repairability__link" href="javascript:;">
								<div class="image">
									<img class="image__main responsive-img"  data-desktop-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_83x50/${repairabilityIndex}.svg" 
										data-mobile-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_130x78/${repairabilityIndex}.svg" alt="${repairabilityAlt}" role="img" data-comp-name="image">
								</div>
							</a>
					</div>
					`;
				}
			}
			// if(isNotNull(thirdPASeller)) {
			// 	labelText += `<p class="seller-info">${thirdPASeller}</p>`;
			// }
			// if(siteCode==="us") {
			// 	var includeText = '';
			// 	var includeStyle = ' style="display:none;"';
			// 	if(useUSEppDiscount && isNotNull(frontModel.prdSavePriceTI) && isNotNull(tsgmt)) {
			// 		includeText += 'Includes '+frontModel.prdSavePriceTI+' '+tsgmt+' Discount';
			// 		includeStyle = '';
			// 	}

			// 	labelText += `<p class="pd03-product-card__epp js-pfv2-us-epp-include-area" ${includeStyle}>${includeText}</p>`;
			// }

				const noDataClass = labelText.trim() === ""? "no-data" : ""
				productCardTemplate = `
				<div class="quick-view__fiche ${noDataClass}">
					${labelText}
				</div>
				`;
			
			return productCardTemplate;
		}


		var buildOptionArea = function(product) {
			var optionItems = "";
			if(isNotNull(product.viewOptionObj) && Object.keys(product.viewOptionObj).length > 0) {
				// 상위 선택된 옵션칩의 model idx : disable 처리 할때 사용 ( idx에 해당되지않으면 disabled )
				var parentOptionModelIdx = "";
				var viewOptionIdx = 0;

				var curViewOptionObj = product.viewOptionObj;
				var curOptionTypeList = product.optionTypeList;
				const optionKeys = [];

				if(isNotNull(product.viewOptionObj['COLOR'])) {
					optionKeys.push("COLOR");
				}

				for(var type in product.viewOptionObj) {
					if(type === "COLOR") {
						continue;
					}
					optionKeys.push(type);
				}

				// for(var type in product.viewOptionObj) {
				for(const type of optionKeys) {
					var optionDataType = "";
					optionDataType = type.toLowerCase().replace(/ /g, "-");

					var optionObj = product.viewOptionObj[type].optionList;

					var isSelected = false;
					var isDisabled = false;
					var currentOption = {};
					var disabledClass = '';

					var selectorWrapperStyle = "";
					if(isNotNull(product.viewOptionObj[type].styleAttr)){
						selectorWrapperStyle = product.viewOptionObj[type].styleAttr;
					}

					var selectedColor = "";
					for(var option in optionObj){
						currentOption = optionObj[option];

						var modelIdxList = currentOption.modelIdx.split(',');
						if(currentOption.modelIdx != null && arrayContains(modelIdxList, String(product.frontModelIdx))){
							selectedColor = currentOption.optionLocalName;
						}
					}

					if(type === "COLOR") {
						var colorOpts = [];
						var curSelecteModelIdx = '';
						for(var option in optionObj) {
							/* 선택되어있는(대표모델) 옵션 flag값 셋팅 */
							currentOption = optionObj[option];
							isSelected = false;
							var modelIdxList = currentOption.modelIdx.split(',');

							if(currentOption.modelIdx != null && arrayContains(modelIdxList, String(product.frontModelIdx))){
								isSelected = true;
								curSelecteModelIdx = currentOption.modelIdx;
								disabledClass = '';
								isDisabled = false;
							} else {
								disabledClass = ' is-disabled';
								isDisabled = true;
								if(viewOptionIdx === 0){
									disabledClass = '';
									isDisabled = false;
								} else {
									var parentModelIdxList = parentOptionModelIdx.split(',');
									for(var mli in modelIdxList){
										//상위 선택된 옵션칩 의 model idx 에 일치하는 model idx 가 있는 경우 활성화
										if(arrayContains(parentModelIdxList, modelIdxList[mli])){
											disabledClass = '';
											isDisabled = false;
											break;
										}
									}
								}
							}

							// 각 옵션칩의 model 정보 셋팅 ( 태깅 )
							var modelCodeAttrForTagging = '';
							var modelNameAttrForTagging = '';

							var modelIdx;

							if(disabledClass == ''){
								var curSelectOptionMoIdx = currentOption.modelIdx;
								var otherSelectedOptionMoIdxList = [];
								var isColorType = true;

								for(var ooi in curViewOptionObj){
									if(ooi != type){
										var tmp_optionList = curViewOptionObj[ooi].optionList;
										for(var toi in tmp_optionList){
											var tmp_option = tmp_optionList[toi];
											var tmp_optionMoIdx = tmp_option.modelIdx;
											var tmp_optionMoIdxArr = tmp_optionMoIdx.split(',');

											// 현재 선택되어있는 option 색출
											if(tmp_optionMoIdxArr.indexOf(String(product.frontModelIdx))>-1){
												otherSelectedOptionMoIdxList.push(tmp_optionMoIdx);
											}
										}

									}
								}

								modelIdx = getSelectedModelIdx(curViewOptionObj, curSelectOptionMoIdx, otherSelectedOptionMoIdxList, isColorType, curOptionTypeList);
								if(product.modelList.length > modelIdx && isNotNull(product.modelList[modelIdx])){
									modelCodeAttrForTagging = ' data-modelcode="'+product.modelList[modelIdx].modelCode+'"';
									modelNameAttrForTagging = ' data-modelname="'+escapeHtml(product.modelList[modelIdx].modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))+'"';
								}
							}
							let colorOpt = "";
								// multi color
								const multiColorYN = currentOption.multiColorYN;
								const multiColorList = currentOption.multiColorList;
								if(multiColorYN === "Y" && multiColorList != null && typeof multiColorList === "object") {
									const optionColorType = multiColorList.optionColorType;
									const optionCodeList = multiColorList.optionCodeList ?? [];
									if(optionColorType === "C1") {
										// 2602 ~ 2617 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const colorPath1 = `<path d="M18,0A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="${color1}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36" height="35.999" viewBox="0 0 36 35.999">
												<g transform="translate(-18.001 9)">
													<rect width="36" height="35.999" transform="translate(18.001 -9)" fill="none" />
													${colorPath1}
													<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="rgba(0,0,0,0.5)" />
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C2_A") {
										// 2620 ~ 2637 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const colorPath1 = `<path d="M-3395,7250a18,18,0,0,1,18-18h0v36h0A18,18,0,0,1-3395,7250Z" transform="translate(3413 -7241)" fill="${color1}" />`;
										const colorPath2 = `<path d="M-3377,7232a18,18,0,0,1,18,18,18,18,0,0,1-18,18Z" transform="translate(3413 -7241)" fill="${color2}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 9)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g>
														${colorPath1}
														${colorPath2}
														<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(17.999 -9)" fill="rgba(0,0,0,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C2_B") {
										// 2640 ~ 2657 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const colorPath1 = `<path d="M-3395,7250a18,18,0,0,1,18-18,18,18,0,0,1,18,18Z" transform="translate(3413 -7241)" fill="${color1}" />`;
										const colorPath2 = `<path d="M-3395,7250h36a18,18,0,0,1-18,18A18,18,0,0,1-3395,7250Z" transform="translate(3413 -7241)" fill="${color2}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 9)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g>
														${colorPath1}
														${colorPath2}
														<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(17.999 -9)" fill="rgba(0,0,0,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C3_A") {
										// 2660 ~ 2678 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const colorPath1 = `<path d="M-1047.672,8501.792a18.1,18.1,0,0,1-1.321-6.168c0-.027,0-.056,0-.083s0-.06,0-.09a18.092,18.092,0,0,1,1.906-8.522c.009-.017.017-.036.028-.053.017-.036.034-.068.051-.1.028-.054.058-.109.085-.162,0,0,0,0,0-.007.109-.205.22-.405.337-.608l0,0a18.019,18.019,0,0,1,1.92-2.717,18.076,18.076,0,0,1,2.2-2.157,18.042,18.042,0,0,1,2.467-1.712,18.109,18.109,0,0,1,2.674-1.264,18.212,18.212,0,0,1,3.76-.967.18.18,0,0,0,.032,0,.045.045,0,0,0,.017,0A18.394,18.394,0,0,1-1031,8477v18h0l-15.583,9A18.227,18.227,0,0,1-1047.672,8501.792Z" transform="translate(1019 -8477.001)" fill="${color1}" />`;
										const colorPath2 = `<path d="M-1049,8494.994h0v-18a18.692,18.692,0,0,1,2.051.115,18.089,18.089,0,0,1,4.971,1.313.644.644,0,0,0,.068.025.02.02,0,0,0,.015.009,17.41,17.41,0,0,1,1.889.95,18.359,18.359,0,0,1,2.047,1.374c.015.013.032.023.047.036s.034.028.051.041a18.122,18.122,0,0,1,4.446,5.135h0a18.843,18.843,0,0,1,.9,1.783l.045.1s0,0,0,0a18.093,18.093,0,0,1,1.462,6.915c0,.023,0,.047,0,.073v.1a18.107,18.107,0,0,1-1.622,7.482l-.032.073c-.009.019-.019.038-.028.058-.22.474-.463.94-.73,1.4Z" transform="translate(1037.001 -8477)" fill="${color2}" />`;
										const colorPath3 = `<path d="M-1034.289,8494.979a18.08,18.08,0,0,1-9.093-2.986c-.017-.013-.036-.023-.053-.036a.663.663,0,0,1-.062-.043,18.052,18.052,0,0,1-4.213-3.972l-.1-.128a18.141,18.141,0,0,1-1.2-1.816l15.589-9,15.585,9a18.048,18.048,0,0,1-2.04,2.858.119.119,0,0,1-.015.016l-.077.089a18.1,18.1,0,0,1-2.673,2.456l-.026.02-.1.077a18.052,18.052,0,0,1-9.792,3.466c-.051,0-.1.007-.158.007a.029.029,0,0,1-.013,0c-.228.009-.458.013-.689.013C-1033.709,8495-1034,8495-1034.289,8494.979Z" transform="translate(1021.412 -8459.007)" fill="${color3}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(27.001 -17.999) rotate(90)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g transform="translate(18 -3.005) rotate(-90)">
														${colorPath1}
														${colorPath2}
														${colorPath3}
														<path d="M18,1A17,17,0,0,0,5.979,30.021,17,17,0,1,0,30.021,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(-30.004 0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C3_B") {
										// 2681 ~ 2699 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const colorPath1 = `<path d="M0,18A18.006,18.006,0,0,1,12,1.024v33.95A18.006,18.006,0,0,1,0,18Z" transform="translate(0 0)" fill="${color1}" />`;
										const colorPath2 = `<path d="M0,34.974V1.024a18.086,18.086,0,0,1,12,0v33.95a18.085,18.085,0,0,1-12,0Z" transform="translate(12 0)" fill="${color2}" />`;
										const colorPath3 = `<path d="M0,16.975A18.007,18.007,0,0,0,12,33.95V0A18.007,18.007,0,0,0,0,16.975Z" transform="translate(36 34.975) rotate(180)" fill="${color3}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 -4)">
													<rect width="36" height="36" transform="translate(18 4)" fill="none" />
													<g transform="translate(17.999 4.001)">
														${colorPath1}
														${colorPath2}
														${colorPath3}
														<path d="M18,35A17,17,0,0,0,30.02,5.979,17,17,0,1,0,5.979,30.019,16.889,16.889,0,0,0,18,35m0,1A18,18,0,1,1,36,18,18,18,0,0,1,18,36Z" transform="translate(0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C3_C") {
										// 2702 ~ 2720 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const colorPath1 = `<path d="M0,18A18.006,18.006,0,0,1,12,1.024v33.95A18.006,18.006,0,0,1,0,18Z" transform="translate(0 0)" fill="${color1}" />`;
										const colorPath2 = `<path d="M0,34.974V1.024a18.086,18.086,0,0,1,12,0v33.95a18.085,18.085,0,0,1-12,0Z" transform="translate(12 0)" fill="${color2}" />`;
										const colorPath3 = `<path d="M0,16.975A18.007,18.007,0,0,0,12,33.95V0A18.007,18.007,0,0,0,0,16.975Z" transform="translate(36 34.975) rotate(180)" fill="${color3}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">
												<g transform="translate(-18 -4)">
													<rect width="36" height="36" transform="translate(18 4)" fill="none" />
													<g transform="translate(53.999 4) rotate(90)">
														${colorPath1}
														${colorPath2}
														${colorPath3}
														<path d="M18,35A17,17,0,0,0,30.02,5.979,17,17,0,1,0,5.979,30.019,16.889,16.889,0,0,0,18,35m0,1A18,18,0,1,1,36,18,18,18,0,0,1,18,36Z" transform="translate(0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C4_A") {
										// 2723 ~ 2742 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const color4 = optionCodeList.length > 3? optionCodeList[3]: "";
										const colorPath1 = `<path d="M-3395,7250a18,18,0,0,1,18-18v18Z" transform="translate(3413 -7241)" fill="${color1}" />`;
										const colorPath2 = `<path d="M-3377,7250v-18a18,18,0,0,1,18,18Z" transform="translate(3413 -7241)" fill="${color2}" />`;
										const colorPath3 = `<path d="M-3377,7250h18a18,18,0,0,1-18,18Z" transform="translate(3413 -7241)" fill="${color3}" />`;
										const colorPath4 = `<path d="M-3395,7250h18v18h0A18,18,0,0,1-3395,7250Z" transform="translate(3413 -7241)" fill="${color4}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 9)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g>
														${colorPath1}
														${colorPath2}
														${colorPath3}
														${colorPath4}
														<path d="M18,35A17,17,0,0,0,30.02,5.979,17,17,0,1,0,5.979,30.019,16.889,16.889,0,0,0,18,35m0,1A18,18,0,1,1,36,18,18,18,0,0,1,18,36Z" transform="translate(0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "CP") {
										// 2745 ~ 2766 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const color4 = optionCodeList.length > 3? optionCodeList[3]: "";
										const color5 = optionCodeList.length > 4? optionCodeList[4]: "";
										const color6 = optionCodeList.length > 5? optionCodeList[5]: "";
										const colorPath1 = `<path d="M1.333,15.8A18.1,18.1,0,0,1,.01,9.628c0-.027,0-.055,0-.082s0-.06,0-.089A18.086,18.086,0,0,1,1.91.935L1.938.88l.053-.1L2.074.614l0-.007Q2.239.3,2.413,0L18,9,2.413,18A18.157,18.157,0,0,1,1.333,15.8Z" transform="translate(-30.005 8.994)" fill="${color1}" />`;
										const colorPath2 = `<path d="M0,9A17.9,17.9,0,0,1,6.584,2.41,18.351,18.351,0,0,1,9.257,1.145a18.061,18.061,0,0,1,3.667-.95l.132-.019.019,0A18.137,18.137,0,0,1,15.582,0V18Z" transform="translate(-27.587 0)" fill="${color2}" />`;
										const colorPath3 = `<path d="M0,18V0A18.223,18.223,0,0,1,2.05.115,18.011,18.011,0,0,1,7.021,1.427l.068.026a.028.028,0,0,0,.015.008,17.506,17.506,0,0,1,1.89.949,18.328,18.328,0,0,1,2.047,1.376l.046.035.052.041A18.106,18.106,0,0,1,15.585,9Z" transform="translate(-12.003 0)" fill="${color3}" />`;
										const colorPath4 = `<path d="M0,9,15.583,0a18.31,18.31,0,0,1,.9,1.785l.045.1v0A18.087,18.087,0,0,1,18,8.808c0,.023,0,.048,0,.072s0,.064,0,.1a18.082,18.082,0,0,1-1.621,7.483l-.033.073-.027.058q-.332.71-.731,1.4Z" transform="translate(-12.004 8.997)" fill="${color4}" />`;
										const colorPath5 = `<path d="M0,0,15.585,9a18.082,18.082,0,0,1-2.041,2.858l-.014.016-.078.089a18.166,18.166,0,0,1-2.672,2.457l-.027.02-.1.075A18.057,18.057,0,0,1,.86,17.979L.7,17.986H.688C.46,18,.23,18,0,18Z" transform="translate(-12.005 17.994)" fill="${color5}" />`;
										const colorPath6 = `<path d="M14.717,17.98a18.082,18.082,0,0,1-9.094-2.987l-.054-.036-.062-.042A18.087,18.087,0,0,1,1.3,10.942h0l-.1-.127A18.134,18.134,0,0,1,0,9L15.589,0V18C15.3,18,15.006,17.994,14.717,17.98Z" transform="translate(-27.593 17.993)" fill="${color6}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 9)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g>
														${colorPath1}
														${colorPath2}
														${colorPath3}
														${colorPath4}
														${colorPath5}
														${colorPath6}
														<path d="M18,1A17,17,0,0,0,5.979,30.021,17,17,0,1,0,30.021,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(-30.004 0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else {
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36" height="35.999" viewBox="0 0 36 35.999">
												<g transform="translate(-18.001 9)">
													<rect width="36" height="35.999" transform="translate(18.001 -9)" fill="none" />
													<path d="M18,0A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="${currentOption.optionCode}" />
													<!--/* [D] 제일 마지막 태그인 path의 fill 속성 값 변경 제외 */-->
													<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="rgba(0,0,0,0.5)" />
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									}
								} else {
									colorOpt = `
									<span class="option-selector-v2__color-code">
										<svg xmlns="http://www.w3.org/2000/svg" width="36" height="35.999" viewBox="0 0 36 35.999">
											<g transform="translate(-18.001 9)">
												<rect width="36" height="35.999" transform="translate(18.001 -9)" fill="none" />
												<path d="M18,0A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="${currentOption.optionCode}" />
												<!--/* [D] 제일 마지막 태그인 path의 fill 속성 값 변경 제외 */-->
												<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="rgba(0,0,0,0.5)" />
											</g>
										</svg>
										<span class="hidden">${currentOption.optionLocalName}</span>
										${isSelected? '' : '<span class="blind">selected</span>'}
									</span>
									`;
								}
								const colorSlide = `
									<div class="option-selector-v2__swiper-slide ${isSelected? 'is-checked' : ''} ${disabledClass}" role="listitem">
										<button type="button" class="option-selector-v2__color js-pfv2-product-fmychip" ${isDisabled? 'disabled' : ''} data-chiptype="color" data-modeli="${modelIdx}"
										an-tr="pd03_product finder:option-${pageTrack}-text-option" an-ca="option click" an-ac="pf product card"
										an-la="${type.toLowerCase()}:${currentOption.optionName.toLowerCase()}" ${modelCodeAttrForTagging} ${modelNameAttrForTagging}>
											${colorOpt}
										</button>
									</div>
									`;
							colorOpts.push(colorSlide);
						}
						optionItems += `
						<div class="option-selector-v2__color-name">${Granite.I18n.get("Color")} : 
							<button type="button" class="option-selector-v2__color-name-text">
								<strong class="hidden" data-global-text='{"Expand" : "${Granite.I18n.get("Click to Expand")}", "Collapse" : "${Granite.I18n.get("Click to Collapse")}"}'>${Granite.I18n.get("Click to Collapse")}</strong>
								<strong class="option-selector-v2__color-name-text-in">${selectedColor}</strong>
							</button>
							<div class="option-selector-v2__color-tooltip">
								${Granite.I18n.get("Color")} : <strong class="option-selector-v2__color-tooltip-text">${selectedColor}</strong>
								<a href="javascript:void(0)" class="option-selector-v2__color-tooltip-close" role="button">
									<span class="hidden">Close</span>
									<svg class="icon icon-close" focusable="false" aria-hidden="true">
										<use xlink:href="#delete-bold" href="#delete-bold"></use>
									</svg>
								</a>
							</div>
						</div>
						<div class="option-selector-v2__wrap option-selector-v2__wrap--color-chip" data-global-text='{ "selected" : "${Granite.I18n.get("Selected")}" }'>
							<div class="option-selector-v2__swiper">
								<!-- (2021.07.07 수정) aria-live="polite" 삭제 -->
								<div class="option-selector-v2__swiper-container">
									<!-- (2021.07.07 수정) role="list" 추가 -->
									<div class="option-selector-v2__swiper-wrapper" role="list" style="${selectorWrapperStyle}">
										${colorOpts.join("")}
									</div>
								</div>
							</div>
						</div>
						`;
						parentOptionModelIdx = curSelecteModelIdx;
					} else {
						var otherOpts = [];
						var curSelecteModelIdx = '';
						for(var oi=0; oi < optionObj.length; oi++) {
							/* 선택되어있는(대표모델) 옵션 flag값 셋팅 */
							currentOption = optionObj[oi];
							isSelected = false;
							var modelIdxList = currentOption.modelIdx.split(',');
							if(currentOption.modelIdx != null && arrayContains(modelIdxList, String(product.frontModelIdx))){
								isSelected = true;
								curSelecteModelIdx = currentOption.modelIdx;
								disabledClass = '';
								isDisabled = false;
							} else {
								disabledClass = ' is-disabled';
								isDisabled = true;
								if(viewOptionIdx === 0){
									disabledClass = '';
									isDisabled = false;
								} else {
									var parentModelIdxList = parentOptionModelIdx.split(',');

									for(var mli in modelIdxList){
										//상위 선택된 옵션칩 의 model idx 에 일치하는 model idx 가 있는 경우 활성화
										if(arrayContains(parentModelIdxList, modelIdxList[mli])){
											disabledClass = '';
											isDisabled = false;
											break;
										}
									}
								}
							}

							// 각 옵션칩의 model 정보 셋팅 ( 태깅 )
							var modelCodeAttrForTagging = '';
							var modelNameAttrForTagging = '';

							var modelIdx;

							// 각 옵션칩의 model 정보 셋팅 ( 태깅 )
							var modelCodeAttrForTagging = '';
							var modelNameAttrForTagging = '';

							var modelIdx;

							if(disabledClass == ''){
								var curSelectOptionMoIdx = currentOption.modelIdx;
								var otherSelectedOptionMoIdxList = [];
								var isColorType = false;

								for(var ooi in curViewOptionObj){
									if(ooi != type){
										var tmp_optionList = curViewOptionObj[ooi].optionList;
										for(var toi in tmp_optionList){
											var tmp_option = tmp_optionList[toi];
											var tmp_optionMoIdx = tmp_option.modelIdx;
											var tmp_optionMoIdxArr = tmp_optionMoIdx.split(',');

											// 현재 선택되어있는 option 색출
											if(tmp_optionMoIdxArr.indexOf(String(product.frontModelIdx))>-1){
												otherSelectedOptionMoIdxList.push(tmp_optionMoIdx);
											}
										}

									}
								}

								modelIdx = getSelectedModelIdx(curViewOptionObj, curSelectOptionMoIdx, otherSelectedOptionMoIdxList, isColorType, curOptionTypeList);

								if(product.modelList.length > modelIdx && isNotNull(product.modelList[modelIdx])){
									modelCodeAttrForTagging = ' data-modelcode="'+product.modelList[modelIdx].modelCode+'"';
									modelNameAttrForTagging = ' data-modelname="'+escapeHtml(product.modelList[modelIdx].modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))+'"';
								}
							}
							var otherOpt = `
							<div class="option-selector-v2__swiper-slide ${isSelected? 'is-checked' : ''} ${disabledClass}" role="listitem">
								<button type="button" class="option-selector-v2__size js-pfv2-product-fmychip" ${isDisabled? 'disabled' : ''} data-chiptype="other" data-modeli="${modelIdx}"
								an-tr="pd03_product finder:option-${pageTrack}-text-option" an-ca="option click" an-ac="pf product card"
								an-la="${type.toLowerCase()}:${currentOption.optionName.toLowerCase()}" ${modelCodeAttrForTagging} ${modelNameAttrForTagging}>
									<span class="option-selector-v2__size-text">${currentOption.optionLocalName}</span>
									${isSelected? '' : '<span class="blind">selected</span>'}
								</button>
							</div>
							`;
							otherOpts.push(otherOpt);
						}
						if(optionObj.length > 0) {
							optionItems += `
							<div class="option-selector-v2__wrap option-selector-v2__wrap--capacity" data-global-text='{ "selected" : "${Granite.I18n.get("Selected")}" }'>
								<div class="option-selector-v2__swiper">
									<!-- (2021.07.07 수정) aria-live="polite" 삭제 -->
									<div class="option-selector-v2__swiper-container">
										<!-- (2021.07.07 수정) role="list" 추가 -->
										<div class="option-selector-v2__swiper-wrapper" role="list" style="${selectorWrapperStyle}">
											${otherOpts.join("")}
										</div>
									</div>
								</div>
							</div>
							`;
						}
					}

					viewOptionIdx++;
				}
			}
			var optionItemsTemplate = isNotNull(optionItems.trim())? `
			<!-- (2021.04.14 수정) .option-selector-v2__color-text 추가 -->
			<div class="option-selector-v2 option-selector-v2__color-text">
				<!--/* 초기 생성 : .option-selector-v2__wrap하위 .option-selector-v2__swiper-slide에 .is-checked 가 붙어 있는 경우는 해당 슬라이드가 활성화 됨
					.option-selector-v2__wrap를 다시 그리는 경우, 기존 상태를 유지하려면 .option-selector-v2__swiper-wrapper 의 inline style값을
					.option-selector-v2__swiper-wrapper의 style에 동일하게 부여한 뒤, window.sg.common.optionSelectorV2.reInit(새로 그린 .option-selector-v2__wrap); 호출
					단!!! .option-selector-v2를 감싸는 component가 있고 해당 component를 reInit하는 경우는 위의 함수를 호출 하지 않아도 됨
				*/-->
				${optionItems}
			</div>
			`: "";

			const noDataClass = optionItems.trim() === ""? "no-data" : "";

			var productCardTemplate = siteCode !== "us"? `
			<div class="quick-view__option-selector ${noDataClass}">
				${optionItemsTemplate}
			</div>
			`: "";
			return productCardTemplate;
		}


		var buildOfferArea = function(product, emiPrice) {
			var frontModel = product.modelList[product.frontModelIdx];

			// var useNationalFlag = false;
			// var nationalFlagHtml = "";

			var usePricePeriod = false;
			var pricePeriodHtml = "";

			var itemCnt = 0;

			// var useUSP = false;

			// var totalFeatureCnt = 0;
			var totalFeatureArr = [];
			var featureItems = [];

			// if(!isGPv2 && !isHybrisIntg && !isNewHybris && isNotNull(frontModel.nationalFlags)) {
			// 	var nationalFlagArr = frontModel.nationalFlags.split(",");
			// 	if(nationalFlagArr.length > 0) {
			// 		useNationalFlag = true;
			// 		var flags = [];
			// 		for(var nfi in nationalFlagArr) {
			// 			var nationalName = nationalFlagArr[nfi].toLowerCase();
			// 			if(nationalName === "congo") {
			// 				nationalName = 'national-flags-04';
			// 			} else if(nationalName === "benin") {
			// 				nationalName = 'national-flags-05';
			// 			}
			// 			flags.push(`<div class="pd03-product-card__flags ${nationalName}"></div>`);
			// 		}
			// 		nationalFlagHtml = `
			// 		<div class="pd03-product-card__national-flags">${flags.join("")}</div>
			// 		`;
			// 	}
			// }

			// if(isGPv2 || isNewHybris) {
			// 	pricePeriodHtml += '<div class="pd03-product-card__additional-info">';
			// 	if(isNotNull(frontModel.pricePeriodInfo)){
			// 		totalFeatureCnt++;
			// 		usePricePeriod = true;
			// 		itemCnt++;
			// 		pricePeriodHtml += '<div class="pd03-product-card__description">' + frontModel.pricePeriodInfo + '</div>';
			// 	}
			// 	pricePeriodHtml += '</div>';
			// }

			var buildOfferItem = function(featureTxt, featureIconHtml) {
				if(typeof featureIconHtml === 'undefined' || featureIconHtml === null) {
					featureIconHtml = "";
				}
				var featureItem = `
				<div class="quick-view__offer">
					${featureIconHtml}
					<span class="quick-view__offer-text">${featureTxt}</span>
				</div>
				`;
				return featureItem;
			}

			if(!isNonShop && frontModel.ctaTypeUpperCase === "LEARNMORE"){

				var frontModel = product.modelList[product.frontModelIdx];
				const selectedOptions = [];
				const refinedFeatureArray = [];
				const refinedSpecArray = [];
				const keySummary = frontModel.keySummary;
				const pimLength = 4; // 퀵뷰 미판매시 offer 최대 노출 개수 4개
	
				if(isNotNull(keySummary)) {
					const filteredSpec = keySummary.filter(item => item.displayType.toLowerCase() === 'spec');
					filteredSpec.forEach(item => {
						const specName = item.key;
						const specValue = item.value;
						const option = `
						<div class="quick-view__offer">
							<span class="quick-view__offer-text">
							${specName}	${specValue}
							</span>
						</div>
						`;
						refinedSpecArray.push(option);
					});
				}
	
				if(isNotNull(keySummary)) {
					const filteredSpec = keySummary.filter(item => item.displayType.toLowerCase() === 'feature');
					filteredSpec.forEach(item => {
						const title = item.title;
						const option = `
						<div class="quick-view__offer">
							<span class="quick-view__offer-text">
							${title}
							</span>
						</div>
						`;
						refinedFeatureArray.push(option);
					});
				}
	
				// if(isNotNull(frontModel.usp) > 0) {
				// 	for(var uspi in frontModel.usp) {
				// 		const option = `
				// 		<li class="quick-view__feature-item" role="listitem">
				// 			<span class="quick-view__feature-text">
				// 			${frontModel.usp[uspi]}
				// 			</span>
				// 		</li>`;
				// 		uspArray.push(option);
				// 	}
				// }
	
				// Feature
				for(let idx = 0; idx < refinedFeatureArray.length; idx++) {
					const option = refinedFeatureArray[idx];
					selectedOptions.push(option);
				}
				// SPEC
				for(let idx = 0; idx < refinedSpecArray.length; idx++) {
					const option = refinedSpecArray[idx];
					selectedOptions.push(option);
				}
	
				var featureOptionList = "";
				var optCount = 0;
				for(const opt of selectedOptions) {
					if(optCount >= pimLength) {
						break;
					}
					featureOptionList += opt;
					optCount++;
				}
	

				var productCardTemplate = selectedOptions.length > 0? `
				<div class="quick-view__offers no-sale">
				<p class="quick-view__offers-title">${Granite.I18n.get("Key feature")}</p>
					<ul class="quick-view__offer-list" role="list">
					${featureOptionList}
					</ul>
				</div>
				` : "";

				return productCardTemplate;
				
			} else{
				if(!shopPromoOnlyFl) {
					if(isGPv2 || isNewHybris) {
				// 		/*
				// 		 * 예2) buyBackDesc > financeInfoAmount > financing > tradeIn > upgrade > premiumCare > storePromotions
				// 		*/
				// 		var tradeInDesc = [];
				// 		var financingDesc = [];
				// 		var upgradeDesc = [];
				// 		var premiumCareDesc = [];

				// 		// tradeIn
				// 		if(frontModel.tradeInFormattedDesc != null && frontModel.tradeInFormattedDesc.length > 0) {
				// 			tradeInDesc = frontModel.tradeInFormattedDesc;
				// 		} else {
				// 			tradeInDesc = frontModel.tradeInDesc;
				// 		}

				// 		// upgrade
				// 		if(frontModel.upgradeFormattedDesc != null && frontModel.upgradeFormattedDesc.length > 0) {
				// 			upgradeDesc = frontModel.upgradeFormattedDesc;
				// 		} else {
				// 			upgradeDesc = frontModel.upgradeDesc;
				// 		}

				// 		// premiumCare
				// 		if(frontModel.premiumCareFormattedDesc != null && frontModel.premiumCareFormattedDesc.length > 0){
				// 			premiumCareDesc = frontModel.premiumCareFormattedDesc;
				// 		} else {
				// 			premiumCareDesc = frontModel.premiumCareDesc;
				// 		}

				// 		// financing
				// 		if(frontModel.financingFormattedDesc != null && frontModel.financingFormattedDesc.length > 0){
				// 			financingDesc = frontModel.financingFormattedDesc;
				// 		} else {
				// 			financingDesc = frontModel.financingDesc;
				// 		}

				// 		// buyback
				// 		if(siteCode=="in" && frontModel.buyBackDesc != null) {
				// 			featureItems.push(buildOfferItem(frontModel.buyBackDesc));
				// 		}

				// 		// finance info
				// 		if(isNotNull(frontModel.financeInfoAmount) && isNotNull(frontModel.financeInfoValue)) {
				// 			var financeText = Granite.I18n.get("Enjoy the flagship experience at only {0} for {1} month",[currencyComma(frontModel.financeInfoAmount, pfPriceCurrency), frontModel.financeInfoValue]);
				// 			featureItems.push(buildOfferItem(financeText));
				// 		}

				// 		// financing
				// 		if(isNotNull(financingDesc) && financingDesc.length > 0 && itemCnt < 4 && siteCode !== "us") {
				// 			// uk financingDesc 제거
				// 			for(var fdi in financingDesc){
				// 				var iconHtml =
				// 					'<svg class="icon quick-view__offer-icon" focusable="false">'+
				// 						'<use xlink:href="#finance-regular" href="#finance-regular"></use>'+
				// 					'</svg>';
				// 				var financingHtml = financingDesc[fdi];

				// 				if(fdi == 0){
				// 					if(isNotNull(emiPrice)){
				// 						if((siteCode === "in" || siteCode === "uk" || siteCode === "id" || siteCode === "ee" || siteCode === "lv" || siteCode === "lt" || siteCode === "pl" ) && isNotNull(emiUrl) && frontModel.financing == "Y"){					//new-hybris
				// 						financingHtml =
				// 								'<a class="product-card-v2__feature-cta js-pfv2-calculate-popup-open" data-type="install" data-modelcode="'+frontModel.shopSkuCode+'"'+
				// 								' href="javascript:;" title="'+Granite.I18n.get("Calculate Finance")+'" data-link_info="'+emiUrl+'/?sku=' + frontModel.shopSkuCode + '&price=' + emiPrice + '&page=pf"'+
				// 								' an-tr="pd03_product finder:option-'+pageTrack+'-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">'+
				// 									financingDesc[fdi]+
				// 								'</a>';
				// 						} else if(siteCode !== "in" && siteCode !== "uk" && isNotNull(financingUrl)){
				// 							var financeLayerUrl = financingUrl;
				// 							if(siteCode !== "de"){
				// 								financeLayerUrl +='/?total='+ emiPrice +'&page=pf';
				// 							}
				// 							if(siteCode!=="fr"){
				// 								financingHtml =
				// 									'<a class="product-card-v2__feature-cta js-pfv2-calculate-popup-open" data-type="install"';
				// 									if(isNewHybris){		//new-hybris
				// 										financingHtml +=
				// 										' data-modelcode="'+frontModel.shopSkuCode+'"';
				// 									}
				// 									financingHtml +=
				// 									' href="javascript:;" aria-label="'+Granite.I18n.get("Calculate Finance")+'" data-link_info="'+financeLayerUrl+'"'+
				// 										' an-tr="pd03_product finder:option-'+pageTrack+'-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">'+
				// 											financingDesc[fdi]+
				// 										'</a>';
				// 							}else{
				// 								financingHtml = financingDesc[fdi];
				// 							}
				// 						}
				// 					}
				// 				}

				// 				featureItems.push(buildOfferItem(financingHtml, iconHtml));
				// 			}
				// 		}

				// 		// trade in
				// 		if(isNotNull(tradeInDesc) && tradeInDesc.length > 0) {
				// 			for(var tdi in tradeInDesc) {
				// 				featureItems.push(buildOfferItem(tradeInDesc[tdi]));
				// 			}
				// 		}

				// 		// upgrade
				// 		if(isNotNull(upgradeDesc) && upgradeDesc.length > 0) {
				// 			for(var udi in upgradeDesc) {
				// 				featureItems.push(buildOfferItem(upgradeDesc[udi]));
				// 			}
				// 		}

				// 		// premium care
				// 		if(isNotNull(premiumCareDesc) && premiumCareDesc.length > 0) {
				// 			for(var pdi in premiumCareDesc) {
				// 				featureItems.push(buildOfferItem(premiumCareDesc[pdi]));
				// 			}
				// 		}

						// store promotions
						if(isNotNull(frontModel.storePromotions) && frontModel.storePromotions.length > 0) {
							for(var spi in frontModel.storePromotions) {
								var storePromotionTxt = "";
								if(frontModel.storePromotions[spi].promotionFormattedText != null) {
									storePromotionTxt = frontModel.storePromotions[spi].promotionFormattedText;
								} else {
									storePromotionTxt = frontModel.storePromotions[spi].promotionText;
								}
								var iconHtml =
									'<svg class="icon quick-view__offer-icon" focusable="false">'+
										'<use xlink:href="#shopping-deal-regular" href="#shopping-deal-regular"></use>'+
									'</svg>';
								featureItems.push(buildOfferItem(storePromotionTxt, iconHtml));
							}
						}
					} else if(isHybrisIntg) {
				// 		/*
				// 		 * 예1) tradeIn > financing >  upgrade > premiumCare > storePromotions
				// 		*/

				// 		// trade in
				// 		if(frontModel.tradeIn === "Y" && isNotNull(frontModel.tradeInDesc)) {
				// 			featureItems.push(buildOfferItem(frontModel.tradeInDesc));
				// 		}

				// 		// financing
				// 		if(frontModel.financing === "Y" && isNotNull(frontModel.financingDesc)) {
				// 			var iconHtml =
				// 				'<svg class="icon quick-view__offer-icon" focusable="false">'+
				// 					'<use xlink:href="#finance-regular" href="#finance-regular"></use>'+
				// 				'</svg>';

				// 			var financingHtml = frontModel.financingDesc;

				// 			if(isNotNull(emiPrice) && isNotNull(financingUrl)){
				// 				var financeLayerUrl = financingUrl +'/?total='+ emiPrice +'&page=pf';

				// 				financingHtml =
				// 					'<a class="product-card-v2__feature-cta js-pfv2-calculate-popup-open" data-type="install"'+
				// 					' href="javascript:;" aria-label="'+Granite.I18n.get("Calculate Finance")+'" data-link_info="'+financeLayerUrl+'"'+
				// 					' an-tr="pd03_product finder:option-'+pageTrack+'-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">'+
				// 						frontModel.financingDesc+
				// 					'</a>';
				// 			}

				// 			featureItems.push(buildOfferItem(financingHtml, iconHtml));
				// 		}

				// 		// upgrade
				// 		if(frontModel.upgrade === "Y" && isNotNull(frontModel.upgradeDesc)) {
				// 			featureItems.push(buildOfferItem(frontModel.upgradeDesc));
				// 		}

				// 		// premium care
				// 		if(frontModel.premiumCare === "Y" && isNotNull(frontModel.premiumCareDesc)) {
				// 			featureItems.push(buildOfferItem(frontModel.premiumCareDesc));
				// 		}

						// store promotions
						if(isNotNull(frontModel.storePromotions) && frontModel.storePromotions.length > 0) {
							for(var spi in frontModel.storePromotions) {
								var iconHtml =
									'<svg class="icon quick-view__offer-icon" focusable="false">'+
										'<use xlink:href="#shopping-deal-regular" href="#shopping-deal-regular"></use>'+
									'</svg>';
								featureItems.push(buildOfferItem(frontModel.storePromotions[spi], iconHtml));
							}
						}
				// 	} else {
				// 		if(isNotNull(frontModel.marketingMessage) && frontModel.marketingMessage.length > 0) {
				// 			for(var mmi in frontModel.marketingMessage) {
				// 				featureItems.push(buildOfferItem(frontModel.marketingMessage[mmi]));
				// 			}
				// 		}
					} else if(isOldHybris) {
						// store promotions
						if(isNotNull(frontModel.salesText) && frontModel.salesText.length > 0) {
							for(var spi in frontModel.salesText) {
								var iconHtml =
									'<svg class="icon quick-view__offer-icon" focusable="false">'+
										'<use xlink:href="#shopping-deal-regular" href="#shopping-deal-regular"></use>'+
									'</svg>';
								featureItems.push(buildOfferItem(frontModel.salesText[spi], iconHtml));
							}
						}
					}
				var featureHtml = "";
				var benefitWrap = "";
				if(featureItems.length > 0) {
					benefitWrap = `
					<div class="quick-view__offers">
					<p class="quick-view__offers-title">${Granite.I18n.get("Offer")}</p>
						${featureItems.join("")}
					</div>
					`;
				}else{
					benefitWrap = `
					<div class="quick-view__offers no-data"></div>
					`;
				}
				featureHtml = benefitWrap;

				var productCardTemplate = featureHtml;

				return productCardTemplate;
				}
			}

			// for(const localBenefitItem of localBenefitList) {
			// 	const localBenefitText = localBenefitItem.localBenefitText;
			// 	const localBenefitIconType = localBenefitItem.localBenefitIconType;
			// 	const iconId = localBenefitIcons[localBenefitIconType] ?? "";
			// 	const localBenefitImgAltText = localBenefitItem.localBenefitImgAltText;
			// 	const localBenefitImgUrl = pfImgDomain(localBenefitItem.localBenefitImgUrl, "key-feature");
			// 	// const iconHtml = `<img class="image__main lazy-load responsive-img" data-desktop-src="${localBenefitImgUrl}" data-mobile-src="${localBenefitImgUrl}" alt="${localBenefitImgAltText}">`;
			// 	const iconHtml = iconId !== ""?
			// 			`<svg class="icon" focusable="false"><use xlink:href="${iconId}" href="${iconId}"></use></svg>` :
			// 			`<img class="image__main lazy-load responsive-img" data-desktop-src="${localBenefitImgUrl}" data-mobile-src="${localBenefitImgUrl}" alt="${localBenefitImgAltText}">`;

			// 	// totalFeatureCnt++;
			// 	// totalFeatureArr.push(localBenefitText);
			// 	// if(itemCnt < 4) {
			// 	// 	itemCnt++;
			// 	// 	featureItems.push(buildOfferItem(localBenefitText, iconHtml));
			// 	// }
			// 	featureItems.push(buildOfferItem(localBenefitText, iconHtml));

			// }



			// if(usePricePeriod) {
			// 	totalFeatureArr.push(frontModel.pricePeriodInfo);
			// }

			// var featureHtml = "";
			// if(!shopPromoOnlyFl) {
			// 	var benefitWrap = "";
			// 	if(featureItems.length > 0) {
			// 		benefitWrap = `
			// 		<div class="quick-view__offers">
			// 		<p class="quick-view__offers-title">Offer</p>
			// 			${featureItems.join("")}
			// 		</div>
			// 		`;
			// 	}
			// 	featureHtml = benefitWrap;
			// }

			var productCardTemplate = featureHtml;
			// if(useNationalFlag) {
			// 	productCardTemplate += nationalFlagHtml;
			// }
			return productCardTemplate;
		}


		var buildFeatureArea = function(product) {
			var frontModel = product.modelList[product.frontModelIdx];
			const selectedOptions = [];

			const categorizedGroupDataArray = [];
			const uspArray = [];
			const refinedFeatureArray = [];
			const refinedSpecArray = [];
			const keySummary = frontModel.keySummary;
			const pimLength = 3; // 최대 노출 개수는 3개
//			if(categoryGroupCode === GROUPCODE_HA && isNotNull(frontModel.standardKeySpecValue)) {
//				// DA는 Categorized group data 사용.
//				// 아직 api 개발 안 된 상태
//				// Categorized Group Data는 아이콘을 사용한다.
//				// const option = `<li class="pd03-product-card__spec-item" role="listitem">${specName} : <span class="pd03-product-card__spec-text">${specValue}</span></li>`;
//				for(const cgd of frontModel.standardKeySpecValue) {
//					if(typeof cgd === 'string') {
//						const option = `
//						<li class="quick-view__feature-item" role="listitem">${cgd}</li>
//						`;
//						categorizedGroupDataArray.push(option);
//					} else if(typeof cgd === 'object') {
//						const key = cgd.key;
//						const value = cgd.value;
//						const option = `
//						<li class="quick-view__feature-item" role="listitem">
//							<span class="quick-view__feature-text">${key} : ${value}</span>
//						</li>
//						`;
//						categorizedGroupDataArray.push(option);
//					}
//				}
//			}

			if(isNotNull(keySummary)) {
				const filteredSpec = keySummary.filter(item => item.displayType.toLowerCase() === 'spec');
				filteredSpec.forEach(item => {
					const specName = item.key;
					const specValue = item.value;
					const option = `
					<li class="quick-view__feature-item" role="listitem">
						<span class="quick-view__feature-text">
							${specName} ${specValue}
						</span>
					</li>
					`;
					refinedSpecArray.push(option);
				});
			}

			if(isNotNull(keySummary)) {
				const filteredSpec = keySummary.filter(item => item.displayType.toLowerCase() === 'feature');
				filteredSpec.forEach(item => {
					const title = item.title;
					const option = `
					<li class="quick-view__feature-item" role="listitem">
						<span class="quick-view__feature-text">
						${title}
						</span>
					</li>
					`;
					refinedFeatureArray.push(option);
				});
			}

			const tmpUsp = (isGPv2 || isHybrisIntg || isNewHybris)? frontModel.usp : frontModel.uspDescription;
			if(isNotNull(tmpUsp) && tmpUsp.length > 0) {
				for(var uspi in tmpUsp) {
					const option = `
					<li class="quick-view__feature-item" role="listitem">
						<span class="quick-view__feature-text">
						${tmpUsp[uspi]}
						</span>
					</li>`;
					uspArray.push(option);
				}
			}

//			//categorizedGroupDataArray
//			for(let idx = 0; idx < categorizedGroupDataArray.length; idx++) {
//				const option = categorizedGroupDataArray[idx];
//				selectedOptions.push(option);
//			}

			// USP
			for(let idx = 0; idx < uspArray.length; idx++) {
				const option = uspArray[idx];
				selectedOptions.push(option);
			}

			// Feature
			for(let idx = 0; idx < refinedFeatureArray.length; idx++) {
				const option = refinedFeatureArray[idx];
				selectedOptions.push(option);
			}
			// SPEC
			for(let idx = 0; idx < refinedSpecArray.length; idx++) {
				const option = refinedSpecArray[idx];
				selectedOptions.push(option);
			}

			var featureOptionList = "";
			var optCount = 0;
			for(const opt of selectedOptions) {
				if(optCount >= pimLength) {
					break;
				}
				featureOptionList += opt;
				optCount++;
			}

			var productCardTemplate = selectedOptions.length > 0? `
			<div class="quick-view__feature">
				<ul class="quick-view__feature-list" role="list">
				${featureOptionList}
				</ul>
			</div>
			` : `
			<div class="quick-view__feature no-data"></div>
			`;
			// var productCardTemplate = optionList;
			return productCardTemplate;
		}


		var buildSpecArea = function(product) {
			var frontModel = product.modelList[product.frontModelIdx];
			// console.log("frontModel>>>>>", frontModel);
			const selectedOptions = [];

			const specDetails = frontModel.specDetail;
			let specItems = [];
			if(specDetails.length > 0) {
				const specDetail = specDetails[0];
				if(isNotNull(specDetail)) {
					const spec = specDetail.spec;
					if(isNotNull(spec)) {
						specItems = spec.specItems ?? [];
					}
				}
			}
			for(const specItem of specItems) {
				const attrs = specItem.attrs ?? [];
				for(const attr of attrs) {
					const attributesName = attr.attrName;
					const attributesValue = attr.attrValue;
					const option = `
					<li class="quick-view__spec-row" role="listitem">
						<div class="quick-view__spec-title">
							<p>${attributesName}</p>
						</div>
						<p class="quick-view__spec-text">${attributesValue}</p>
					</li>
					`;
					selectedOptions.push(option);
				}
			}
			// const specHighlight = frontModel.specHighlight;

			// if(isNotNull(specHighlight)) {
			// 	specHighlight.forEach(item => {
			// 		const attributesName = item.attributesName;
			// 		const specIconValue = item.specIconValue;
			// 		const option = `
			// 		<li class="quick-view__spec-row" role="listitem">
			// 			<div class="quick-view__spec-title">
			// 				<p>${attributesName}</p>
			// 			</div>
			// 			<p class="quick-view__spec-text">${specIconValue}</p>
			// 		</li>
			// 		`;
			// 		selectedOptions.push(option);
			// 	});
			// }

			var optionList = selectedOptions.length > 0? `
			<ul class="quick-view__spec" role="list">
				${selectedOptions.join("")}
			</ul>
			` : `
			<ul class="quick-view__spec no-data" role="list"></ul>
			<div class="quick-view__spec-cta no-data"></div>
			`;

			var viewMoreCta = selectedOptions.length > 2? `
			<div class="quick-view__spec-cta">
				<button type="button" class="cta cta--outlined cta--black cta--icon"
					data-text-more="${Granite.I18n.get("View more")}" data-text-less="${Granite.I18n.get("Hide all")}">
					<span>${Granite.I18n.get("View more")}</span>
					<svg class="icon" focusable="false" aria-hidden="true">
						<use xlink:href="#open-down-bold" href="#open-down-bold"></use>
					</svg>
				</button>
			</div>
			` : "";

			var productCardTemplate = optionList + viewMoreCta;
			return productCardTemplate;
		}


		var buildLocalBenefitAreaMobile = function(product){

			var featureItems = [];
			const localBenefitList = product.localBenefitList ?? [];

			var buildLocalBenefitMobileItem = function(featureTxt, featureIconHtml) {
				if(typeof featureIconHtml === 'undefined' || featureIconHtml === null) {
					featureIconHtml = "";
				}
				var featureItem = `
				<div class="quick-view__benefit-item">
					<div class="quick-view__benefit-icon">
					${featureIconHtml}
					</div>
					<p class="quick-view__benefit-text">${featureTxt}</p>
				</div>
				`;
				return featureItem;
			}

			for(const localBenefitItem of localBenefitList) {
				const localBenefitText = localBenefitItem.localBenefitText;
				const localBenefitIconType = localBenefitItem.localBenefitIconType;
				const iconId = localBenefitIcons[localBenefitIconType] ?? "";
				const localBenefitImgAltText = localBenefitItem.localBenefitImgAltText;
				const localBenefitImgUrl = pfImgDomain(localBenefitItem.localBenefitImgUrl, "key-feature");
				// const iconHtml = `<img class="image__main lazy-load responsive-img" data-desktop-src="${localBenefitImgUrl}" data-mobile-src="${localBenefitImgUrl}" alt="${localBenefitImgAltText}">`;
				const iconHtml = iconId !== ""?
						`<svg class="icon" focusable="false"><use xlink:href="${iconId}" href="${iconId}"></use></svg>` :
						`<img class="image__main lazy-load responsive-img" data-desktop-src="${localBenefitImgUrl}" data-mobile-src="${localBenefitImgUrl}" alt="${localBenefitImgAltText}">`;

				// totalFeatureCnt++;
				// totalFeatureArr.push(localBenefitText);
				// if(itemCnt < 4) {
				// 	itemCnt++;
				// 	featureItems.push(buildLocalBenefitMobileItem(localBenefitText, iconHtml));
				// }
				featureItems.push(buildLocalBenefitMobileItem(localBenefitText, iconHtml));
			}

			// var featureHtml = "";
			// if(featureItems.length > 0)

			if(!isNonShop && frontModel.ctaTypeUpperCase === "LEARNMORE"){
				const featureHtml = `
				<div class="quick-view__benefit for-mobile no-data"></div>
				`;
				
				return featureHtml;
			}else{
				const featureHtml = featureItems.length > 0? `
				<div class="quick-view__benefit for-mobile">
					${featureItems.join("")}
				</div>
				` : `
				<div class="quick-view__benefit for-mobile no-data"></div>
				`;
				// if(!shopPromoOnlyFl) {
				// 	var benefitWrap = "";
				// 	if(featureItems.length > 0) {
				// 		benefitWrap = `
				// 		<div class="quick-view__offers">
				// 		<p class="quick-view__offers-title">Offer</p>
				// 			${featureItems.join("")}
				// 		</div>
				// 		`;
				// 	}
				// 	featureHtml = benefitWrap;
				// }
				return featureHtml;
			}
			

		};


		var buildCTAArea = function(product, originPrice, discountPrice, dataPricetext, dataMonth) {
			var dataPrice = ""; // add on
			var frontModel = product.modelList[product.frontModelIdx];

			// pre order, buy now, add to cart 에 사용
			var dataModelCodeAttr = ' data-modelcode="' + frontModel.modelCode + '"';
			var dataModelNameAttr = ' data-modelname="' + escapeHtml(frontModel.modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " ")) + '"';
			var dataShopSkuAttr = '';
			var dataGetStockAttr = '';
			if(siteCode == "cn") dataGetStockAttr = ' data-gs-flag="GetStock"';	//CRHQ 798 [AEM][CN] Hybris 전환 
			
			//new-hybris
			if(isGPv2 || isNewHybris) {
				dataShopSkuAttr = ' data-sku-code="' + frontModel.shopSkuCode + '"';
			}
			
			let dataEppVirtualModelCodeAttr = "";
			if((eppIsFlash || eppIsRefurbish) && isNotNull(frontModel.virtualModelCode)){
				dataEppVirtualModelCodeAttr=
				' data-virtual-modelcode="'+frontModel.virtualModelCode+'"';
			}

			var taggingAttrForBuy =
				' data-pimsubtype="' + (isNotNull(product.categorySubTypeEngName) ? product.categorySubTypeEngName.toLowerCase() : '') + '"' +
				' data-pvitype="' + (isNotNull(frontModel.pviTypeName) ? frontModel.pviTypeName.toLowerCase() : '') + '"' +
				' data-pvisubtype="' + (isNotNull(frontModel.pviSubtypeName) ? frontModel.pviSubtypeName.toLowerCase() : '') + '"' +
				' data-modelrevenue="' + originPrice + '"' +
				' data-modelqty="1"' +
				' data-modelcurrency="' + pfPriceCurrency + '"' +
				dataModelCodeAttr +
				dataModelNameAttr +
				' data-modeldisplay="' + escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " ")) + '"';
			if(isGPv2 || isHybrisIntg || isNewHybris) { //new-hybris
				taggingAttrForBuy += ' data-modelprice="' + originPrice + '"';
			} else {
				taggingAttrForBuy += ' data-discountprice="' + originPrice + '"';
			}
			dataPrice = originPrice; // add on
			
			taggingAttrForBuy += dataEppVirtualModelCodeAttr;

			if(isNotNull(discountPrice)) {
				taggingAttrForBuy += ' data-discountprice="' + discountPrice + '"';
				dataPrice = discountPrice; // add on
			}

			const galleryList = frontModel.galleryList ?? [];
			const galleryItem = galleryList.length > 0? galleryList[0] : {};
			const gallImageAlt = galleryItem.imageAlt ?? "";
			const gallImageUrlDesktop = galleryItem.imageUrlQuickViewDesktop ?? "";
			const gallImageUrlMobile = galleryItem.imageUrlQuickViewMobile ?? "";
			var dataAddOn =
				' data-modelcode="' + frontModel.modelCode + '"' +
				' data-desktop-src="' + gallImageUrlDesktop + '"' +
				' data-mobile-src="' + gallImageUrlMobile + '"' +
				' data-img-alt="' + gallImageAlt + '"' +
				' data-price-text="' + dataPricetext + '"' +
				' data-price="' + dataPrice + '"' +
				' data-price-month="' + dataMonth + '"' +
				' data-display-name="' + escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " ")) + '"';

			var useConfiguratorUrl = false;
			var hasNoUrl = false;
			var configUrl = "";
			if(isNotNull(frontModel.configuratorUseYn) && frontModel.configuratorUseYn == "Y") {
				useConfiguratorUrl = true;
				if(!isNotNull(frontModel.configuratorUrl) || frontModel.configuratorUrl == '') {
					hasNoUrl = true;
				} else {
					configUrl = frontModel.configuratorUrl;
				}
			}
			
			if(eppIsFlash || eppIsRefurbish){
				useConfiguratorUrl = false;
			}

			// CRHQ-3390 nonshop CTA 마크업 조정 건 :: S
			if(isNonShop && useConfiguratorUrl) {
				var pfMainDiv = $(".pd03-product-finder");
				var hasConfigClass = pfMainDiv.hasClass("pd03-product-finder--configurator");

				if(!hasConfigClass) {
					$(".pd03-product-finder").addClass("pd03-product-finder--configurator");
				}
			}
			// CRHQ-3390 nonshop CTA 마크업 조정 건 :: E

			// US > buyingConfigLinkType 이 pf 일 때만 buyingConfigLink 사용
			if(siteCode === "us") {
				if (frontModel.buyingConfigLinkType === 'pf') {
					useConfiguratorUrl = true;
					configUrl = frontModel.buyingConfigLink;
				}
			}

			var ctaTypeUpperCase = frontModel.ctaTypeUpperCase;

			var isSimplePD = product.simplePdYN === "Y" ? true : false;
			var buyingPDUrl = frontModel.originPdpUrl;
			if(isSimplePD) {
				if(isEppSite){
					if(frontModel.originPdpUrl != null){
						buyingPDUrl = frontModel.originPdpUrl.replace("feature.", "buy.");
					}
				} else {
					buyingPDUrl = frontModel.originPdpUrl + "buy/";
				}
			}

			var isSTDPD = false;
			if(!isSimplePD && frontModel.marketingpdpYN === "N") {
				isSTDPD = true;
			}
			if(isSTDPD) {
				frontModel.pdpUrl = getPdpUrlParamText(frontModel.pdpUrl, product.filterParamText);
			}
			//new-hybris
			if(isGPv2 || isNewHybris) {
				/* GPv2 standard pd 이동시 benefits 포커스 이동 :: 확인 필요함 */
				var learnmoreUrl = frontModel.pdpUrl;
				if (isSTDPD && pdurlAnchorCheckYn === "Y") {
					learnmoreUrl += "#benefits";
				}
				frontModel.pdpUrl = learnmoreUrl;
			}

			if(siteCode == "in" && categoryGroupCode != "01000000") {
				isSTDPD = false;
			}

			var isBespokeCta = false;
			if(isNotNull(frontModel.bespokeCtaUse) && frontModel.bespokeCtaUse == "Y") {
				isBespokeCta = true;
			}
			var isAddOn = false;
			/* VD add on 영역   old / new  hybris인 경우만 VD인지? 체크  */
			if(isOldHybris || isHybrisIntg || isNewHybris) {
				if(GROUPCODE_VD === categoryGroupCode && !frontModel.isUkSkuExpModel) {
					isAddOn = true;
				}
			}
			var fullCartUrl = storeDomain + cartUrl;
			if(cartUrl.indexOf("http://") > -1 || cartUrl.indexOf("https://") > -1) {
				fullCartUrl = cartUrl;
			}
			if(isEppSite){
				fullCartUrl = (isNewHybris?storeWebDomain:storeDomain) + "/" +eppCompanyCode + "/cart";
				if(isGPv2){
					fullCartUrl = cartUrl;
				}
			}

			var actionBtn = "";
			var learnMoreBtn = `
			<button class="cta cta--outlined cta--black js-pfv2-learn-more" href="${frontModel.pdpUrl}" ${dataModelCodeAttr} ${dataModelNameAttr}
			aria-label="${Granite.I18n.get("Learn more")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
			an-tr='pd03_product finder:option-${pageTrack}-product-link' an-ca='product click' an-ac='pf product card' an-la='learn more click'>
				${Granite.I18n.get("Learn more")}
			</button>
			`;
			if(!frontModel.isDeSkuExpModel){
				if(siteCode == "cn" && frontModel.isComingSoon && frontModel.isComingSoon == true){	//SCIC hybris
					dataGetStockAttr = ' data-gs-flag="ComingSoon"';	//cn getStockAlert/ComingSoon 구분
					actionBtn += `
						<button class="cta cta--contained cta--black js-cta-stock" href="javascript:;" ${dataGetStockAttr} ${dataModelCodeAttr} ${dataModelNameAttr} ${dataShopSkuAttr} ${dataEppVirtualModelCodeAttr}
						an-tr="pd03_product finder:stock alert-product finder-cta-button" an-ca="buy cta" an-ac="stock alert" an-la="stock alert">
							${Granite.I18n.get("Coming Soon Title")}
						</button>
						`;
				}else{
					if(useConfiguratorUrl) {
						if(!frontModel.ctaLocalText || frontModel.ctaLocalText == "") {
							// console.log("case 01");
							actionBtn += `
							<button class="cta cta--contained cta--black js-pfv2-buy-now" href="javascript:;" data-link_info="" data-config_info="${configUrl}" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
								${Granite.I18n.get("Buy now")}
							</button>
							`;
						} else {
							// console.log("case 02");
							actionBtn += `
							<button class="cta cta--contained cta--black js-pfv2-buy-now ${hasNoUrl ? 'cta--disabled' : ''}" href="javascript:;" ${hasNoUrl ? 'aria-disabled="true"' : ''}
							data-link_info="" data-config_info="${configUrl}" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
								${frontModel.ctaLocalText}
							</button>
							`;
						}
					} else if(isNotNull(originPrice)) {
						if(siteCode === "us" && ctaTypeUpperCase !== "PREORDER" &&
							(ctaTypeUpperCase === "WHERETOBUY" || ctaTypeUpperCase === "BACKORDER" || ctaTypeUpperCase === "BACKORDERED" || ctaTypeUpperCase === "INSTOCK" || ctaTypeUpperCase === "LOWSTOCK" || ctaTypeUpperCase === "OUTOFSTOCK")
						) {
							// console.log("case 03");
							// US 사이트  Buy Now CTA 표시 (PreOrder CTA 제외)
							actionBtn += `
							<button class="cta cta--contained cta--black js-pfv2-buy-now" href="${buyingPDUrl}" data-link_info="${buyingPDUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
								${Granite.I18n.get("Buy now")}
							</button>
							`;
						} else if(!isNonShop) {
							// console.log("case 04");
							if(ctaTypeUpperCase === "WHERETOBUY" || ctaTypeUpperCase === "BACKORDER" || ctaTypeUpperCase === "BACKORDERED" || ctaTypeUpperCase === "INSTOCK" || ctaTypeUpperCase === "LOWSTOCK") {
								//bespoke CTA
								if(isBespokeCta) {
									actionBtn += `
									<button class="cta cta--contained cta--black js-pfv2-anchor-btn" href="${frontModel.bespokeCtaLink}" ${dataShopSkuAttr} data-link_info="${frontModel.bespokeCtaLink}" data-config_info="" ${dataModelCodeAttr}
									${dataModelNameAttr} ${bespokeCtaTaggingAttr}>
										${Granite.I18n.get("Customize yours")}
									</button>
									`;
								} else if(isSTDPD) {
									if (isAddOn) {
										// console.log("case 05");
										actionBtn += `
										<button class="cta cta--contained cta--black js-cta-addon" href="javascript:;" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
										data-cart="true" ${dataAddOn} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowToCartTaggingAttr} data-cta-type='popup'>
											${Granite.I18n.get("Add to cart")}
										</button>
										`;
									} else if(siteCode === "br") {
										// console.log("case 06");
										actionBtn += `
										<button class="cta cta--contained cta--black js-pfv2-buy-now" href="javascript:;" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
										data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
											${Granite.I18n.get("Add to cart")}
										</button>
										`;
									} else {
										if(frontModel.isUkSkuExpModel){
											// uk sku cta button buy now, link learn-more
											actionBtn += `
											<button class="cta cta--contained cta--black js-pfv2-learn-more" href="${frontModel.pdpUrl}" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
											data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${addToCartTaggingAttr}>
												${Granite.I18n.get("Buy now")}
											</button>
											`;
										}else{
											// console.log("case 07");
											actionBtn += `
											<button class="cta cta--contained cta--black js-pfv2-buy-now" href="javascript:;" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
											data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${addToCartTaggingAttr}>
												${Granite.I18n.get("Add to cart")}
											</button>
											`;
										}
									}
								} else {
									// console.log("case 08");
									actionBtn += `
									<button class="cta cta--contained cta--black js-pfv2-buy-now" href="${buyingPDUrl}" data-link_info="${buyingPDUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
										${Granite.I18n.get("Buy now")}
									</button>
									`;
								}
							} else if(ctaTypeUpperCase === "PREORDER") {
								if(isSTDPD) {
									if(isAddOn) {
										// console.log("case 09");
										actionBtn += `
										<button class="cta cta--contained cta--black js-cta-addon" href="javascript:;" data-cart="true" ${dataAddOn} data-link_info="${fullCartUrl}" data-config_info=""
										${taggingAttrForBuy} ${preOrderToCartTaggingAttr} data-cta-type='popup'>
											${Granite.I18n.get("pre order")}
										</button>
										`;
									} else {
										// console.log("case 10");
										actionBtn += `
										<button class="cta cta--contained cta--black js-pfv2-buy-now" href="javascript:;" data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}"data-config_info=""
										${taggingAttrForBuy} ${preOrderToCartTaggingAttr}>
											${Granite.I18n.get("pre order")}
										</button>
										`;
									}
								} else {
									// console.log("case 11");
									actionBtn += `
									<button class="cta cta--contained cta--black js-pfv2-buy-now" href="${buyingPDUrl}" data-link_info="${buyingPDUrl}" data-config_info="" ${taggingAttrForBuy} ${preOrderToLinkTaggingAttr}>
										${Granite.I18n.get("pre order")}
									</button>
									`;
								}
							} else if(ctaTypeUpperCase === "OUTOFSTOCK") {
								// console.log("case 12");
								actionBtn += `
								<button class="cta cta--contained cta--black js-cta-stock" href="javascript:;" ${dataGetStockAttr} ${dataModelCodeAttr} ${dataModelNameAttr} ${dataShopSkuAttr} ${dataEppVirtualModelCodeAttr}
								an-tr="pd03_product finder:stock alert-product finder-cta-button" an-ca="buy cta" an-ac="stock alert" an-la="stock alert">
									${Granite.I18n.get("Get stock alert")}
								</button>
								`;
							}
						} else if(siteCode === "tr" && ctaTypeUpperCase === "WHERETOBUY") {
							// console.log("case 13");
							actionBtn += `
							<button class="cta cta--contained cta--black js-pfv2-buy-now" href="${frontModel.shopCtaUrl}" data-link_info="${frontModel.shopCtaUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
								${Granite.I18n.get("Buy now")}
							</button>
							`;
						}
					}
				}// CRHQ 798 [AEM][CN] Hybris 전환 
			}
			var ctaButtons = "";
			
			ctaButtons += learnMoreBtn;
			ctaButtons += actionBtn;

			var productCardTemplate = `
			<div class="quick-view__cta">
				${ctaButtons}
			</div>
			`;
			return productCardTemplate;
		}


		var productInfoArea = "";

		productInfoArea = `
		<div class="quick-view__product-info">
			<div class="quick-view__product-info-wrap scrollbar inner-scroll">
				<div class="scrollbar__contents">
					<div class="scroll-box__inner">
						${buildProductNameArea(product, isSTDPD)}
						<!-- /* Price (2 Lines) : 사용하지 않는 경우 .quick-view__price-container 영역 삭제 */ -->
						${buildPriceArea(product, upperStock, product.thirdPASeller)}
	
						<!-- /* Product Package : 사용하지 않는 경우 아래 내용 삭제 */ -->
						${buildPackageArea(frontModel)}
						
						<!-- /* Product Fiche (DA/VD) : 사용하지 않는 경우 아래 내용 삭제 */ -->
						${buildFicheArea(frontModel, product.thirdPASeller)}
	
						<!-- /* Option Selector (Color / Capacity, Storage, Size) : 사용하지 않는 경우 .quick-view__option-selector 영역 삭제 */ -->
						${buildOptionArea(product)}
	
						<!-- /* Offer : 사용하지 않는 경우 .quick-view__offers 영역 삭제 */ -->
						${buildOfferArea(product, emiPrice)}
	
						<!-- /* USP (Specs) : 사용하지 않는 경우 .quick-view__feature 영역 삭제 */ -->
						${buildFeatureArea(product)}
	
						<!-- /* Detail Specs (MO) : 사용하지 않는 경우 .quick-view__spec 영역 삭제 */ -->
						${buildSpecArea(product)}
					</div>
				</div><!-- scrollbar__contents E -->
			</div>

			<!-- /* Local Benefit(RTB) : 사용하지 않는 경우 .quick-view__benefit 영역 삭제 */ -->
			${buildLocalBenefitAreaMobile(product)}

			${buildCTAArea(product, originPrice, discountPrice, dataPricetext, dataMonth)}
		</div>
		`;
		return productInfoArea;
	};




	var getProductModelInfo = function(product, frontModelIdx){
		var tempProduct = Copy.deepCopy(product);

		if(isNotNull(frontModelIdx) && isNotNull(tempProduct.modelList) && isNotNull(tempProduct.modelList[frontModelIdx])){

			var tempModel = Object.assign({}, tempProduct.modelList[frontModelIdx]);

			/* Fmy Icon 셋팅 :: S*/
			var iconUseFlag = "N";
			var iconInfoObj = {};

			if(isNotNull(tempModel.merchandisingText)){
				/* 20201120 merchandisingText 가 있을 경우 User Key-in Badge와 같은 초록색 Badge로 Text 표시*/
				iconInfoObj["iconText"] = tempModel.merchandisingText;
				iconInfoObj["iconClass"] = " badge-icon--bg-color-teal";
				iconUseFlag = "Y";
			} else if(isNotNull(tempModel.topFlags) && isNotNull(tempModel.topFlags.iconTypeCd)){
				if(tempModel.topFlags.iconTypeCd === "N"){
					iconInfoObj["iconText"] = Granite.I18n.get("new");
					iconInfoObj["iconClass"] = " badge-icon--bg-color-blue";
					iconUseFlag = "Y";
				} else if(tempModel.topFlags.iconTypeCd === "H"){
					iconInfoObj["iconText"] = Granite.I18n.get("hot");
					iconInfoObj["iconClass"] = " badge-icon--bg-color-red";
					iconUseFlag = "Y";
				} else if(tempModel.topFlags.iconTypeCd === "B"){
					iconInfoObj["iconText"] = Granite.I18n.get("best seller");
					iconInfoObj["iconClass"] = " badge-icon--bg-color-orange";
					iconUseFlag = "Y";
				} else if(tempModel.topFlags.iconTypeCd === "U"){
					iconInfoObj["iconText"] = tempModel.topFlags.iconTitle;
					iconInfoObj["iconClass"] = " badge-icon--bg-color-teal";
					iconUseFlag = "Y";
				}
			}

			tempProduct.modelList[frontModelIdx].fmyIconYN = iconUseFlag;
			tempProduct.modelList[frontModelIdx].iconInfoObj = iconInfoObj;
			/* Fmy Icon 셋팅 :: E */

			/* Product Name SKU 단위로 조정  :: S */
			if(fnIsNull(tempModel.displayName)){
				tempProduct.modelList[frontModelIdx].displayName = "";
			}
			/* Product Name SKU 단위로 조정  :: E */

			/* Gallery Image URL 정보 셋팅 :: S */
			if(isNotNull(tempModel.thumbUrl)){
				var patt = /\?\$.+_.+_.+\$/gi;
				var nThunbUrl = tempModel.thumbUrl.replace(patt, '');
				tempModel.thumbUrl = nThunbUrl;

				var galleryArray = [];
				var galleryObj = {};

				// if(isNotNull(tempModel.thumbUrl)){
				// 	galleryObj = {};
				// 	galleryObj['imageUrlQuickViewDesktop'] = pfImgDomain(tempModel.thumbUrl, "product-desktop");
				// 	galleryObj['imageUrlQuickViewMobile'] = pfImgDomain(tempModel.thumbUrl, "product-mobile");
				// 	galleryObj['lazyImageUrl'] = pfImgDomain(tempModel.thumbUrl, "lazy");
				// 	galleryObj['imageAlt'] = tempModel.thumbUrlAlt;
				// 	galleryArray.push(galleryObj);
				// }
				if(isNotNull(tempModel.originImage) && tempModel.originImage.length > 0){
					for(var gi=0; gi<tempModel.originImage.length; gi++){
						if(isNotNull(tempModel.originImage[gi])){
							galleryObj = {};
							galleryObj['imageUrlQuickViewDesktop'] = pfImgDomain(tempModel.originImage[gi], "product-desktop");
							galleryObj['imageUrlQuickViewMobile'] = pfImgDomain(tempModel.originImage[gi], "product-mobile");
							galleryObj['lazyImageUrl'] = pfImgDomain(tempModel.originImage[gi], "lazy");
							if(isNotNull(tempModel.originImageAlt[gi])){
								galleryObj['imageAlt'] = tempModel.originImageAlt[gi];
							} else {
								galleryObj['imageAlt'] = tempModel.thumbUrlAlt;
							}
							galleryArray.push(galleryObj);
						}else{
							tempProduct.modelList[frontModelIdx].originImage[gi] = "";
						}
					}
				}
				tempProduct.modelList[frontModelIdx].galleryList = galleryArray;

				tempProduct.modelList[frontModelIdx].thumbUrl = pfImgDomain(tempModel.thumbUrl, "product-desktop");
			}
			/* Gallery Image URL 정보 셋팅 :: E */

			/* 별점 정보 & review Count :: S */
			if(reviewUseYN ==="Y" || reevooUseYN === "Y"){
				var item = "";
				var ratings = tempModel.ratings;
				if(fnIsNull(ratings)){
					ratings = 0;
					tempProduct.modelList[frontModelIdx].ratings = 0;
				}

				// rating 반올림 처리
				var tmpCount = Math.pow(10,1);
				ratings = Math.round(ratings*tmpCount)/tmpCount;

				var ratingValue = parseFloat(ratings).toFixed(1),
				fullStarCnt = parseInt(ratings),
				cutStarWidthStyleNum = 0;
				cutStarWidthStyleNum = parseInt((ratingValue-fullStarCnt)*100);

				if(ratingValue !== "0.0"){
					tempProduct.modelList[frontModelIdx].ratings = ratingValue;
				}

				for(var j=0; j<fullStarCnt;j++){
					item+='<span class="rating__star-item"><span class="rating__star-empty"></span><span class="rating__star-filled" style="width: 100%;"></span></span>';
				}
				if(fullStarCnt < 5 && fullStarCnt > 0){
					item+='<span class="rating__star-item"><span class="rating__star-empty"></span><span class="rating__star-filled" style="width: ' + cutStarWidthStyleNum + '%;"></span></span>';
					for(var k=4;k>fullStarCnt;k--){
						item+='<span class="rating__star-item"><span class="rating__star-empty"></span><span class="rating__star-filled" style="width: 0%;"></span></span>';
					}
				} else if ( fullStarCnt === 0 ){
					for(var empty_idx=0;empty_idx<5;empty_idx++){
						item+='<span class="rating__star-item"><span class="rating__star-empty"></span><span class="rating__star-filled" style="width: 0%;"></span></span>';
					}
				}
				tempProduct.modelList[frontModelIdx].ratingHtml = item;

				if(fnIsNull(tempModel.reviewCount)){
					tempProduct.modelList[frontModelIdx].reviewCount = "0";
				}
				tempProduct.modelList[frontModelIdx].ratingsText = Granite.I18n.get("{0} out of {1} Stars",["<span>"+tempModel.ratings+"</span>","5"],siteCode);

			}
			/* 별점 정보 & review Count :: E */

			/* Energy Label Data :: S */
			if(fnIsNull(tempModel.energyLabelGrade)){
				tempProduct.modelList[frontModelIdx].energyLabelGrade = "";
			}
			if(fnIsNull(tempModel.ficheFileUrl)){
				tempProduct.modelList[frontModelIdx].ficheFileUrl = "";
			}
			/* Energy Label Data :: E */
		}
		return tempProduct;
	};

	var addToCartCallBackError = function(e){
		var errorText = "";
		if (e.responseJSON != null) {
			if (isNotNull(e.responseJSON.message)) {
				errorText = e.responseJSON.message;
			}
		}
		confirmPopup(errorText,"error");
	}

	var quickviewEventListener = function(product){


		/* fmychip click event :: S */
		var $fmyChipEl = $('.pd03-product-finder__quick-view-popup .js-pfv2-product-fmychip');	// #### CTW : quickview 팝업에만 적용되도록 .quickview-popup 를 추가함.
		$fmyChipEl.off("click.finder");
		$fmyChipEl.on("click.finder", function(e){
			var $optionInputEl = $(this);
			var $targetContentEl = $optionInputEl.closest('.js-pfv2-quickview');

			var modelIdx =  $optionInputEl.data("modeli");
			var chipType = $optionInputEl.data("chiptype");

			if(isNotNull(modelIdx)){
				var proObj = getProductModelInfo(product, modelIdx);
				proObj.frontModelIdx = modelIdx;

				buildQuickView(proObj);

				var modelCode = proObj.modelList[modelIdx].modelCode;
				// 20210405 웹접근성 관련 focus처리 추가
				$targetContentEl.find("button").each(function(){
					var type = $(this).data("chiptype");
					var code = $(this).data("modelcode");

					if(chipType==type && modelCode==code){
						$(this).focus();
					}
				});

			}
		});


		/* CTA click event :: S */
		var isBuyNowClicked = false;
		var $ctaBtn = $('.pd03-product-finder__quick-view-popup .js-pfv2-buy-now');
		$ctaBtn.off("click.finder");
		$ctaBtn.on("click.finder", function(e){
			var $targetBtn = $(this);
			var modelCode = "";
			var configInfo = "";
			var configuratorURL = "";
			const virtualModelCode = $targetBtn.attr("data-virtual-modelcode");

			if(isGPv2){
				configInfo = $targetBtn.attr("data-config_info");
				modelCode = $targetBtn.attr("data-modelcode");
				var addToCartFlag = $targetBtn.attr("data-cart");
				var shopSkuCode = $targetBtn.attr("data-sku-code");

				if(addToCartFlag === "true"){
					var addToCartUrl = cartUrl + "?addItem[]=" + shopSkuCode + ",1";
					if(eppIsFlash || eppIsRefurbish){
						addToCartUrl = cartUrl + "?flash_skus=" + virtualModelCode;
					}
					window.location.href = addToCartUrl;
				}else{
					if(configInfo !== ""){
						if(configInfo.indexOf("?modelCode") < 0){
							configuratorURL = configInfo + "?modelCode=" + modelCode;
						} else {
							configuratorURL = configInfo;
						}
						window.location.href = configuratorURL;
					} else {
						const $targetBtn = $(this);
						const attrNames = $targetBtn[0].getAttributeNames();
						const anchor = document.createElement("a");
						for(const name of attrNames) {
							const attr = $targetBtn[0].getAttribute(name);
							anchor.setAttribute(name, attr);
						}
						anchor.click();
					}
				}
			} else {
				if(isBuyNowClicked === true){
					return;
				}

				configInfo = $(this).attr("data-config_info");
				modelCode = $(this).attr("data-modelcode");
				var addToCartFlag = $targetBtn.attr("data-cart");

				var addCartTimeout = 10000;
				if(siteCode === "vn"){
					addCartTimeout = 20000;
				}

				if(configInfo !== ""){
					if(configInfo.indexOf("?modelCode") < 0){
						configuratorURL = configInfo + "?modelCode=" + modelCode;
					} else {
						configuratorURL = configInfo;
					}
					window.location.href = configuratorURL;
				}else if(addToCartFlag === "true"){
					var linkInfo = $(this).attr("data-link_info");
					//new-hybris
					if((cartUrl.indexOf("http://") > -1 || cartUrl.indexOf("https://") > -1) && !isEppSite){
						linkInfo = cartUrl;
					}
					// addToCart POST 호출
					var postParam = {
						'products' : []
					};

					//new-hybris
					if(isNewHybris && (siteCode ==='uk' || siteCode === "cn")){ //20210402 SEBN old hybris -- 20210408 id/ph //uk
						addToCartNewHybris(modelCode, linkInfo)

					}else if(siteCode==="ar" || siteCode==="br"){

						var storeurl= storeDomain + "/" + siteCode + "/getServicesProduct?productCode="+modelCode;
						window.location.href = storeurl;

					}else if( siteCode==="py"){
						var storeurl;
						storeurl= storeDomain + "/getServicesProduct?productCode="+modelCode;
						window.location.href = storeurl;

					} else if(addToCartPostYn == "Y"){// addToCart POST 호출 addToCartPostYn meta 정보로 구분 차후 이전 소스제거
						var realSiteCode = siteCode;
						if(isNotNull(shopSiteCd)){
							realSiteCode = shopSiteCd;
						}
						if(isEppSite){
							realSiteCode = eppCompanyCode;
						}
						if(isNewHybris){
							apiUrl =  storeWebDomain + "/" + realSiteCode + "/servicesv2/addToCart";
						}else{
							apiUrl =  storeDomain + "/" + realSiteCode + "/servicesv2/addToCart";
						}
						postParam['products'].push({
										'productCode' : modelCode,
										'quantity' : 1,
									});
						$.ajax({
							url: apiUrl,
							type: "POST",
							data: JSON.stringify (postParam),
							contentType : "application/json",
							dataType : "json",
							xhrFields: { withCredentials: true },
							crossDomain : true,
							timeout : addCartTimeout,
							success: function (data) {
								if(data){
									if(data.resultCode === "0000"){
										isBuyNowClicked = true;
										window.location.href = linkInfo;
									}else{
										confirmPopup(data.resultMessage,"error");
									}
								}else{
									confirmPopup("","error");
								}
							},error : function(e){
								addToCartCallBackError(e);
							}
						});
					// addToCart POST 호출 addToCartPostYn meta 정보로 구분 차후 이전 소스제거 STR
					} else if(hybrisApiJson==="Y"){
						let siteCodeWithEpp = isEppSite ? eppCompanyCode : siteCode;
						var apiUrl =  storeDomain + "/" + siteCodeWithEpp + "/ng/p4v1/addCart";
						var sendData = {"productCode" : modelCode, "quantity" : 1};
						//new-hybris
						if(isNewHybris && siteCode !='uk' && siteCode !='cn'){
							apiUrl =  storeWebDomain + "/" + siteCodeWithEpp + "/ng/p4v1/addToCart";
							sendData = "products[0].productCode="+modelCode+"&products[0].quantity=1";
						}
						$.ajax({
							url: apiUrl,
							type: "GET",
							data: sendData,
							contentType : "application/x-www-form-urlencoded",
							dataType : "json",
							xhrFields: { withCredentials: true },
							crossDomain : true,
							timeout : addCartTimeout,
							success: function (data) {
								if(data){
									if(data.resultCode === "0000"){
										isBuyNowClicked = true;
										window.location.href = linkInfo;
									}else{
										confirmPopup(data.resultMessage,"error");
									}
								}else{
									confirmPopup("","error");
								}
							},error : function(e){
								addToCartCallBackError(e);
							}
						});
					}else{
						var realSiteCode = siteCode;
						if(isNotNull(shopSiteCd)){
							realSiteCode = shopSiteCd;
						}
						if(isEppSite){
							realSiteCode = eppCompanyCode;
						}
						var apiUrl =  storeDomain + "/" + realSiteCode + "/ng/p4v1/addCart";
						var sendData = {"productCode" : modelCode, "quantity" : 1};
						//new-hybris
						if(isNewHybris && siteCode !='uk' && siteCode !='cn'){
							apiUrl =  storeWebDomain + "/" + realSiteCode + "/ng/p4v1/addToCart";
							sendData = "products[0].productCode="+modelCode+"&products[0].quantity=1";
						}
						$.ajax({
							url : apiUrl,
							type : "GET",
							data: sendData,
							dataType : "jsonp",
							jsonp : "callback",
							timeout : addCartTimeout,
							success : function (data) {
								if(data){
									if(data.resultCode === "0000"){
										isBuyNowClicked = true;
										window.location.href = linkInfo;
									}else{
										confirmPopup(data.resultMessage,"error");
									}
								}else{
									confirmPopup("","error");
								}
							},error : function(e){
								addToCartCallBackError(e);
							}
						});
					}
					// addToCart POST 호출 addToCartPostYn meta 정보로 구분 차후 이전 소스제거 END
				} else {
					try {
						const $targetBtn = $(this);
						const attrNames = $targetBtn[0].getAttributeNames();
						const anchor = document.createElement("a");
						for(const name of attrNames) {
							const attr = $targetBtn[0].getAttribute(name);
							anchor.setAttribute(name, attr);
						}
						anchor.click();
					} catch(e) {
						console.error(e);
					}
				}
			}

		});



		var $learnMoreBtn = $(".pd03-product-finder__quick-view-popup .js-pfv2-learn-more");
		$learnMoreBtn.off("click.finder");
		$learnMoreBtn.on("click.finder", function(e) {
			const $targetBtn = $(this);
			const attrNames = $targetBtn[0].getAttributeNames();
			const anchor = document.createElement("a");
			for(const name of attrNames) {
				const attr = $targetBtn[0].getAttribute(name);
				anchor.setAttribute(name, attr);
			}
			anchor.click();
		});

		const $anchorBtn = $(".js-pfv2-anchor-btn");
		$anchorBtn.off("click.finder");
		$anchorBtn.on("click.finder", function(e) {
			const $targetBtn = $(this);
			const attrNames = $targetBtn[0].getAttributeNames();
			const anchor = document.createElement("a");
			for(const name of attrNames) {
				const attr = $targetBtn[0].getAttribute(name);
				anchor.setAttribute(name, attr);
			}
			anchor.click();
		});

		// calculator click event
		var $calculateCta = $('.pd03-product-finder__quick-view-popup .js-pfv2-calculate-popup-open');
		$calculateCta.off("click.finder");
		$calculateCta.on("click.finder", function(e){
			var targetCta = $(this);
			var calType = targetCta.data("type");
			var targetHref = targetCta.attr("data-link_info");
			//new-hybris
			if(isNewHybris || siteCode === "my"){
				window.sg.components.financePopup.showEmiPopup(targetCta.attr("data-modelcode"), targetCta);
			} else if(targetCta.hasClass('eip-ee-cal')){
				installmentPlansData.getPaymentData( $(this).attr("data-price"), $(this)[0], $(this).attr("data-modelcode"));
			} else if(isNotNull($emiPopupEl)){
					var $iframeEl = $emiPopupEl.find('iframe');

					var $emiPopupTitleEl = $emiPopupEl.find('.layer-popup__title');
					var popupTitle = "";
					if(calType==="emi"){
						popupTitle = Granite.I18n.get("EMIs (Pay in Easy Monthly installments)");
					}else if(calType==="install"){
						if(siteCode=="id"){
							popupTitle = Granite.I18n.get("Program CICILAN 0%");
						}else{
							popupTitle = Granite.I18n.get("Installment Calculate");
						}
					}
					$emiPopupTitleEl.html(popupTitle);
					$iframeEl.attr("src", targetHref);

					window.sg.components.eipPopup.showPopup();
			}
		});
		pd03ProductFinder.quickViewOpenBindEvent(currentElem);
	}

	var buildQuickView = function(product) {
		var quickviewTemplate = "";

		const infoHtml = buildProductInfoArea(product);
		const imageHtml = buildProductImageArea(product);
		
		quickviewTemplate += imageHtml;
		quickviewTemplate += infoHtml;

		$(".quick-view__contents").html(quickviewTemplate);

		quickviewEventListener(product);
		window.sg.common.image.initAll();
	}


	function openQuickviewPopup(focusEl) {
		if(focusEl) {
			currentElem = focusEl;
		}
		if (isNotNull(pfQuickviewProduct) === true) {
			const modelIdx = pfQuickviewProduct.frontModelIdx;
			const proObj = getProductModelInfo(pfQuickviewProduct, modelIdx);
			proObj.frontModelIdx = modelIdx;

			buildQuickView(proObj);
		}
	}

	window.sg.components.pd03ProductQuickview = {
		openQuickviewPopup
	};
})();
var pfCompareModelList=[];
var pfQuickviewProduct = {};

(function (win, $) {

	if($(".pd03-product-finder").length < 1){
		  return;
	} else {
		// console.log("#### Loading PFV2 #### dev.pd-g-product-finder.js");
	}

	/**
	 * Browser 구분
	 *
	 * @return browser name
	 */
	function getBrowserName() {
		var name = "Unknown";
		if(navigator.userAgent.indexOf("MSIE")!==-1){
			name = "MSIE";
		}
		else if(navigator.userAgent.indexOf("Firefox")!==-1){
			name = "Firefox";
		}
		else if(navigator.userAgent.indexOf("Opera")!==-1){
			name = "Opera";
		}
		else if(navigator.userAgent.indexOf("Chrome") !== -1){
			name = "Chrome";
		}
		else if(navigator.userAgent.indexOf("Safari")!==-1){
			name = "Safari";
		}
		return name;
	}

	var isOldAndroid =false;
	if( navigator.userAgent.indexOf("Android 4.")!==-1 && navigator.userAgent.indexOf("AppleWebKit")!==-1 ){
		isOldAndroid = true;
	}
	var page_loaded = false;
	var pageChangeCnt = 0;

//	var isEnglish = function(text){
//		var flag = false;
//		var temp = '';
//		temp = $.trim(text).replace(/[\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"]/gi,"");
//		if(/[0-9a-zA-Z]/g.test(temp)){
//			flag = true;
//		}
//		return flag;
//	};

	var isNotNull = function(_str){

		return !fnIsNull(_str) && _str != "null";

	};

	var escapeHtml = function(text) {
		var newText = text;
		if(isNotNull(newText)){
			newText = newText
				.replace(/&/g, "&amp;")
				.replace(/</g, "&lt;")
				.replace(/>/g, "&gt;")
				.replace(/"/g, "\\&quot;")
				.replace(/'/g, "&#039;");
		}
		return newText;
	};

	if(typeof jqueryImgsrc === 'undefined') {
		jqueryImgsrc = function (imgsrc, crunmode, crunmode2) {
			if (imgsrc === null) {
				return "";
			}
			if (imgsrc.indexOf("/content/dam/samsung") > -1) {
				if (crunmode === "qa") {
					if (crunmode2 === "stg") {
						imgsrc = imgsrc.replace("/content/dam/samsung", "//stg-images.samsung.com/is/image/samsung/assets");
					} else if (crunmode2 === "prod") {
						imgsrc = imgsrc.replace("/content/dam/samsung", "//stg-images.samsung.com/is/image/samsung/assets");
					} else {
						imgsrc = imgsrc.replace("/content/dam/samsung", "//stg-images.samsung.com/is/image/samsungdev/assets");
					}
					imgsrc += imagePreset(imgsrc);
				} else if (crunmode === "live") {
					if (crunmode2 === "stg") {
						imgsrc = imgsrc.replace("/content/dam/samsung", "//images.samsung.com/is/image/samsungstg/assets");
					} else if (crunmode2 === "prod") {
						imgsrc = imgsrc.replace("/content/dam/samsung", "//images.samsung.com/is/image/samsung/assets");
					} else {
						imgsrc = imgsrc.replace("/content/dam/samsung", "//images.samsung.com/is/image/samsungdev/assets");
					}
					imgsrc += imagePreset(imgsrc);
				}
			}

			return imgsrc;
		};
	}

	const highlightParamName = 'familyId';
	const highlightDataKey = highlightParamName === 'familyId'? 'familyid' : 'skuofhighlightcard';
	let highlightSku = $(".js-pfv2-finder").data(highlightDataKey) != null? $(".js-pfv2-finder").data(highlightDataKey) : "";
	
	if((highlightParamName === "familyId" && isNaN(highlightSku)) || $(".js-pfv2-finder").data('usehighlightcard') === false) {
		highlightSku = "";
	}

	// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건
	const checkEppOffline = function() {
		let eppOfflineFlag = false;
		if ( checkEppSite() && window.sg.epp && window.sg.epp.common && ( window.sg.epp.common.ecomStoreType === "offline" || window.sg.epp.common.ecomStoreType === "offline_reverse_o2o" ) ){
			eppOfflineFlag = true;
		}
		return eppOfflineFlag;
	}
	
	var productFinderGrid = function(){

		var isPreqaTest = false;

		//i18n 언어 셋팅
		Granite.I18n.setLocale($('#language').val());
		const BREAKPOINTS = window.sg.common.constants.BREAKPOINTS;
		const utils = window.sg.common.utils;

		// (nv-g-gnb.html)
		const addToCartPostYn = $("#addToCartPostYn").val() ? $("#addToCartPostYn").val() : "N";

		// PageModel 변수 ( body.html )
		const siteCode = $('#siteCode').val();
		const storeDomain = $('#storeDomain').val();
		const searchDomain = $('#searchDomain').val();
		const scene7domain = $('#scene7domain').val();
		const reviewUseYN = $('#reviewUseYN').val();
		const reevooUseYN = $('#reevooUseYN').val();
		const apiStageInfo = $('#apiStageInfo').val();
		const serverType = $('#serverType').val();
		const storeWebDomain = $("#storeWebDomain").val();

		// PF PageModel 변수 ( footer-include.html )
		const shopIntegrationFlag = $('#pfShopIntegrationFlag').val();
		const defaultFilter = $('#pfDefaultParameter').val();
		const categoryTypeCode= $('#pfCategoryTypeCode').val();
		const categoryGroupCode= $('#pfCategoryGroupCode').val();
		let cartUrl = $("#pfCartUrl").val();

		const GROUPCODE_VD = "04000000";	
		const GROUPCODE_HA = "08000000";	
		const GROUPCODE_IM = "01000000";	// MX 로 사용

		const TYPECODE_HA_WAD = "08010000"; // HA > Washers and Dryers
		const TYPECODE_HA_VAC = "08070000"; // HA > vacuum cleaners
		const TYPECODE_HA_CA = "08080000"; // HA > Cooking Appliance
		// uk 예외처리
		const UK_SKU_EXCEPTION = []; 
		const DE_SKU_EXCEPTION = ["NP955XED-KA1DE", "NP950QED-KA1DE", "NP950QED-KA2DE", "NP950XED-KA1DE", "NP930XED-KA1DE", "NP930QED-KH1DE", "NP930QED-KA1DE", "NP930QED-KA2DE"
		, "NP750XED-KC2DE", "NP750XED-KC1DE", "NP750XED-KB2DE", "NP750XED-KB1DE", "NP750XED-KB4DE", "NP750XED-KB3DE", "NP750XED-KB5DE", "NP730QED-KA1DE"
		, "NP750XEE-XA2DE", "NP750XED-KC5DE", "NP750XED-KC4DE", "NP750XED-KC3DE", "NP750XED-KB7DE", "NP750XED-KB6DE"
		, "NP950QED-KA4DE", "NP950QED-KA3DE", "NP950QED-KJ1DE", "NP930QED-KA3DE"];
		const OLD_HYBRIS_WISHLIST_OPEN = ["hk", "hk_en", "levant", "levant_ar", "es", "pt", "hu", "ch", "ch_fr", "ca", "ca_fr", "sg"]; // old hybris Wishlist open
		const isOldHybrisOpen = $.inArray(siteCode, OLD_HYBRIS_WISHLIST_OPEN) >= 0 ? true : false;

		// lowestWasPrice 없을 시 strikethrough 제거
		const LOWEST_WAS_PRICE_STRIKETHROUGH_SITE_CODE = ["pl", "gr", "si", "fi", "it", "se", "no", "dk", "fr"]; // lowestWasPrice strikethrough siteCode 
		const isStrikethroughRmSite = $.inArray(siteCode, LOWEST_WAS_PRICE_STRIKETHROUGH_SITE_CODE) >= 0 ? true : false;

		if(siteCode == "levant"){
			cartUrl = cartUrl.replace("/levant/","/jo/");
		} else if(siteCode == "levant_ar"){
			cartUrl = cartUrl.replace("/levant_ar/","/jo_ar/");
		}

		const priceDisplayYn = $("#pfPriceDisplayYn").val();
		const pfPriceCurrency = $("#pfPriceCurrency").val();

		const emiUrl = $("#pfEmiUrl").val();
		const financingUrl = $("#pfFinancingUrl").val();
		const pdurlAnchorCheckYn = $("#pfPdurlAnchorCheckYn").val();
		const hybrisApiJson = $("#pfHybrisApiJson").val(); 		//hybris api 호출 시 json 으로 호출하는 국가 ( N : jsonp )

		const isEditMode = $('#pfEditMode').val();

		const pageTrack = $("#pfPageTrack").val();
		const wtbTaggingAttr =
			' an-tr="pd03_product finder:where to buy compare-'+pageTrack+'-text-link" an-ca="buy cta" an-ac="where to buy" an-la="pf product card:where to buy"';
		const compareCTATaggingAttr =
			' an-tr="pd03_product finder:where to buy compare-'+pageTrack+'-text-compare" an-ca="content click" an-ac="feature" an-la="pf product card:compare"';
		const addToCartTaggingAttr =
			' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-cart page" an-ca="ecommerce" an-ac="addToCart" an-la="pf product card:add to cart"';
		const buyNowToCartTaggingAttr =
			' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-button cart page" an-ca="ecommerce" an-ac="addToCart" an-la="pf product card:buy now"';
		const buyNowtoLinkTaggingAttr =
			' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-button" an-ca="buy cta" an-ac="buy now" an-la="pf product card:buy now"';
		const preOrderToCartTaggingAttr =
			' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-button cart page" an-ca="ecommerce" an-ac="addToCart" an-la="pf product card:pre order"';
		const preOrderToLinkTaggingAttr =
			' an-tr="pd03_product finder:buy cta-'+pageTrack+'-cta-button" an-ca="buy cta" an-ac="pre-order" an-la="pf product card:pre order"';
		const bespokeCtaTaggingAttr =
			' an-tr="pd03_product finder:bespoke cta-'+pageTrack+'-cta-button" an-ca="content click" an-ac="feature" an-la="pf product card:customize yours"';

		const isGPv2 = (shopIntegrationFlag === 'GPv2')?true:false;
		const isHybrisIntg = (shopIntegrationFlag === 'Hybris-intg')?true:false;		//old-hybris
		const isNonShop = fnIsNull(shopIntegrationFlag)?true:false;
		const isNewHybris = (shopIntegrationFlag === 'Hybris-new')?true:false;			//new-hybris
		const isOldHybris = (shopIntegrationFlag === 'Hybris')?true:false;				//old-hybris

		const pfImagePresetDesktop = "?$160_160_PNG$";
		// const pfImagePresetMobile = "?$320_320_PNG$";
		const pfImagePresetDesktopForUS = "?$212_N_PNG$"
		const pfImagePresetMobileForUS = "?$484_N_PNG$"
		const pfImageLazyloadPreset = "LazyLoad_Home";
		const pfKeyImagePreset = "?$24_24_PNG$";

		// 신규 이미지 프리셋
		// 기본
		const pfImagePresetDesktopHorizontal = "?$252_252_PNG$";
		const pfImagePresetDesktopVertical = "?$172_172_PNG$";
		const pfImagePresetMobileDefault = "?$344_344_PNG$";
		// 하이라이트
		const pfImagePresetDesktopHorizontalHighlight = "?$276_412_PNG$";
		const pfImagePresetDesktopVerticalHighlight = "?$330_248_PNG$";
		const pfImagePresetMobileHighlight = "?$660_496_PNG$";
		// 퀵뷰
		const pfImagePresetDesktopQuickView = "?$592_472_PNG$";
		const pfImagePresetMobileQuickView = "?$624_512_PNG$";
		// 어워드
		const pfImagePresetDesktopAward = "?$36_36_PNG$";
		const pfImagePresetMobileAward = "?$72_72_PNG$";
		// Compare
		const pfImagePresetDesktopCompare = "?$72_72_PNG$";
		const pfImagePresetMobileCompare = "?$104_104_PNG$";

		// local benefit icon
		const localBenefitIcons = {
			"cart": "#cart-regular",
			"shipping": "#shipping-regular",
			"shipping_help": "#shipping-help-regular",
			"order_tracking": "#order-tracking-regular",
			"shipping_free": "#shipping-free-regular",
			"in_stock": "#in-stock-regular",
			"cancel_order": "#cancel-order-regular",
			"return_order": "#return-order-regular",
			"find_order": "#find-order-regular",
			"finance": "#finance-regular",
			"barcode": "#barcode-regular",
			"qr_code": "#qr-code-regular",
			"coupon": "#coupon-regular",
			"event": "#event-regular",
			"bundle": "#bundle-regular",
			"gift": "#gift-regular",
			"payment": "#payment-regular",
			"deal": "#shopping-deal-regular",
			"exclusive_color": "#exclusive-color",
			"store": "#store-regular",
			"repair_support": "#repair-support-regular",
			"warranty": "#warranty-regular",
			"smart_care": "#smart-care-regular",
			"trade_in": "#trade-in-regular",
			"upgrade": "#upgrade-regular",
			"emotion_worst": "#service-emoticon-worst",
			"emotion_sorry": "#emoticon-sorry-regular",
			"early_upgrade_program": "#early-upgrade-program",
			"galaxy_free_trial_program": "#galaxy-free-trial-program",
			"cracked_screen_trade_in": "#cracked-screen-trade-in",
			"support_labtop": "#support-laptop",
			"support_laptop": "#support-laptop",
			"pick_up_from_store" : "#pick-up-from-store"
		}

		// categoryGroupCode, GROUPCODE_HA
		if(categoryGroupCode === GROUPCODE_HA) {
			// DA인 경우
			$(".pd03-product-finder__content-wrap").addClass("categorized-group");
		}

		var isButtonShow = true;

		let defaultFilterObjList = [];
		let defaultFilterCodeList = []; // defaultParameter가 search api 에 parameter로 전달 시 사용되는 code 로 변환된 데이터  ( 첫 로딩 시 셋팅된다 )
		let isDefaultFilter = false;
		let isApplyFilter = false;		// ## PFV2 추가 (true 일경우 promotion card를 표시하지 않음)
		let pfCompareCategorySubTypeCode = "";

		// 필터용 map
		let noDispFilterAry=[];

		//[EPP] epp 관련 변수
		const isEppSite = checkEppSite();
		if(isEppSite && win.sg.epp == null){
			win.sg.epp={};
			win.sg.epp.common ={};
		}
		const eppCompanyCode = isEppSite ? win.sg.epp.common.companyCode : "";
		const apiSiteInfo = isEppSite ? "epp/v2" : "b2c";
		const pfType = isEppSite ? $("#pfType").val() : "";
		const offerId = isEppSite ? $("#pfOfferId").val() : "";
		const eppIsUserGroupPricing = isEppSite ? win.sg.epp.common.isUserGroupPricing : false;
		const eppUserGroupName = eppIsUserGroupPricing ? win.sg.epp.common.groupName : "";
		const eppIsRefurbish = pfType =="R" ? true : false;
		const eppIsFlash = pfType == "F" ? true : false;
		const eppTermsAndConditions = isEppSite ? $('#pfTermsAndConditions').val():"";
		const eppOmniPricingUseYn = isEppSite ? $('#pfEppOmniPricingUseYn').val():"";

		if(siteCode=="in" && isEppSite){
			// epp in 사이트 cart url 적용
			cartUrl = storeWebDomain + "/in/web/store/"+eppCompanyCode+"/cart/";
		}
		
		//[EPP] 23.01.17 o2o site filter 추가
		const eppO2oFilterInfo = {
			"categoryFilterName": "Stock Availability",
			"categoryFilterDispName": Granite.I18n.get("Stock Availability"),
			"categoryFilterCondition": "OR",
			"filterType": "normal",
			"productFinderFilter": [
				{
					"filterLocalName": Granite.I18n.get("Walk Out"),
					"filterSearchCode": "WO",
					"filterRegName": "walk-out",
					"colorYN": "N",
					"selectable": "Y",
					"selected": "N",
					"tooltipUse": "N",
					"tooltipText": null
				},
				{
					"filterLocalName": Granite.I18n.get("Home Delivery"),
					"filterSearchCode": "HD",
					"filterRegName": "home-delivery",
					"colorYN": "N",
					"selectable": "Y",
					"selected": "N",
					"tooltipUse": "N",
					"tooltipText": null
				}
			]
		};
		let eppO2oParam = [];			
		//[EPP] epp 관련 변수

		// api 관련 변수
		// let isGlobal = true;
		let pfSearchApiUrl = searchDomain+'/'+apiStageInfo+'/'+apiSiteInfo+'/product/finder/global';   		// PF Searchapi url
		let quickViewImageUrl = searchDomain+'/'+apiStageInfo+'/'+apiSiteInfo+'/product/card/detail/global';
		if( isGPv2 ){
			pfSearchApiUrl = searchDomain+'/'+apiStageInfo+'/'+apiSiteInfo+'/product/finder/gpv2';
			quickViewImageUrl = searchDomain+'/'+apiStageInfo+'/'+apiSiteInfo+'/product/card/detail/gpv2';
			// isGlobal = false;
		} else if ( isHybrisIntg ){
			pfSearchApiUrl = searchDomain+'/'+apiStageInfo+'/'+apiSiteInfo+'/product/finder/hybris';
			quickViewImageUrl = searchDomain+'/'+apiStageInfo+'/'+apiSiteInfo+'/product/card/detail/hybris';
			// isGlobal = false;
		} else if ( isNewHybris ){					//new-hybris
			pfSearchApiUrl = searchDomain+'/'+apiStageInfo+'/'+apiSiteInfo+'/product/finder/newhybris';
			quickViewImageUrl = searchDomain+'/'+apiStageInfo+'/'+apiSiteInfo+'/product/card/detail/newhybris';
			// isGlobal = false;
		}

		let pfSearchApiParam= 																		// PF Searchapi Param
		{
			"type":categoryTypeCode,
			"siteCode":siteCode,
			"start":1,
			"num":12,
			"sort":"newest",
			"onlyFilterInfoYN":"Y",
			"keySummaryYN":"Y",
			"specHighlightYN":"Y"		// ## PFV2 : 신규 PF에서는 항상 포함해서 api 호출
		};

		let dotcom_multistore = $.cookies.get("estoreSitecode") ? $.cookies.get("estoreSitecode").toString() : '';

		var shopSiteCd = '';
		if(siteCode === "ae" || siteCode==="ae_ar"){
			//NOTICE : dotcomMultistore 값이 존재 하는 경우 ae, ae_ar, kw, kw_ar, om, om_ar, bh, bh_ar 인 경우만 세팅
			if(dotcom_multistore === "ae" || dotcom_multistore === "ae_ar" || dotcom_multistore === "kw" || dotcom_multistore === "kw_ar" || dotcom_multistore === "om" || dotcom_multistore === "om_ar" || dotcom_multistore === "bh" || dotcom_multistore === "bh_ar"
			|| dotcom_multistore === "qa" || dotcom_multistore === "qa_ar"
			) {
				shopSiteCd = isNotNull(dotcom_multistore) ? dotcom_multistore : siteCode;
			}else{
				shopSiteCd = siteCode;
			}
		} else if(siteCode === "levant"){
			shopSiteCd = "jo";
		} else if(siteCode === "levant_ar"){
			shopSiteCd = "jo_ar";
		} else if(siteCode === "n_africa"){
			shopSiteCd = "ma";
		}

		if(siteCode == "ae"){
			cartUrl = cartUrl.replace("/ae/","/"+shopSiteCd+"/");
		} else if(siteCode == "ae_ar"){
			cartUrl = cartUrl.replace("/ae_ar/","/"+shopSiteCd+"/");
		}

		if(isNotNull(shopSiteCd)){
			pfSearchApiParam['shopSiteCode'] = shopSiteCd;
		}
		//only SECA
		let pf_dotcom_countryRegion = $.cookies.get("country_region") ? $.cookies.get("country_region").toString() : '';
		let regionCode = ''; // default CA-ON
		if(siteCode === "ca" || siteCode === "ca_fr"){
			if(isNotNull(pf_dotcom_countryRegion)) {
				regionCode = pf_dotcom_countryRegion;
			} else {
				regionCode = 'CA-ON'; // default CA-ON
			}
			pfSearchApiParam['regionCode'] = regionCode;
		}
		if(isEppSite){
			pfSearchApiParam['companyCode'] = eppCompanyCode;
			pfSearchApiParam['pfType'] = pfType;
			if(eppIsFlash || eppIsRefurbish){
				pfSearchApiParam['offerId'] =  offerId;
			}
			if(eppIsUserGroupPricing){
				pfSearchApiParam['groupName'] = eppUserGroupName;
			}
			//[24.02.27][EPP][CN][O2O] : o2oId 파라미터 추가
			if(window.sg.epp.common.userStoreId != ""){
				pfSearchApiParam['o2oId'] = window.sg.epp.common.userStoreId;
			}			
		}

		let loadPageCount = 1;

		//제품 전체 데이터
		var productListData = [];
		var productListIndex = 0;
		var fullNavJsonData = null;

		//loading bar
		var $LoaderEl = $('.pd03-product-finder__progress-line-filled');
		var $loaderContainer = $('.pd03-product-finder__progress');

		var $pfComponent = $(".js-pfv2-finder");
		var $filtersCTAWrap = $(".pd03-product-finder__filters-bar-filters"); //Total Count, View Result, Reset Filter CTA 포함
		var $filterListWrap = $(".js-pfv2-filter_list-wrap"); // Filter 리스트 영역

		var $epromoterBtn = $pfComponent.find('button.js-epromoter-cta');

		var $totalCount = $filtersCTAWrap.find(".js-pfv2-result-total-count");
		var $resetFilterBtn = $filtersCTAWrap.find('a.js-pfv2-reset-filters-cta');
		var $mobileViewResultBtn = $('.js-pfv2-view-results-cta');
		var $mobileViewResultCount = $mobileViewResultBtn.find('.js-pfv2-view-results-count');
		var $mobileResetBtn = $('.js-pfv2-mobile-reset-cta');
		var $filterBtn = $('.pd03-product-finder__filters-bar-filters-cta');

		var $sortByWrap = $('.js-pfv2-sortby-wrap');
		var $sortBySelect = $sortByWrap.find('select');
		var $sortByOption = $sortByWrap.find('option');

		var $viewMoreArea = $('.js-pfv2-cta-area');
		var $viewMoreBtn = $('.js-pfv2-view-more-cta');

		var $hashtagChip = $('.js-pfv2-hashtag-item').find('button');
		var hashChipSelectClass = "chip__action--light-selected";
		var hashChipDisabledClass = "chip__action--light-disabled";

		var $productCardListWrap = $('.js-pfv2-content-wrap');

		var $compareBarCont = $('.pd03-product-finder__compare-bar');
		var $compareItemDelete = $compareBarCont.find('.pd03-product-finder__compare-bar-item-close');
		var $compareCta = $compareBarCont.find('.js-pfv2-open-compare-layer');
		var $compareClearCta = $compareBarCont.find('.js-pfv2-compare-clear-cta');

		var productCardType = $productCardListWrap.data("product-cardtype");
		var isDefaultCardType = productCardType==="default"?true:false;
		var isOptionalCardType = productCardType==="optional"?true:false;

		var useMobileTwoCard = $productCardListWrap.data("mobile-two-card");
		if(isDefaultCardType && useMobileTwoCard){
			useMobileTwoCard = true;
		}

		var shopPromoOnlyFl = $productCardListWrap.data("shop-promo-only");

		var ctaDisabledClass = "cta--disabled";

		// calculator popup 영역
		var $emiPopupEl = $('.eip-popup');

		var useFilter = false;
		if($pfComponent.data("usefilter")){
			useFilter = true;
		}
		var useFilterType = false;
		if($pfComponent.data("usefiltertype")){
			useFilterType = true;
		}
		var useCompareButton = false;
		if($pfComponent.data("usecomparebutton")){
			useCompareButton = true;
		}
		var desktopCardLayout = $pfComponent.data("desktopcardlayout");
		if(typeof desktopCardLayout === 'undefined' || desktopCardLayout === null || desktopCardLayout === "") {
			desktopCardLayout = "vertical";
		}

		var desktopButtonPosition = $pfComponent.data("desktopbuttonposition");
		var mobileButtonPosition = $pfComponent.data("mobilebuttonposition");

		var useHighlightCard = false;
		var highlightBarText = "";
		if($pfComponent.data("usehighlightcard")){
			useHighlightCard = true;
			highlightBarText = $pfComponent.data("highlightbar");
		}
		var productgroupcode = $pfComponent.data("productgroupcode");

		var isHighligtedSKU;
		var isHighligtedImg = isNotNull($pfComponent.data("highlightdesktopimageref"));
		
		// [US-Zipcode] 관련 데이터
		var useZipCode = false;
		var zipCodeText = $.cookies.get("HA-Deeplink-Zipcode") ? $.cookies.get("HA-Deeplink-Zipcode").toString() : '';
		var $zipCodeInput;
		var $zipCodePlaceHolder;
		var $zipCodeDelete;

		if((siteCode === "us" || siteCode === "test") && categoryGroupCode===GROUPCODE_HA){
			useZipCode = true;
			$zipCodeInput = $('.js-pfv2-zipcode-input');
			$zipCodePlaceHolder = $('.js-pfv2-zipcode-placeholder');
			$zipCodeDelete = $('.js-pfv2-zipcode-delete');
		}
		//Eligible for 3-Day Delivery 설정
		var isThreeDayEligibility = false;
		var $threeDayEligibilitySection = $('.pd03-product-finder__zipcode-delivery');
		var $threeDayEligibilityInput;

		// [US-EppDiscount] 관련 데이터
		var useUSEppDiscount = false; // us epp discount price 사용 여부
		var useUSEppDiscountSelect = false; // us epp discount select 사용 여부
		var usEppApiDomain = "";
		var tmktid;
		var tsgmt; // Ex) First Responder
		var epp_verified;
		if(siteCode === "us"){
			tmktid = $.cookies.get("tmktid");
			var epp_verified = $.cookies.get("epp_verified");
			tsgmt = isNotNull($.cookies.get("tsgmt")) ? $.cookies.get("tsgmt").toString() : '';
			if(isNotNull(tmktid) && isNotNull(epp_verified) && epp_verified.toString()=='true'){
				tmktid = tmktid.toString();
				useUSEppDiscount = true;
				// guest user 가 아닌 경우
			}
			// us EppDiscount 테블릿(01020000) 제외
			if(categoryGroupCode===GROUPCODE_IM && categoryTypeCode !== '01020000'){
				if (window.AEMapp.eppStore.isRealEppUser()) {
					tmktid = tmktid.toString();
					useUSEppDiscount = true;
				} else if (window.AEMapp.eppStore.isUnverifiedEppUser()) {
					tmktid = tmktid.toString();
					useUSEppDiscount = true;
					useUSEppDiscountSelect = true;
				} else {
					useUSEppDiscountSelect = true;
				}
				// if(isNotNull(tmktid)){
				// 	tmktid = tmktid.toString();
				// 	useUSEppDiscount = true;
				// }
				// useUSEppDiscountSelect = true;
				// epp guest user 인 경우 select 표시
			}
			if(serverType==="stg"){
				usEppApiDomain = "https://hshopfront.samsung.com";
			}
		}
		var searchApiTotalRecord;
		var $gnb = $('.epp-bar-wrap');

		// Dialog 에서 authoring 한 Promotion Card 1, 2
		var $firstPromotionCard = $("#pf-promotion_card_1");
		var firstPromotionCardIdx = 5;
		var $secondPromotionCard = $("#pf-promotion_card_2");
		var secondPromotionCardIdx = 10;

		var useLargePromotionCard = false;
		var usePromotionCard = false;
		var useSecondPromotionCard = false;
		var usePromotionPosition = false;

		if(isNotNull($firstPromotionCard) && $firstPromotionCard.length > 0){
			usePromotionCard = true;
			pfSearchApiParam.num = 11;

			if(isNotNull($secondPromotionCard) && $secondPromotionCard.length > 0){
				useSecondPromotionCard = true;

				pfSearchApiParam.num = 10;
			}

			/*
			Promotion Card_Placement Rules 적용
			*/
			if(desktopCardLayout == "vertical"){
				if($firstPromotionCard.parent().data("cardwidth")==="Large"){
					useLargePromotionCard = true;
					firstPromotionCardIdx = 4;
					secondPromotionCardIdx = 8;

					pfSearchApiParam.num = 10;
					if(useSecondPromotionCard){
						pfSearchApiParam.num = 8;
					}
				}
				// Dialog 에서 authoring 한 position
				if($firstPromotionCard.parent().data("cardwidth") === "Small"){
					if($firstPromotionCard.find('#position').val() != ""){
						firstPromotionCardIdx = parseInt($firstPromotionCard.find('#position').val());
						if(useSecondPromotionCard){
							secondPromotionCardIdx = firstPromotionCardIdx + 6;
						}
						usePromotionPosition = true;
					}else if(useSecondPromotionCard && $secondPromotionCard.find('#position').val() != ""){
						secondPromotionCardIdx = parseInt($secondPromotionCard.find('#position').val());
						firstPromotionCardIdx = secondPromotionCardIdx + 6;
						usePromotionPosition = true;
					}
				}

				//[EPP] epp promotion card : small 1개만 사용, 위치 4번째 고정
				//      => 23.08.17 epp도 promotion card 2개 사용가능하고 위치 지정할 수 있게 변경하면서 변경전 데이터의 위치 유지를 위해 수정함.
				//      => 기존엔 isEppSite 조건만 있었고 small,no position,no second card인 경우에만 firstPromotionCardIdx 부여
				if(isEppSite 
					&& $firstPromotionCard.parent().data("cardwidth") === "Small" 
					&& $firstPromotionCard.find('#position').val() === ""
					&& !useSecondPromotionCard
				) {
					firstPromotionCardIdx = 3;
				}
			}else{
				firstPromotionCardIdx = 2;
				secondPromotionCardIdx = 4;
			}

		}

		// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건 : Buy Now CTA 변경
		const buyNowCta = checkEppOffline() ? Granite.I18n.get('Buy Online') : Granite.I18n.get("Buy now");
		
		/**
		 * Dialog 로 authoring 한 content data 셋팅
		 */

		var arrayContains = function(array, element){
			for (var i=0; i<array.length; i++) {
				if (array[i] === element) {
					return true;
				}
			}
			return false;
		};
		/**
		 * Ru 국가 count 별 단위문구 타입지정
		 *
		 * TypeA : 1,21,31,...
		 * TypeB : 2~4, 22~24, 32~34,...
		 * TypeC : 5~10, 25~30, 35~40,...
		 * TypeD : 11~20, 111~120, 211~220,...
		 *
		 * @param count
		 * @return wordType
		 */
		var getSiteRuCountWordType = function(count){
			var wordType = '';

			if( count%100 >= 11 && count%100 <= 20 ){
				wordType = 'TypeD';
			} else if( count%10 === 1 ){
				wordType = 'TypeA';
			} else if( count%10 >= 2 && count%10 <= 4 ){
				wordType = 'TypeB';
			} else {
				wordType = 'TypeC';
			}
			return wordType;
		};

		var pfPrdPreset = function(presetStr, imgUrl){
			var preset = "?$"+presetStr;
			var tempImgUrl = imgUrl.toLowerCase();

			if (tempImgUrl.indexOf(".jpg") > -1) {
				preset += "_JPG$";
			} else if (tempImgUrl.indexOf(".jpeg") > -1) {
				preset += "_JPG$";
			} else if (tempImgUrl.indexOf(".png") > -1) {
				preset += "_PNG$";
			} else if (tempImgUrl.indexOf(".gif") > -1) {
				preset += "_GIF$";
			} else {
				preset += "_PNG$";
			}

			return preset;

		};

		/**
		 * imageUrl 앞에 scene7domain을 붙여준다
		 *
		 * @param imgUrl 이미지 url
		 * @param presetType : lazy, prd_desktop, prd_mobile, none
		 * @param iconFl icon 여부
		 * @param isRecommended 하이라이트 상품 여부
		 * @return newUrl scene7domain 을 붙인 imgUrl
		 */
		var pfImgDomain = function(imgUrl, presetType, iconFl, isRecommended) {
			var newUrl = "";
			var useScene7domain = scene7domain;
			if(fnIsNull(imgUrl) || imgUrl.indexOf("http:") > -1 || imgUrl === "" || imgUrl.indexOf("//image-us.samsung.com/") > -1 ||
					imgUrl.indexOf("//stg-images.samsung.com/") > -1 || imgUrl.indexOf("//images.samsung.com/") > -1 || imgUrl.indexOf("image.samsung.com/") > -1 ||
					imgUrl.indexOf("//stg-images.samsung.com.cn/") > -1 || imgUrl.indexOf("//images.samsung.com.cn/") > -1 || imgUrl.indexOf("image.samsung.com.cn/") > -1 ||
					imgUrl.indexOf("www.samsung.com/") > -1){
				newUrl = imgUrl;
			}else{
				if(iconFl){
					useScene7domain = useScene7domain.replace("/image/","/content/");
				}
				if(isRecommended) {
					newUrl = imgUrl;
				} else {
					newUrl = useScene7domain + imgUrl;
				}
			}

			if(isNotNull(newUrl) && newUrl.indexOf("?$") < 0 && isNotNull(imgUrl)){
				if(presetType === "lazy"){
					newUrl += pfPrdPreset(pfImageLazyloadPreset, newUrl);
				} else if( presetType === "product-desktop"){
					if(siteCode==="us"){
						newUrl += pfImagePresetDesktopForUS;
					} else if(desktopCardLayout === "vertical") {
						if(isRecommended && useHighlightCard && isHighligtedImg) {
							newUrl += pfImagePresetDesktopVerticalHighlight;
						} else {
							newUrl += pfImagePresetDesktopVertical;
						}
					} else if(desktopCardLayout === "horizontal") {
						if(isRecommended && useHighlightCard && isHighligtedImg) {
							newUrl += pfImagePresetDesktopHorizontalHighlight;
						} else {
							newUrl += pfImagePresetDesktopHorizontal;
						}
					} else {
						newUrl += pfImagePresetDesktop;
					}
				} else if( presetType === "product-mobile"){
					if(siteCode === "us"){
						newUrl += pfImagePresetMobileForUS;
					} else {
						if(isRecommended && useHighlightCard && isHighligtedImg) {
							newUrl += pfImagePresetMobileHighlight;
						// } else if(desktopCardLayout === "horizontal") {
						// 	newUrl += pfImagePresetMobileDefault;
						} else {
							newUrl += pfImagePresetMobileDefault;
						}
					}
				} else if( presetType === "key-feature"){
					newUrl += pfKeyImagePreset;
				} else if(presetType === "quickview-desktop") {
					newUrl += pfImagePresetDesktopQuickView;
				} else if(presetType === "quickview-mobile") {
					newUrl += pfImagePresetMobileQuickView;
				} else if(presetType === "award-desktop") {
					newUrl += pfImagePresetDesktopAward;
				} else if(presetType === "award-mobile") {
					newUrl += pfImagePresetMobileAward;
				} else if(presetType === "compare-desktop") {
					newUrl += pfImagePresetDesktopCompare;
				} else if(presetType === "compare-mobile") {
					newUrl += pfImagePresetMobileCompare;
				}
			}
			return newUrl;
		};
		/**
		 * sortText 에 해당하는 sort 옵션 id 를 반환한다.
		 * */
		var getSortId = function(sortText){
			var sortId = "";

			$sortByOption.each(function(){
				var optionText = $.trim($(this).text());

				if(sortText === optionText){
					//sortId = $(this).attr("sort-id");
					sortId = $(this).val();
				}
			});

			return sortId;
		};

		/**
		 * RegName 혹은 filterCode를 fullNavJsonData 에서 찾아와
		 * searchCode 에 맞게 반환한다.
		 *
		 * @param noc : RegName Of filterCode
		 * @return filterObject
		 */
		var fullNavGroupsSearch = function(noc){
			var filterObj = {
					"filterCateIdxNm":"",
					"filterCode":"",
					"filterRegName":"",
					"categoryFilterCondition":"",
					"filterType":"",
					"categoryFilterName":""
			},
			breakFl = false;

			if(isNotNull(fullNavJsonData)){
				for(var fn=0; fn<fullNavJsonData.length; fn++){

					if(isNotNull(fullNavJsonData[fn].productFinderFilter)){
						for(var pf=0; pf<fullNavJsonData[fn].productFinderFilter.length; pf++){

							if(noc === fullNavJsonData[fn].productFinderFilter[pf].filterSearchCode || noc === fullNavJsonData[fn].productFinderFilter[pf].filterRegName){
								if(fn === 0 || fullNavJsonData[fn].productFinderFilter[pf].selectable !== "N"){
									filterObj.filterCateIdxNm = "filter".concat(fn+1);
									filterObj.filterCode = fullNavJsonData[fn].productFinderFilter[pf].filterSearchCode;
									filterObj.filterRegName = fullNavJsonData[fn].productFinderFilter[pf].filterRegName;
									filterObj.categoryFilterCondition = fullNavJsonData[fn].categoryFilterCondition;
									filterObj.filterType = fullNavJsonData[fn].filterType;
									filterObj.categoryFilterName = fullNavJsonData[fn].categoryFilterName;
								}
								breakFl = true;
								break;
							}
						}
					}
					if(breakFl){
						break;
					}
				}
			}
			return filterObj;
		};

		/**
		 * 문자열 형태인 data-filter-info 데이터를 filterObj 로 변환하여 반환한다.
		 * */
		var changeFilterInfoToObj = function(filterInfo){
			var filterInfoDataList = filterInfo.split("@@");
			var returnFilterObject = {};

			if(filterInfoDataList.length >4){
				returnFilterObject["filterCateIdxNm"] = filterInfoDataList[0];
				returnFilterObject["filterCode"] = filterInfoDataList[1];
				returnFilterObject["filterRegName"] = filterInfoDataList[2];
				returnFilterObject["categoryFilterCondition"] = filterInfoDataList[3];
				returnFilterObject["categoryFilterName"] = filterInfoDataList[4];
			}

			return returnFilterObject;
		};

		/**
		 * filter List 중 체크 된 filter를 filterObj로 가공하여 List 로 반환한다.
		 * data-filter-info String : {filterCateIdxNm}@@{filterSearchCode}@@{filterRegName}@@{categoryFilterCondition}@@{categoryFilterName}
		 *
		 * @return checkedList[
		 * 		{
		 * 			"filterCateIdxNm",
		 * 			"filterCode",
		 * 			"filterRegName",
		 * 			"categoryFilterCondition",
		 * 			"filterType"
		 * 		}
		 * ]
		 */
		var getFilterCheckedList = function(){
			var checkedList = $filterListWrap.find('li').find('input:checked');
			var filterInfoList = [];

			checkedList.each( function(){
				var filterInfo = $(this).attr("data-filter-info");
				var filterObject = changeFilterInfoToObj(filterInfo);

				filterInfoList.push(filterObject);
			});

			return filterInfoList;
		};

		/**
		 * 전체 filter data를 저장하고 노출한다.
		 *
		 * @param jsonData
		 */
		var buildFullFilter = function(jsonData){

			//Eligible for 3-Day Delivery 초기화
			if(useZipCode
				 && jsonData.threeDayEligibilityFilter !== undefined
				 && jsonData.threeDayEligibilityFilter !== null){
				isThreeDayEligibility = true;
				$threeDayEligibilityInput = $threeDayEligibilitySection.find("input[name='checkbox-delivery']");

				var threeDayFilter = jsonData.threeDayEligibilityFilter;
				// title 제공
				$threeDayEligibilitySection.find(".checkbox-radio__label-text").html(threeDayFilter.filterLocalName.replace(/ /g,""));
				if(threeDayFilter.tooltipUse === 'Y'){
					// 툴팁 텍스트 제공
					$threeDayEligibilitySection.find(".pd03-product-finder__zipcode-delivery-tooltip-text-wrap").html(threeDayFilter.tooltipText);
				}else{
					$threeDayEligibilitySection.find(".pd03-product-finder__zipcode-delivery-info").hide();
				}
				$threeDayEligibilitySection.show();
			}

			if(jsonData.navGroups !== undefined && jsonData.navGroups.length > 0){
	            //[EPP] 23.01.17 o2o site filter 추가
				//[24.02.27][EPP][CN][O2O] : usePosFilter 값 추가(cn은 o2o 필터 사용안함)
	            if( isEppSite && window.sg.epp && window.sg.epp.common && window.sg.epp.common.isPosStore && window.sg.epp.common.usePosFilter ){
	            	jsonData.navGroups.push(eppO2oFilterInfo);
	            }
	            
				fullNavJsonData = jsonData.navGroups;

				for(var c=0; c<jsonData.navGroups.length; c++){
					if(isNotNull(jsonData.navGroups[c].productFinderFilter)){
						for(var f=0; f<jsonData.navGroups[c].productFinderFilter.length; f++){
							if(isNotNull(jsonData.navGroups[c].productFinderFilter[f].filterSearchCode) && isNotNull(jsonData.navGroups[c].productFinderFilter[f].filterRegName)){
								jsonData.navGroups[c].productFinderFilter[f].filterSearchCode = $.trim(jsonData.navGroups[c].productFinderFilter[f].filterSearchCode);
								jsonData.navGroups[c].productFinderFilter[f].filterRegName = $.trim(jsonData.navGroups[c].productFinderFilter[f].filterRegName);
							}

							if(jsonData.navGroups[c].filterType === "color" && isNotNull(jsonData.navGroups[c].productFinderFilter[f].filterLocalName)){
								jsonData.navGroups[c].productFinderFilter[f].rgbCode = jsonData.navGroups[c].productFinderFilter[f].filterLocalName.split("^")[0];
								jsonData.navGroups[c].productFinderFilter[f].localName = jsonData.navGroups[c].productFinderFilter[f].filterLocalName.split("^")[1];
							}
						}
					}
					jsonData.navGroups[c].filterCateIdxNm = "filter".concat(c+1);
				}
				jsonData.navGroups[0].categoryFilterCondition = "OR";

				//Reset 버튼 disabled 처리
				// $('.filter-sort__head .filter-sort__reset-button').removeClass('active');
				// $('.filter-sort__head .filter-sort__reset-button button').attr('disabled','disabled');
				var filterTemplate = "";
				for(var ng_i in jsonData.navGroups){
					var navItem = jsonData.navGroups[ng_i];
					var hideCategoryAttr = "";
					if(!useFilterType){
						if(isNotNull(navItem.categoryFilterName)){
							var categoryFilterName = navItem.categoryFilterName.toLowerCase();
							if(categoryFilterName === 'type'){
								hideCategoryAttr = ' style="display:none;"';
							}
						}
					}
					if(navItem.filterType !== "recommend"){
						filterTemplate +=
							'<div class="pd03-product-finder__filters-list-list-area"'+hideCategoryAttr+' data-name="'+navItem.categoryFilterName+'_'+ng_i+'">'+
							'<h3 class="pd03-product-finder__filters-list-list-headline">'+
								'<span class="pd03-product-finder__filters-list-list-headline-text" role="button" tabindex="0" '+
								    ' an-tr="pd03_product finder:filter-'+pageTrack+'-text-filter" an-ca="filter and sort" an-ac="filter" an-la="filter:'+navItem.categoryFilterName.toLowerCase()+'" >'+
									navItem.categoryFilterDispName+
								// ## PFV2 : 2Phase 적용 : '<span class="pf-finder-v2__filters-list-list-headline-count" style="margin-left:10px; display:none;">('+navItem.productFinderFilter.length+')</span>'+
									'<span class="hidden" data-global-text=\'{'+
										'"Expand" : "'+Granite.I18n.get("Expand")+'",'+
										'"Collapse" : "'+Granite.I18n.get("Collapse")+'"'+
									'}\'>'+
										Granite.I18n.get("Collapse")+
									'</span>'+
									'<svg class="icon icon--open" focusable="false" aria-hidden="true">'+
										'<use xlink:href="#open-down-regular" href="#open-down-regular"></use>'+
									'</svg>'+
									'<svg class="icon icon--closed" focusable="false" aria-hidden="true">'+
										'<use xlink:href="#close-up-regular" href="#close-up-regular"></use>'+
									'</svg>'+
								'</a>'+
							'</h3>'+
							'<div class="pd03-product-finder__filters-list-item-wrap">'+
								'<ul class="pd03-product-finder__filters-list-list-item">';
							for(var f_i in navItem.productFinderFilter){
								var filItem = navItem.productFinderFilter[f_i];
								var isDisabledClass = '';
								var isDisabled = '';
								if (filItem.selectable === "N") {
									isDisabledClass = 'is-disabled';
									isDisabled = 'disabled="disabled"';
								}
								var filterInfo = navItem.filterCateIdxNm+'@@'+filItem.filterSearchCode+'@@'+filItem.filterRegName+'@@'+navItem.categoryFilterCondition+'@@'+navItem.categoryFilterName;
									filterTemplate +=
									'<li class="pd03-product-finder__filters-list-list-items '+isDisabledClass+'">'+
										'<div class="checkbox-radio">'+
											'<input type="checkbox" name="checkbox" class="hidden" id="checkbox-series'+filItem.filterSearchCode+'" data-filter-info="'+filterInfo+'" '+isDisabled+
											' an-tr="pd03_product finder:filter-'+pageTrack+'-list-filter" an-ca="filter and sort" an-ac="filter" an-la="filter:'+navItem.categoryFilterName.toLowerCase()+':'+filItem.filterRegName+'">'+
											'<div class="checkbox-radio__text-wrap">'+
												'<label class="checkbox-radio__label" for="checkbox-series'+filItem.filterSearchCode+'">'+
													'<span class="checkbox-radio__label-text">'+filItem.filterLocalName+'</span>'+
												'</label>';

												if(filItem.tooltipUse === 'Y'){
													filterTemplate +=
													'<button type="button" class="pd03-product-finder__filters-list-list-tip" aria-describedby="tooltip-'+filItem.filterLocalName.replace(/ /g,"")+'">'+
														'<svg class="icon icon--help" focusable="false" aria-hidden="true">'+
															'<use xlink:href="#help-regular" href="#help-regular"></use>'+
														'</svg>'+
													'</button>'+
													'<div class="pd03-product-finder__filters-list-list-tooltip" role="tooltip" id="tooltip-'+filItem.filterLocalName.replace(/ /g,"")+'">'+
														'<div class="pd03-product-finder__filters-list-list-tooltip-text-wrap">'+
															filItem.tooltipText +
														'</div>'+
														'<button type="button" class="pd03-product-finder__filters-list-list-tooltip-close"><span class="hidden">Close</span>'+
															'<svg class="icon icon--close" focusable="false" aria-hidden="true">'+
																'<use xlink:href="#delete-bold" href="#delete-bold"></use>'+
															'</svg>'+
														'</a>'+
													'</div>';
												}
											filterTemplate +=
											'</div>'+
										'</div>'+
									'</li>';
							}
							if(navItem.productFinderFilter.length > 9){
								filterTemplate +=
									'<div class="pd03-product-finder__filters-more">'+
										'<button type="button" class="pd03-product-finder__filters-more-button" data-global-text=\'{"show" : "'+Granite.I18n.get("Show More")+'", "less" : "'+Granite.I18n.get("Show Less")+'"}\'>'+
										'<span>'+Granite.I18n.get("Show More")+'</span>'+
										'<svg class="icon icon--plus" focusable="false" aria-hidden="true">'+
											'<use xlink:href="#plus-bold" href="#plus-bold"></use>'+
										'</svg>'+
										'<svg class="icon icon--minus" focusable="false" aria-hidden="true">'+
											'<use xlink:href="#minus-bold" href="#minus-bold"></use>'+
										'</svg>'+
										'</button>'+
									'</div>';
							}
							filterTemplate +=
								'</ul>'+
							'</div>'+
						'</div>';
					}
				}

				// ## PFV2 : US ZIPCODE 영역 보이기 (화면표시를 유연하게 하기 위해서 필터 html을 화면 처리시로 이동
				if (siteCode === "us" && productgroupcode === GROUPCODE_HA) {
					$(".pd03-product-finder__filters-list-list .js-us-zipcode-area").show();
				}

				$filterListWrap.prepend(filterTemplate);

			}
		};
		/**
		 * FullFilter 중 jsonData로 받은 navGroups 들을 활성화 하고, 선택된 filter는 check 처리한다.
		 *
		 * @param jsonData
		 */
		var buildFilter = function(jsonData){
			//chip 초기화 후 select 재설정
			$hashtagChip.each(function(){
				$(this).removeClass(hashChipDisabledClass);
			});
			if(jsonData.navGroups !== undefined && jsonData.navGroups.length > 0){
				if(!isHybrisIntg){
					/* 필터 첫번째 카테고리는 무조건 선택가능하도록 수정 */
					var firstFilterIdx = 0;
					for(var firstFilterIdx=0;firstFilterIdx<jsonData.navGroups.length;firstFilterIdx++){
						if(!useFilterType){
							if(isNotNull(jsonData.navGroups[firstFilterIdx].categoryFilterName)){
								var categoryFilterName = jsonData.navGroups[firstFilterIdx].categoryFilterName.toLowerCase();
								if(categoryFilterName !== 'type'){
									for(var idx=0; idx<jsonData.navGroups[firstFilterIdx].productFinderFilter.length; idx++){
										jsonData.navGroups[firstFilterIdx].productFinderFilter[idx].selectable = "Y";
									}
									break;
								}
							}
						} else {
							for(var idx=0; idx<jsonData.navGroups[firstFilterIdx].productFinderFilter.length; idx++){
								jsonData.navGroups[firstFilterIdx].productFinderFilter[idx].selectable = "Y";
							}
							break;
						}
					}
				}

				for(var nav=0; nav<jsonData.navGroups.length; nav++){
					if(isNotNull(jsonData.navGroups[nav].productFinderFilter)){
						// var isAvailable = false;
						// for(var m=0; m<jsonData.navGroups[nav].productFinderFilter.length; m++){
						// 	if(jsonData.navGroups[nav].productFinderFilter[m].selectable == "Y"){
						// 		isAvailable = true;
						// 		break;
						// 	}
						// }

						// var categoryName = jsonData.navGroups[nav].categoryFilterName;
						// if(!isAvailable){
						// 	noDispFilterAry.push(categoryName+"_"+nav);
						// }

						var filterCount = jsonData.navGroups[nav].productFinderFilter.length;
						var moreDiv = "";
						for(var f=0; f<jsonData.navGroups[nav].productFinderFilter.length; f++){
							var filterSearchCode = jsonData.navGroups[nav].productFinderFilter[f].filterSearchCode;
							var inputId = "#checkbox-series"+filterSearchCode;
							if(isNotNull($(inputId))){
								// if(!isHybrisIntg){
								// 	/* nav disabled 처리 */
								// 	if(jsonData.navGroups[nav].productFinderFilter[f].selectable === "N"){
								// 		$(inputId).attr("disabled","disabled");
								// 		$hashtagChip.each(function(){
								// 			if($(this).data("chipvalue")===filterSearchCode){
								// 				$(this).addClass(hashChipDisabledClass);
								// 			}
								// 		});
								// 	}else{
								// 		$(inputId).removeAttr("disabled");
								// 	}
								// }
								var moreCount = jsonData.navGroups[nav].productFinderFilter.length;

								// if(jsonData.navGroups[nav].productFinderFilter[f].selectable === "N"){
								// 	$(inputId).parent().parent().attr("style","display:none");
								// 	$(inputId).parent().parent().addClass("is-disabled");
								// 	filterCount--;
								// }else{
									$(inputId).parent().parent().attr("style","display:block");
									$(inputId).parent().parent().removeClass("is-disabled");
								// }
								moreDiv = $(inputId).parent().parent().parent().find(".pd03-product-finder__filters-more");
								/* selected 된 filter 체크 처리 */
								if(jsonData.navGroups[nav].productFinderFilter[f].selected === "Y"){
									$(inputId).prop("checked", true);

								}else{
									$(inputId).prop("checked", false);
								}
							}
						}
						if(filterCount > 9){
							moreDiv.attr("style", "display:block");
							moreDiv.find("button").attr("style", "display:block");
						}else if(filterCount <= 9){
							moreDiv.attr("style", "display:none");
							moreDiv.find("button").attr("style", "display:none");
						}
					}
				}
				
				//[EPP] 23.01.17 o2o site filter 추가
	            if( isEppSite && window.sg.epp && window.sg.epp.common && window.sg.epp.common.isPosStore){
	            	eppO2oParam.forEach(function(filterCode, idx){
	            		$("#checkbox-series"+filterCode).prop("checked", true);
	            	});
	            }				
			}


			/* ## PFV2 : 마크업 countFilter() 에서 처리함
			var filterCheckedList = getFilterCheckedList();
			if(isNotNull(filterCheckedList) && filterCheckedList.length > 0){
				if(isNotNull(filterCheckedList[0])){
					$resetFilterBtn.parent().removeClass("cta--desktop-disabled");
					$mobileResetBtn.removeClass(ctaDisabledClass);

					$mobileResetBtn.removeAttr("aria-disabled");
				}else{
					$resetFilterBtn.parent().addClass("cta--desktop-disabled");
					$mobileResetBtn.addClass(ctaDisabledClass);

					$mobileResetBtn.attr("aria-disabled", "true");
				}
			}else{
				$resetFilterBtn.parent().addClass("cta--desktop-disabled");
				$mobileResetBtn.addClass(ctaDisabledClass);

				$mobileResetBtn.attr("aria-disabled", "true");
			}*/
			setTotalCount(jsonData)
		};

		var setTotalCount = function(jsonData){
			/* 검색 결과 갯수 문구 셋팅 */
			var totalCount = 0;
			if(isNotNull(jsonData.common.totalRecord)){
				totalCount = jsonData.common.totalRecord;
			}

			// ## PFV2 : 999를 초과시 999로 표시
			if (totalCount > 999) {
				totalCount = 999;
			}

			var filterSortResultText = "";
			if(totalCount > 0 && siteCode ==="ru"){
				var totalCountWordType = getSiteRuCountWordType(totalCount);
				filterSortResultText = Granite.I18n.get("{0} Result(s) "+totalCountWordType,[totalCount]);
			} else {
				filterSortResultText = Granite.I18n.get("{0} Results",[totalCount]);
			}

			$totalCount.html(filterSortResultText);
			$mobileViewResultCount.html(' &lrm;('+totalCount+')&lrm; ');

		};

		/**
		 * 선택할수 없는 필터일 경우 해당 필터 disabled 처리
		 *
		 */
		var fnFilterAvailable = function(){
			$('.pd03-product-finder__filters-list-list-wrap > .pd03-product-finder__filters-list-list-area').each(function(){	// V2 : div >> pd03-product-finder__filters-list-list-area
				var name = $(this).attr("data-name");

				var isHide = false;
				if(name.indexOf('Type') != 0 && name.indexOf('Type') != 1){
					for(var i=0; i<noDispFilterAry.length; i++){
						if(noDispFilterAry[i] == name){
							isHide = true;
							break;
						}
					}
					if(isHide){
						$(this).attr("style","display:none");
					}else{
						$(this).find("div.pd03-product-finder__filters-list-item-wrap").attr("style","");
						$(this).attr("style","display:block");
					}
				}
			});
			noDispFilterAry=[];
		};

		/**
		 * parameter 로 전달받은 filterObj 객체를 pfSearchApiParam 에 셋팅한다.
		 *
		 */
		var setApiParamFilterData = function(filterObj){

			if(isNotNull(filterObj.filterCateIdxNm)){

				var operator = "+";
				if(filterObj.categoryFilterCondition === "AND"){
					operator = "*";
				} else if(filterObj.categoryFilterCondition === "OR"){
					operator = "+";
				}

				//[EPP] 23.01.17 o2o site filter 추가
				if( isEppSite && window.sg.epp && window.sg.epp.common && window.sg.epp.common.isPosStore){
	                if ( filterObj.filterCode === 'WO' || filterObj.filterCode === 'HD' ){
						if  ( pfSearchApiParam['stockFilter'] === undefined ){
							pfSearchApiParam['stockFilter'] = filterObj.filterCode;
						} else {
							pfSearchApiParam['stockFilter'] += "," + filterObj.filterCode;
						}
						return;
	                }
				}	
				
				if(pfSearchApiParam[filterObj.filterCateIdxNm] !== undefined){
					pfSearchApiParam[filterObj.filterCateIdxNm] = pfSearchApiParam[filterObj.filterCateIdxNm] + operator + filterObj.filterCode;
				} else {
					pfSearchApiParam[filterObj.filterCateIdxNm] = filterObj.filterCode;
				}
				if(siteCode == "us" || siteCode == "test"){
					if(filterObj.categoryFilterName.toLowerCase() === "offer" && filterObj.filterRegName.toLowerCase() === "sale"){
						pfSearchApiParam["shopPriceNotNull"] = "Y";
					}
				}
			}
		};
		/**
		 * url parameter / default parameter 를 이용하여
		 * search api 에 넘겨주는 parameter 에 filter정보를 셋팅한다.
		 *
		 * url parameter 구조 예 : ?galaxy-note+galaxy-a+galaxy-j+03z04+03z05
		 *
		 */
		var setFinderApiParam = function(){
			var defaultFilterList = [];

			/* DefaultFilter Setting :: S */
			if(isNotNull(defaultFilter)){
				defaultFilterList = defaultFilter.split("+");
			}

			if(defaultFilterList.length > 0){
				for(var fil in defaultFilterList){
					var defaultFilterObj = fullNavGroupsSearch(defaultFilterList[fil]);
					var defaultFilterCode = defaultFilterObj.filterCode;
					if(isNotNull(defaultFilterCode)){
						//유효한 filterCode 만 셋팅
						defaultFilterCodeList.push(defaultFilterCode);
						defaultFilterObjList.push(defaultFilterObj);
						isDefaultFilter = true;

						setApiParamFilterData(defaultFilterObj);
					}
				}
			}

			/* DefaultFilter Setting :: E */

			/* URL Parameter Setting :: S */
			var urlParameter = window.location.search;
			urlParameter = $.trim(urlParameter);

			urlParameter = urlParameter.replace("?", "");
			if(urlParameter.substr(urlParameter.length-1,1) === "/"){
				urlParameter = urlParameter.substring(0, urlParameter.length-1);
			}

			var tempUrlParamList = urlParameter.split("&");

			var urlParamList = [];
			for(var i = 0; i < tempUrlParamList.length; i++) {
				if(tempUrlParamList[i].indexOf("cid=") > -1) {
					$("#cid").val(tempUrlParamList[i]);
				} else {
					urlParamList = urlParamList.concat(tempUrlParamList[i].split("+"));
				}
			}

			var countFilter = 0;
			for(var up in urlParamList){
				var filterObj = fullNavGroupsSearch(urlParamList[up]);

				//[EPP] 23.01.17 o2o site filter 추가
	            if( isEppSite && window.sg.epp && window.sg.epp.common && window.sg.epp.common.isPosStore){
	            	if ( filterObj.filterCode === 'WO' || filterObj.filterCode === 'HD' ){
	            		eppO2oParam.push(filterObj.filterCode);
	            	}
	            }
	            
				if(isNotNull(filterObj.filterCode)){
					if(!isDefaultFilter || !arrayContains(defaultFilterCodeList, filterObj.filterCode) ){
						setApiParamFilterData(filterObj);
						countFilter++;
					}
				}
			}

			// ## PFV2 S : 필터가 있으면 promotion card 미표시, HighlightCard 표시안함
			isApplyFilter = (countFilter > 0) ? true : false;
			/*if (isApplyFilter === true) { // 2022.09.13 필터 사용시에도 프로모션 카드 보이도록 요청.
				pfSearchApiParam.num = 12;
			}*/
			// ## PFV2 E
			/* URL Parameter Setting :: E */
		};

		var changeAddedWishlist = function($el, modelCode){
			var changeBtn = function($btnEl){
				$btnEl.addClass('pd-wishlist-cta--on js-pfv2-delete-wishlist-btn');
				$btnEl.removeAttr('data-add-text').attr('data-added-text', Granite.I18n.get("Remove wishlist"));
				$btnEl.removeAttr('an-la').attr('an-la', 'remove from wishlist');
				$btnEl.attr('aria-selected', "true");
				$btnEl.removeAttr('aria-label').attr('aria-label', Granite.I18n.get("Remove wishlist"));
			};

			if(addedWishList.length > 0){
				for(var idx = 0; idx < addedWishList.length; idx++){
					var addedWishlistInfo = addedWishList[idx];
					if(addedWishlistInfo.deleted === false ){
						if(isNotNull(modelCode) && addedWishlistInfo.sku === modelCode){
							var $addedWishlistBtn = $el.find('.pd03-product-card__wishlist a');
							changeBtn($addedWishlistBtn);
							break;
						} else {
							var $addedWishlistBtn = $('.pd03-product-card__wishlist a[data-wishlistmodelcode='+addedWishlistInfo.sku.replace('/','_')+']');
							changeBtn($addedWishlistBtn);
						}
					}
				}
			}
		};
		var getPdpUrlParamText = function(pdpUrl, filterParamText){
			var result = pdpUrl;
			if(isNotNull(filterParamText)){
				if(pdpUrl.indexOf("?") > -1){
					result = pdpUrl + "&" + filterParamText;
				}else{
					result = pdpUrl + "?" + filterParamText;
				}
			}
			return result;
		}

		/**
		 * viewOptionObj : 현재 그리고 있는 Product 의 전체 옵션정보
		 * optionChip 선택 시 화면에 표시해 줄 sku의 index 를 반환함
		 * selectOptionMoIdx : 현재 선택한 옵션의 moidx 값
		 * otherSelectedOptionMoIdxList : 현재 선택한 타입을 제외한 타입중 선택된 나머지 옵션 리스트
		 * isColorType : 현재 타입이 color 인지에 대한 여부
		 * optionTypeList : 현재 그리고있는 Product 의  optionTypeList
		 */
		var getSelectedModelIdx = function(viewOptionObj, selectOptionMoIdx, otherSelectedOptionMoIdxList, isColorType, optionTypeList){
			var modelIdx = 0;

			var modelIdxList = selectOptionMoIdx.split(',');
			var firstIdx = modelIdxList[0];

			var memoryIdx = optionTypeList.indexOf("MEMORY");

			if(!isGPv2 && !isNewHybris && isColorType && memoryIdx > 0){
				// [global, hybrisIntg] 상위 옵션이 color 이고, 하위에 같이 바뀌는 옵션이 memory 일 때 가장 큰값으로 선택처리

				var memoryOptionList = viewOptionObj["MEMORY"].optionList;
				var selectedModelIdx = 0;
				var highestOption = 0;
				for(var moi in memoryOptionList){
					var temp_mi = memoryOptionList[moi].modelIdx.split(',');
					for(var tmi in temp_mi){
						// 선택한 옵션칩의 modelIdx 리스트에 해당하는 model idx 가 있으면  비교
						if(arrayContains(modelIdxList, temp_mi[tmi])){
							var this_memory_num = memoryOptionList[moi].optionCode.replace("TB","000").replace(/[^0-9]/g,"");
							if(highestOption < this_memory_num){
								highestOption = this_memory_num;
								selectedModelIdx = temp_mi[tmi];
							}
							break;
						}
					}
				}
				modelIdx = selectedModelIdx;

			} else {
				var selectModelIdxList = [];
				var tempMappingModelIdx = [];

				for(var omi in otherSelectedOptionMoIdxList){
					var otherMoIdx = otherSelectedOptionMoIdxList[omi];
					if(isNotNull(otherMoIdx)){
						var otherMoIdxArr = otherMoIdx.split(',');

						tempMappingModelIdx = [];
						for(var mli in modelIdxList){
							if(otherMoIdxArr.indexOf(String(modelIdxList[mli]))>-1) {
								tempMappingModelIdx.push(modelIdxList[mli]);
							}
						}
						if(tempMappingModelIdx.length > 0){
							modelIdxList = tempMappingModelIdx;
						}
					}

				}
				if(modelIdxList.length > 0){
					modelIdx = modelIdxList[0];
				} else {
					modelIdx = firstIdx;
				}
			}

			return modelIdx;
		};
		// saveText EURO -> KUNA  변환
		/**
		var euroToKunaPrice = function(saveText){
			let tempDecimalPoint = Math.pow(10, 2);
			let euroPriceTemp = Number(saveText)*7.53450;
			euroPriceTemp = Math.round(euroPriceTemp * tempDecimalPoint) / tempDecimalPoint;
			return currencyComma(euroPriceTemp, "HRK");
		}
		*/
		// 할인율
		var getDiscountRate = function(savePrice, originPrice){
			let tempDecimalPoint = Math.pow(10, 2);
			let discountRateTemp = Number(savePrice) / Number(originPrice) * tempDecimalPoint;
			discountRateTemp = Number(discountRateTemp).toFixed(2);
			return discountRateTemp.replace('.', ',');
		}
		/**
		 * Product Data를 이용하여 Product Card 영역 구성
		 * @param {*} product
		 * @returns
		 */
		var buildProductCardV2 = function(product) {
			product.siteCode = siteCode;
			var frontModel = product.modelList[product.frontModelIdx];

			if(product.iaCtaDisplay === 'Y'){
				isButtonShow = true;
			} else if (product.iaCtaDisplay === 'N'){
				isButtonShow = false;
			}

			var emiPrice = ""; // finance calculate data
			var originPrice = ""; // 기본 가격 (Tagging Data)
			var discountPrice = ""; // 할인후 가격  (Tagging Data)
			var dataPricetext = ""; // add on 버튼
			var dataMonth = ""; // add on 버튼

			var upperStock = "";
			if(isNotNull(frontModel.ctaType)){
				upperStock = frontModel.ctaType.toUpperCase();
				product.modelList[product.frontModelIdx].ctaTypeUpperCase = upperStock;
			}

			isHighligtedSKU = product.isRecommended === 'Y'; // 어떻게 처리?
			var quickViewCtaClass = " cta--outlined cta--black";
			if(useHighlightCard && isHighligtedSKU) {
				quickViewCtaClass = " cta--contained cta--white";
			}
			var highlightBar = useHighlightCard && isHighligtedSKU? `
			<div class="pd03-product-card__highlight-bar">
				<strong class="pd03-product-card__highlight-bar-text">${highlightBarText}</strong>
			</div>
			` : "";
			// standard PD 인경우 filterParamText 추가
			var isSTDPD = false;
			if(product.simplePdYN !== "Y" && frontModel.marketingpdpYN === "N"){
				var isSTDPD = true;
			}

			var curSelectedOptions = {};

			/**
			 * Product Card Image 영역
			 * @param {*} product
			 * @param {*} isSTDPD
			 * @returns
			 */
			var productCardImageBuild = function(product, isSTDPD) {
				var frontModel = product.modelList[product.frontModelIdx];
				var dataModelCodeAttr =
					' data-modelcode="'+frontModel.modelCode+'"';
				var dataModelNameAttr =
					' data-modelname="'+escapeHtml(frontModel.modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))+'"';
				var pdpUrl = frontModel.pdpUrl;
				if(isSTDPD){
					pdpUrl = getPdpUrlParamText(pdpUrl, product.filterParamText);
				}
				var imageSlideItems = "";
				for(var g_i in frontModel.galleryList) {
					var galItem = frontModel.galleryList[g_i];
					var galleryAlt = (galItem.imageAlt ? galItem.imageAlt : "");
					imageSlideItems += `
					<div class="pd03-product-card__image-item swiper-slide">
						<div class="image">
							<img class="image__main lazy-load responsive-img" data-desktop-src="${galItem.imageUrlDesktop}" data-mobile-src="${galItem.imageUrlMobile}" alt="${galleryAlt}" role="img" data-comp-name="image">
						</div>
					</div>
					`;
				}
				var productCardTemplate = `
				<a class="pd03-product-card__product-image-link" href="${pdpUrl}" ${dataModelCodeAttr} ${dataModelNameAttr} aria-label="${escapeHtml(frontModel.displayName.replace(/<br>/ig," ").replace(/<sup>/ig," "))}"
					an-tr="pd03_product finder:option-${pageTrack}-product-link" an-ca="product click" an-ac="pf product card" an-la="image click"
				>
					<div class="swiper-container" aria-live="polite" data-swiper-option='{
						"componentEl":".pd03-product-card__image",
						"slidesPerView":1,
						"keepWrapper":true,
						"loop": false,
						"pagination":false
						}'>
						<div class="swiper-wrapper">
							${imageSlideItems}
						</div>
					</div>
				</a>
				`;

				return productCardTemplate;
			}

			/**
			 * Product Card Award Icon 영역
			 * @param {*} product
			 * @returns
			 */
			var productCardAwardBuild = function(product) {
				if(product.awardList === null || product.awardList.length < 1) {
					return "";
				}
				const awardItems = [];
				for(var ai in product.awardList) {
					if(ai < 5) {
						//award 이미지 최대 5 개 표시
						const award = product.awardList[ai];
						const awardAlt = (award.awardDesc ? award.awardDesc : "");
						const desktopImage = pfImgDomain(award.awardImgWithPreset, "award-desktop");
						const mobileImage = pfImgDomain(award.awardImgWithPreset, "award-mobile");
						let awardIconInner = '';
						if(award.awardType === "TCO") {
							const awardLink = award.awardLink? award.awardLink : '';
							const tempArr = awardLink.split("/");
							const tcoFileName = tempArr[tempArr.length-1];
							awardIconInner = `
							<a class="pd03-product-card__award-tco-logo" href="${awardLink}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}" an-tr="pd03_product finder:option-product finder-tco logo-option_click5" an-ca="option click" an-ac="pf product card" an-la="tco logo:${tcoFileName}">
								<div class="image">
									<img class="image__main lazy-load responsive-img" data-desktop-src="${desktopImage}" data-mobile-src="${mobileImage}" alt="${awardAlt}">
								</div>
							</a>
							`;
						} else {
							awardIconInner = `
							<div class="pd03-product-card__award-item">
								<div class="image">
									<img class="image__main lazy-load responsive-img" data-desktop-src="${desktopImage}" data-mobile-src="${mobileImage}" alt="${awardAlt}">
								</div>
							</div>
							`;
						}
						if(awardIconInner.trim() !== "") {
							awardItems.push(awardIconInner);
						}
					}
				}
				var productCardTemplate = awardItems.length > 0? `
				<div class="pd03-product-card__award">
					${awardItems.join("")}
				</div>
				` : "";
				return productCardTemplate;
			}

			// 360도 이미지 아이콘은 빠져버렸나?

			/**
			 * Badge Icon 영역
			 * @param {*} product
			 * @returns
			 */
			var productCardBadgeBuild = function(product) {
				var frontModel = product.modelList[product.frontModelIdx];
				var productCardTemplate = '';
				if(frontModel.fmyIconYN === 'Y') {
					// Badge는 하나만
					var badgeClass = frontModel.iconInfoObj.iconClass;
					var badgeText = "";
					var badgeSpan = "";
					if(isGPv2) {
						badgeText = frontModel.iconInfoObj.iconText;
						badgeSpan = badgeText !== ''? `<span class="badge-icon  badge-icon--label ${badgeClass}">${badgeText}</span>`:'';
						badgeSpan += getEppOfflineStockBadge(frontModel);
					} else {
						var iconTextArr = frontModel.iconInfoObj.iconText.split(",");
						for(var f = 0; f < iconTextArr.length; f++){
							badgeSpan += `<span class="badge-icon  badge-icon--label ${badgeClass}">${iconTextArr[f]}</span>
										`;
						}
						badgeSpan += getEppOfflineStockBadge(frontModel);
					}
					productCardTemplate = badgeSpan !== ''? `
						<div class="pd03-product-card__badge">
							${badgeSpan}
						</div>
						` : '';
				} else {
					const offlineBadgeHtml = getEppOfflineStockBadge(frontModel); 
					if ( $.trim(offlineBadgeHtml) != "" ){
						productCardTemplate = `<div class="pd03-product-card__badge">${offlineBadgeHtml}</div>`;				
					}
				}
				return productCardTemplate;
			}

			/**
			 * Wishlist 영역
			 * @param {*} product
			 * @param {*} upperStock
			 * @returns
			 */
			var productCardWishlistBuild = function(product, upperStock) {
				var frontModel = product.modelList[product.frontModelIdx];

				var wishListClass = "";
				if(upperStock === "NOORDER" || upperStock === "LEARNMORE"){
					wishListClass = " js-pfv2-learnmore";
				}
				var wishlistAttr = "";
				if(isGPv2 || isNewHybris) {
					var shopSkuCode = "";
					if(isNotNull(frontModel.shopSKU)){
						shopSkuCode = frontModel.shopSKU;
					}else{
						shopSkuCode = frontModel.modelCode;
					}
					product.modelList[product.frontModelIdx].shopSkuCode = shopSkuCode;

					/* Added Wishlist Check :: S*/
					var wishlistPrice = "";
					if(isNotNull(frontModel.promotionPriceDisplay) && isNotNull(frontModel.promotionPrice)){
						wishlistPrice = frontModel.promotionPrice;
					} else {
						wishlistPrice = frontModel.price;
					}
					wishlistAttr = ' data-modelcode="'+shopSkuCode+'"';
					wishlistAttr += ' data-wishlistmodelcode="'+shopSkuCode.replace('/','_')+'"';
					wishlistAttr += ' data-modelname="'+escapeHtml(frontModel.modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))+'"';
					wishlistAttr += ' data-stock="'+frontModel.ctaType+'"';
					if(isNotNull(wishlistPrice) && wishlistPrice !== "null"){
						wishlistAttr += ' data-modelprice="'+wishlistPrice+'"';
					}
					/* Added Wishlist Check :: E*/
				} else if(isHybrisIntg || isOldHybrisOpen) {
					wishlistAttr = ' data-modelcode="'+frontModel.modelCode+'"';
					wishlistAttr += ' data-wishlistmodelcode="'+frontModel.modelCode.replace('/','_')+'"';
					wishlistAttr += ' data-modelname="'+escapeHtml(frontModel.modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))+'"';
				}

				//new-hybris
				var productCardTemplate = (isGPv2 || isHybrisIntg || isNewHybris || isOldHybrisOpen)? `
				<div class="pd03-product-card__wishlist">
					<a class="pd-wishlist-cta js-pfv2-layer-open cm-s-popup-opener ${wishListClass}" href="javascript:void(0)"
					aria-haspopup="true" data-div-id="#wishlist-popup" role="button" data-component="PD03"
					aria-label="Add to wishlist" data-add-text="${Granite.I18n.get('Add to wishlist')}" data-added-text="${Granite.I18n.get('Remove wishlist')}"
					${wishlistAttr} data-pagetrack="${pageTrack}"
					an-tr="pd03_product finder:wishlist-${pageTrack}-image-action" an-ca="account" an-ac="wishlist" an-la="add to wishlist">
						<span class="hidden">${Granite.I18n.get('Add to wishlist')}</span>
						<svg class="icon unselect" focusable="false" aria-hidden="true">
							<use xlink:href="#wishlist-unselect-regular" href="#wishlist-unselect-regular"></use>
						</svg>
						<svg class="icon select" focusable="false" aria-hidden="true">
							<use xlink:href="#wishlist-select-bold" href="#wishlist-select-bold"></use>
						</svg>
					</a>
					<button type="button" class="pd03-product-card__wishlist-button-close"><span class="hidden">Close</span>
						<svg class="icon icon--close" focusable="false" aria-hidden="true">
							<use xlink:href="#delete-bold" href="#delete-bold"></use>
						</svg>
					</button>
				</div>
				` : "";
				return productCardTemplate;
			}

			/**
			 * 상품명
			 * @param {*} product
			 * @param {*} isSTDPD
			 * @returns
			 */
			var productCardNameBuild = function(product, isSTDPD) {
				var frontModel = product.modelList[product.frontModelIdx];
				var pdpUrl = frontModel.pdpUrl;
				if(isSTDPD){
					pdpUrl = getPdpUrlParamText(pdpUrl, product.filterParamText);
				}
				var productCardTemplate = `
				<a class="pd03-product-card__product-name-link" href="${pdpUrl}" aria-label="${escapeHtml(frontModel.displayName.replace(/<br>/ig," ").replace(/<sup>/ig," "))}"
				data-modelcode="${frontModel.modelCode}" data-modelname="${escapeHtml(frontModel.modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
				an-tr="pd03_product finder:option-${pageTrack}-product-link" an-ca="product click" an-ac="pf product card" an-la="display name">
					<p class="pd03-product-card__product-name-text">${isNotNull(frontModel.displayName)? frontModel.displayName: ''}</p>
				</a>
				`;
				return productCardTemplate;
			}

			/**
			 * Option Chips
			 * @param {*} product
			 * @returns
			 */
			var productCardFmyOptionBuild = function(product) {
				var optionItems = "";
				let hasColorOpt = false;
				if(isNotNull(product.viewOptionObj) && Object.keys(product.viewOptionObj).length > 0) {
					// 상위 선택된 옵션칩의 model idx : disable 처리 할때 사용 ( idx에 해당되지않으면 disabled )
					var parentOptionModelIdx = "";
					var viewOptionIdx = 0;

					var curViewOptionObj = product.viewOptionObj;
					var curOptionTypeList = product.optionTypeList;
					const optionKeys = [];
					if(isNotNull(product.viewOptionObj['COLOR'])) {
						optionKeys.push("COLOR");
					}
					for(var type in product.viewOptionObj) {
						if(type === "COLOR") {
							continue;
						}
						optionKeys.push(type);
					}

					// for(var type in product.viewOptionObj) {
					for(const type of optionKeys) {
						var optionDataType = "";
						optionDataType = type.toLowerCase().replace(/ /g, "-");

						var optionObj = product.viewOptionObj[type].optionList;

						var isSelected = false;
						var isDisabled = false;
						var currentOption = {};
						var disabledClass = '';

						var selectorWrapperStyle = "";
						if(isNotNull(product.viewOptionObj[type].styleAttr)){
							selectorWrapperStyle = product.viewOptionObj[type].styleAttr;
						}

						var selectedColor = "";
						for(var option in optionObj){
							currentOption = optionObj[option];

							var modelIdxList = currentOption.modelIdx.split(',');
							if(currentOption.modelIdx != null && arrayContains(modelIdxList, String(product.frontModelIdx))){
								selectedColor = currentOption.optionLocalName;
							}
						}

						if(type === "COLOR") {
							var colorOpts = [];
							var curSelecteModelIdx = '';
							for(var option in optionObj) {
								/* 선택되어있는(대표모델) 옵션 flag값 셋팅 */
								currentOption = optionObj[option];
								isSelected = false;
								var modelIdxList = currentOption.modelIdx.split(',');

								if(currentOption.modelIdx != null && arrayContains(modelIdxList, String(product.frontModelIdx))){
									isSelected = true;
									curSelecteModelIdx = currentOption.modelIdx;
									curSelectedOptions[type] = currentOption.optionLocalName;
									disabledClass = '';
									isDisabled = false;
								} else {
									disabledClass = ' is-disabled';
									isDisabled = true;
									if(viewOptionIdx === 0){
										disabledClass = '';
										isDisabled = false;
									} else {
										var parentModelIdxList = parentOptionModelIdx.split(',');
										for(var mli in modelIdxList){
											//상위 선택된 옵션칩 의 model idx 에 일치하는 model idx 가 있는 경우 활성화
											if(arrayContains(parentModelIdxList, modelIdxList[mli])){
												disabledClass = '';
												isDisabled = false;
												break;
											}
										}
									}
								}

								// 각 옵션칩의 model 정보 셋팅 ( 태깅 )
								var modelCodeAttrForTagging = '';
								var modelNameAttrForTagging = '';

								var modelIdx;

								if(disabledClass == ''){
									var curSelectOptionMoIdx = currentOption.modelIdx;
									var otherSelectedOptionMoIdxList = [];
									var isColorType = true;

									for(var ooi in curViewOptionObj){
										if(ooi != type){
											var tmp_optionList = curViewOptionObj[ooi].optionList;
											for(var toi in tmp_optionList){
												var tmp_option = tmp_optionList[toi];
												var tmp_optionMoIdx = tmp_option.modelIdx;
												var tmp_optionMoIdxArr = tmp_optionMoIdx.split(',');

												// 현재 선택되어있는 option 색출
												if(tmp_optionMoIdxArr.indexOf(String(product.frontModelIdx))>-1){
													otherSelectedOptionMoIdxList.push(tmp_optionMoIdx);
												}
											}

										}
									}

									modelIdx = getSelectedModelIdx(curViewOptionObj, curSelectOptionMoIdx, otherSelectedOptionMoIdxList, isColorType, curOptionTypeList);
									if(product.modelList.length > modelIdx && isNotNull(product.modelList[modelIdx])){
										modelCodeAttrForTagging = ' data-modelcode="'+product.modelList[modelIdx].modelCode+'"';
										modelNameAttrForTagging = ' data-modelname="'+escapeHtml(product.modelList[modelIdx].modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))+'"';
									}
								}
								let colorOpt = "";
								// multi color
								const multiColorYN = currentOption.multiColorYN;
								const multiColorList = currentOption.multiColorList;
								if(multiColorYN === "Y" && multiColorList != null && typeof multiColorList === "object") {
									const optionColorType = multiColorList.optionColorType;
									const optionCodeList = multiColorList.optionCodeList ?? [];
									if(optionColorType === "C1") {
										// 2602 ~ 2617 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const colorPath1 = `<path d="M18,0A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="${color1}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36" height="35.999" viewBox="0 0 36 35.999">
												<g transform="translate(-18.001 9)">
													<rect width="36" height="35.999" transform="translate(18.001 -9)" fill="none" />
													${colorPath1}
													<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="rgba(0,0,0,0.5)" />
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C2_A") {
										// 2620 ~ 2637 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const colorPath1 = `<path d="M-3395,7250a18,18,0,0,1,18-18h0v36h0A18,18,0,0,1-3395,7250Z" transform="translate(3413 -7241)" fill="${color1}" />`;
										const colorPath2 = `<path d="M-3377,7232a18,18,0,0,1,18,18,18,18,0,0,1-18,18Z" transform="translate(3413 -7241)" fill="${color2}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 9)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g>
														${colorPath1}
														${colorPath2}
														<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(17.999 -9)" fill="rgba(0,0,0,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C2_B") {
										// 2640 ~ 2657 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const colorPath1 = `<path d="M-3395,7250a18,18,0,0,1,18-18,18,18,0,0,1,18,18Z" transform="translate(3413 -7241)" fill="${color1}" />`;
										const colorPath2 = `<path d="M-3395,7250h36a18,18,0,0,1-18,18A18,18,0,0,1-3395,7250Z" transform="translate(3413 -7241)" fill="${color2}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 9)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g>
														${colorPath1}
														${colorPath2}
														<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(17.999 -9)" fill="rgba(0,0,0,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C3_A") {
										// 2660 ~ 2678 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const colorPath1 = `<path d="M-1047.672,8501.792a18.1,18.1,0,0,1-1.321-6.168c0-.027,0-.056,0-.083s0-.06,0-.09a18.092,18.092,0,0,1,1.906-8.522c.009-.017.017-.036.028-.053.017-.036.034-.068.051-.1.028-.054.058-.109.085-.162,0,0,0,0,0-.007.109-.205.22-.405.337-.608l0,0a18.019,18.019,0,0,1,1.92-2.717,18.076,18.076,0,0,1,2.2-2.157,18.042,18.042,0,0,1,2.467-1.712,18.109,18.109,0,0,1,2.674-1.264,18.212,18.212,0,0,1,3.76-.967.18.18,0,0,0,.032,0,.045.045,0,0,0,.017,0A18.394,18.394,0,0,1-1031,8477v18h0l-15.583,9A18.227,18.227,0,0,1-1047.672,8501.792Z" transform="translate(1019 -8477.001)" fill="${color1}" />`;
										const colorPath2 = `<path d="M-1049,8494.994h0v-18a18.692,18.692,0,0,1,2.051.115,18.089,18.089,0,0,1,4.971,1.313.644.644,0,0,0,.068.025.02.02,0,0,0,.015.009,17.41,17.41,0,0,1,1.889.95,18.359,18.359,0,0,1,2.047,1.374c.015.013.032.023.047.036s.034.028.051.041a18.122,18.122,0,0,1,4.446,5.135h0a18.843,18.843,0,0,1,.9,1.783l.045.1s0,0,0,0a18.093,18.093,0,0,1,1.462,6.915c0,.023,0,.047,0,.073v.1a18.107,18.107,0,0,1-1.622,7.482l-.032.073c-.009.019-.019.038-.028.058-.22.474-.463.94-.73,1.4Z" transform="translate(1037.001 -8477)" fill="${color2}" />`;
										const colorPath3 = `<path d="M-1034.289,8494.979a18.08,18.08,0,0,1-9.093-2.986c-.017-.013-.036-.023-.053-.036a.663.663,0,0,1-.062-.043,18.052,18.052,0,0,1-4.213-3.972l-.1-.128a18.141,18.141,0,0,1-1.2-1.816l15.589-9,15.585,9a18.048,18.048,0,0,1-2.04,2.858.119.119,0,0,1-.015.016l-.077.089a18.1,18.1,0,0,1-2.673,2.456l-.026.02-.1.077a18.052,18.052,0,0,1-9.792,3.466c-.051,0-.1.007-.158.007a.029.029,0,0,1-.013,0c-.228.009-.458.013-.689.013C-1033.709,8495-1034,8495-1034.289,8494.979Z" transform="translate(1021.412 -8459.007)" fill="${color3}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(27.001 -17.999) rotate(90)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g transform="translate(18 -3.005) rotate(-90)">
														${colorPath1}
														${colorPath2}
														${colorPath3}
														<path d="M18,1A17,17,0,0,0,5.979,30.021,17,17,0,1,0,30.021,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(-30.004 0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C3_B") {
										// 2681 ~ 2699 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const colorPath1 = `<path d="M0,18A18.006,18.006,0,0,1,12,1.024v33.95A18.006,18.006,0,0,1,0,18Z" transform="translate(0 0)" fill="${color1}" />`;
										const colorPath2 = `<path d="M0,34.974V1.024a18.086,18.086,0,0,1,12,0v33.95a18.085,18.085,0,0,1-12,0Z" transform="translate(12 0)" fill="${color2}" />`;
										const colorPath3 = `<path d="M0,16.975A18.007,18.007,0,0,0,12,33.95V0A18.007,18.007,0,0,0,0,16.975Z" transform="translate(36 34.975) rotate(180)" fill="${color3}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 -4)">
													<rect width="36" height="36" transform="translate(18 4)" fill="none" />
													<g transform="translate(17.999 4.001)">
														${colorPath1}
														${colorPath2}
														${colorPath3}
														<path d="M18,35A17,17,0,0,0,30.02,5.979,17,17,0,1,0,5.979,30.019,16.889,16.889,0,0,0,18,35m0,1A18,18,0,1,1,36,18,18,18,0,0,1,18,36Z" transform="translate(0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C3_C") {
										// 2702 ~ 2720 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const colorPath1 = `<path d="M0,18A18.006,18.006,0,0,1,12,1.024v33.95A18.006,18.006,0,0,1,0,18Z" transform="translate(0 0)" fill="${color1}" />`;
										const colorPath2 = `<path d="M0,34.974V1.024a18.086,18.086,0,0,1,12,0v33.95a18.085,18.085,0,0,1-12,0Z" transform="translate(12 0)" fill="${color2}" />`;
										const colorPath3 = `<path d="M0,16.975A18.007,18.007,0,0,0,12,33.95V0A18.007,18.007,0,0,0,0,16.975Z" transform="translate(36 34.975) rotate(180)" fill="${color3}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">
												<g transform="translate(-18 -4)">
													<rect width="36" height="36" transform="translate(18 4)" fill="none" />
													<g transform="translate(53.999 4) rotate(90)">
														${colorPath1}
														${colorPath2}
														${colorPath3}
														<path d="M18,35A17,17,0,0,0,30.02,5.979,17,17,0,1,0,5.979,30.019,16.889,16.889,0,0,0,18,35m0,1A18,18,0,1,1,36,18,18,18,0,0,1,18,36Z" transform="translate(0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "C4_A") {
										// 2723 ~ 2742 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const color4 = optionCodeList.length > 3? optionCodeList[3]: "";
										const colorPath1 = `<path d="M-3395,7250a18,18,0,0,1,18-18v18Z" transform="translate(3413 -7241)" fill="${color1}" />`;
										const colorPath2 = `<path d="M-3377,7250v-18a18,18,0,0,1,18,18Z" transform="translate(3413 -7241)" fill="${color2}" />`;
										const colorPath3 = `<path d="M-3377,7250h18a18,18,0,0,1-18,18Z" transform="translate(3413 -7241)" fill="${color3}" />`;
										const colorPath4 = `<path d="M-3395,7250h18v18h0A18,18,0,0,1-3395,7250Z" transform="translate(3413 -7241)" fill="${color4}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 9)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g>
														${colorPath1}
														${colorPath2}
														${colorPath3}
														${colorPath4}
														<path d="M18,35A17,17,0,0,0,30.02,5.979,17,17,0,1,0,5.979,30.019,16.889,16.889,0,0,0,18,35m0,1A18,18,0,1,1,36,18,18,18,0,0,1,18,36Z" transform="translate(0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else if(optionColorType === "CP") {
										// 2745 ~ 2766 line
										const color1 = optionCodeList.length > 0? optionCodeList[0]: "";
										const color2 = optionCodeList.length > 1? optionCodeList[1]: "";
										const color3 = optionCodeList.length > 2? optionCodeList[2]: "";
										const color4 = optionCodeList.length > 3? optionCodeList[3]: "";
										const color5 = optionCodeList.length > 4? optionCodeList[4]: "";
										const color6 = optionCodeList.length > 5? optionCodeList[5]: "";
										const colorPath1 = `<path d="M1.333,15.8A18.1,18.1,0,0,1,.01,9.628c0-.027,0-.055,0-.082s0-.06,0-.089A18.086,18.086,0,0,1,1.91.935L1.938.88l.053-.1L2.074.614l0-.007Q2.239.3,2.413,0L18,9,2.413,18A18.157,18.157,0,0,1,1.333,15.8Z" transform="translate(-30.005 8.994)" fill="${color1}" />`;
										const colorPath2 = `<path d="M0,9A17.9,17.9,0,0,1,6.584,2.41,18.351,18.351,0,0,1,9.257,1.145a18.061,18.061,0,0,1,3.667-.95l.132-.019.019,0A18.137,18.137,0,0,1,15.582,0V18Z" transform="translate(-27.587 0)" fill="${color2}" />`;
										const colorPath3 = `<path d="M0,18V0A18.223,18.223,0,0,1,2.05.115,18.011,18.011,0,0,1,7.021,1.427l.068.026a.028.028,0,0,0,.015.008,17.506,17.506,0,0,1,1.89.949,18.328,18.328,0,0,1,2.047,1.376l.046.035.052.041A18.106,18.106,0,0,1,15.585,9Z" transform="translate(-12.003 0)" fill="${color3}" />`;
										const colorPath4 = `<path d="M0,9,15.583,0a18.31,18.31,0,0,1,.9,1.785l.045.1v0A18.087,18.087,0,0,1,18,8.808c0,.023,0,.048,0,.072s0,.064,0,.1a18.082,18.082,0,0,1-1.621,7.483l-.033.073-.027.058q-.332.71-.731,1.4Z" transform="translate(-12.004 8.997)" fill="${color4}" />`;
										const colorPath5 = `<path d="M0,0,15.585,9a18.082,18.082,0,0,1-2.041,2.858l-.014.016-.078.089a18.166,18.166,0,0,1-2.672,2.457l-.027.02-.1.075A18.057,18.057,0,0,1,.86,17.979L.7,17.986H.688C.46,18,.23,18,0,18Z" transform="translate(-12.005 17.994)" fill="${color5}" />`;
										const colorPath6 = `<path d="M14.717,17.98a18.082,18.082,0,0,1-9.094-2.987l-.054-.036-.062-.042A18.087,18.087,0,0,1,1.3,10.942h0l-.1-.127A18.134,18.134,0,0,1,0,9L15.589,0V18C15.3,18,15.006,17.994,14.717,17.98Z" transform="translate(-27.593 17.993)" fill="${color6}" />`;
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36.001" height="36" viewBox="0 0 36.001 36">
												<g transform="translate(-17.999 9)">
													<rect width="36" height="36" transform="translate(18 -9)" fill="none" />
													<g>
														${colorPath1}
														${colorPath2}
														${colorPath3}
														${colorPath4}
														${colorPath5}
														${colorPath6}
														<path d="M18,1A17,17,0,0,0,5.979,30.021,17,17,0,1,0,30.021,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(-30.004 0)" fill="rgba(29,29,27,0.5)" />
													</g>
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									} else {
										colorOpt = `
										<span class="option-selector-v2__color-code">
											<svg xmlns="http://www.w3.org/2000/svg" width="36" height="35.999" viewBox="0 0 36 35.999">
												<g transform="translate(-18.001 9)">
													<rect width="36" height="35.999" transform="translate(18.001 -9)" fill="none" />
													<path d="M18,0A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="${currentOption.optionCode}" />
													<!--/* [D] 제일 마지막 태그인 path의 fill 속성 값 변경 제외 */-->
													<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="rgba(0,0,0,0.5)" />
												</g>
											</svg>
											<span class="hidden">${currentOption.optionLocalName}</span>
											${isSelected? '' : '<span class="blind">selected</span>'}
										</span>
										`;
									}
								} else {
									colorOpt = `
									<span class="option-selector-v2__color-code">
										<svg xmlns="http://www.w3.org/2000/svg" width="36" height="35.999" viewBox="0 0 36 35.999">
											<g transform="translate(-18.001 9)">
												<rect width="36" height="35.999" transform="translate(18.001 -9)" fill="none" />
												<path d="M18,0A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="${currentOption.optionCode}" />
												<!--/* [D] 제일 마지막 태그인 path의 fill 속성 값 변경 제외 */-->
												<path d="M18,1A17,17,0,0,0,5.979,30.019,17,17,0,1,0,30.02,5.979,16.889,16.889,0,0,0,18,1m0-1A18,18,0,1,1,0,18,18,18,0,0,1,18,0Z" transform="translate(18.001 -9)" fill="rgba(0,0,0,0.5)" />
											</g>
										</svg>
										<span class="hidden">${currentOption.optionLocalName}</span>
										${isSelected? '' : '<span class="blind">selected</span>'}
									</span>
									`;
								}
								const colorSlide = `
								<div class="option-selector-v2__swiper-slide ${isSelected? 'is-checked' : ''} ${disabledClass}" role="listitem">
									<button type="button" class="option-selector-v2__color js-pfv2-product-fmychip" ${isDisabled? 'disabled' : ''} data-chiptype="color" data-modeli="${modelIdx}"
									an-tr="pd03_product finder:option-${pageTrack}-text-option" an-ca="option click" an-ac="pf product card"
									an-la="${type.toLowerCase()}:${currentOption.optionName.toLowerCase()}" ${modelCodeAttrForTagging} ${modelNameAttrForTagging}>
										${colorOpt}
									</button>
								</div>
								`;
								colorOpts.push(colorSlide);
							}
							if(colorOpts.length > 0) {
								hasColorOpt = true;
							} else if(colorOpts.join("").trim() !== "") {
								hasColorOpt = true;
							}
							optionItems += `
							<div class="option-selector-v2__color-name">${Granite.I18n.get("Color")} : 
								<button type="button" class="option-selector-v2__color-name-text">
									<strong class="hidden" data-global-text='{"Expand" : "${Granite.I18n.get("Click to Expand")}", "Collapse" : "${Granite.I18n.get("Click to Collapse")}"}'>${Granite.I18n.get("Click to Collapse")}</strong>
									<strong class="option-selector-v2__color-name-text-in">${selectedColor}</strong>
								</button>
								<div class="option-selector-v2__color-tooltip">
									${Granite.I18n.get("Color")} : <strong class="option-selector-v2__color-tooltip-text">${selectedColor}</strong>
									<a href="javascript:void(0)" class="option-selector-v2__color-tooltip-close" role="button">
										<span class="hidden">Close</span>
										<svg class="icon icon-close" focusable="false" aria-hidden="true">
											<use xlink:href="#delete-bold" href="#delete-bold"></use>
										</svg>
									</a>
								</div>
							</div>
							<div class="option-selector-v2__wrap option-selector-v2__wrap--color-chip" data-global-text='{ "selected" : "${Granite.I18n.get("Selected")}" }'>
								<div class="option-selector-v2__swiper">
									<!-- (2021.07.07 수정) aria-live="polite" 삭제 -->
									<div class="option-selector-v2__swiper-container">
										<!-- (2021.07.07 수정) role="list" 추가 -->
										<div class="option-selector-v2__swiper-wrapper" role="list" style="${selectorWrapperStyle}">
											${colorOpts.join("")}
										</div>
									</div>
								</div>
							</div>
							`;
							parentOptionModelIdx = curSelecteModelIdx;
						} else {
							var otherOpts = [];
							var curSelecteModelIdx = '';
							for(var oi=0; oi < optionObj.length; oi++) {
								/* 선택되어있는(대표모델) 옵션 flag값 셋팅 */
								currentOption = optionObj[oi];
								isSelected = false;
								var modelIdxList = currentOption.modelIdx.split(',');
								if(currentOption.modelIdx != null && arrayContains(modelIdxList, String(product.frontModelIdx))){
									isSelected = true;
									curSelecteModelIdx = currentOption.modelIdx;
									curSelectedOptions[type] = currentOption.optionLocalName;
									disabledClass = '';
									isDisabled = false;
								} else {
									disabledClass = ' is-disabled';
									isDisabled = true;
									if(viewOptionIdx === 0){
										disabledClass = '';
										isDisabled = false;
									} else {
										var parentModelIdxList = parentOptionModelIdx.split(',');

										for(var mli in modelIdxList){
											//상위 선택된 옵션칩 의 model idx 에 일치하는 model idx 가 있는 경우 활성화
											if(arrayContains(parentModelIdxList, modelIdxList[mli])){
												disabledClass = '';
												isDisabled = false;
												break;
											}
										}
									}
								}

								// 각 옵션칩의 model 정보 셋팅 ( 태깅 )
								var modelCodeAttrForTagging = '';
								var modelNameAttrForTagging = '';

								var modelIdx;

								// 각 옵션칩의 model 정보 셋팅 ( 태깅 )
								var modelCodeAttrForTagging = '';
								var modelNameAttrForTagging = '';

								var modelIdx;

								if(disabledClass == ''){
									var curSelectOptionMoIdx = currentOption.modelIdx;
									var otherSelectedOptionMoIdxList = [];
									var isColorType = false;

									for(var ooi in curViewOptionObj){
										if(ooi != type){
											var tmp_optionList = curViewOptionObj[ooi].optionList;
											for(var toi in tmp_optionList){
												var tmp_option = tmp_optionList[toi];
												var tmp_optionMoIdx = tmp_option.modelIdx;
												var tmp_optionMoIdxArr = tmp_optionMoIdx.split(',');

												// 현재 선택되어있는 option 색출
												if(tmp_optionMoIdxArr.indexOf(String(product.frontModelIdx))>-1){
													otherSelectedOptionMoIdxList.push(tmp_optionMoIdx);
												}
											}

										}
									}

									modelIdx = getSelectedModelIdx(curViewOptionObj, curSelectOptionMoIdx, otherSelectedOptionMoIdxList, isColorType, curOptionTypeList);

									if(product.modelList.length > modelIdx && isNotNull(product.modelList[modelIdx])){
										modelCodeAttrForTagging = ' data-modelcode="'+product.modelList[modelIdx].modelCode+'"';
										modelNameAttrForTagging = ' data-modelname="'+escapeHtml(product.modelList[modelIdx].modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))+'"';
									}
								}
								var otherOpt = `
								<div class="option-selector-v2__swiper-slide ${isSelected? 'is-checked' : ''} ${disabledClass}" role="listitem">
									<button type="button" class="option-selector-v2__size js-pfv2-product-fmychip" ${isDisabled? 'disabled' : ''} data-chiptype="other" data-modeli="${modelIdx}"
									an-tr="pd03_product finder:option-${pageTrack}-text-option" an-ca="option click" an-ac="pf product card"
									an-la="${type.toLowerCase()}:${currentOption.optionName.toLowerCase()}" ${modelCodeAttrForTagging} ${modelNameAttrForTagging}>
										<span class="option-selector-v2__size-text">${currentOption.optionLocalName}</span>
										${isSelected? '' : '<span class="blind">selected</span>'}
									</button>
								</div>
								`;
								otherOpts.push(otherOpt);
							}
							if(optionObj.length > 0) {
								optionItems += `
								<div class="option-selector-v2__wrap option-selector-v2__wrap--capacity" data-global-text='{ "selected" : "${Granite.I18n.get("Selected")}" }'>
									<div class="option-selector-v2__swiper">
										<!-- (2021.07.07 수정) aria-live="polite" 삭제 -->
										<div class="option-selector-v2__swiper-container">
											<!-- (2021.07.07 수정) role="list" 추가 -->
											<div class="option-selector-v2__swiper-wrapper" role="list" style="${selectorWrapperStyle}">
												${otherOpts.join("")}
											</div>
										</div>
									</div>
								</div>
								`;
							}
						}

						viewOptionIdx++;
					}
				}
				const colorTextClass = hasColorOpt? "option-selector-v2__color-text" : "";
				var optionItemsTemplate = isNotNull(product.viewOptionObj)? `
				<!-- (2021.04.14 수정) .option-selector-v2__color-text 추가 -->
				<div class="option-selector-v2 ${colorTextClass}">
					${optionItems}
				</div>
				`: "";
				const noDataClass = optionItems.trim() === ""? "no-data" : "";
				var productCardTemplate = siteCode !== "us"? `
				<div class="pd03-product-card__option-selector ${noDataClass}">
					${optionItemsTemplate}
				</div>
				`: "";
				return productCardTemplate;
			}

			/**
			 * Price 영역
			 * @param {*} product
			 * @param {*} upperStock
			 * @param {*} thirdPASeller
			 * @param {*} cardLayout
			 * @returns
			 */
			var productCardPriceAreaBuild = function(product, upperStock, thirdPASeller, cardLayout) {
				if(isNonShop && siteCode !== "tr") {
					return "";
				}
				cardLayout = String(cardLayout).toLowerCase();
				if(cardLayout !== 'vertical' && cardLayout !== 'horizontal') {
					cardLayout = 'vertical';
				}
				var frontModel = product.modelList[product.frontModelIdx];
				var priceDisplay = frontModel.priceDisplay;
				if((siteCode==="nl" || siteCode==="be" || siteCode ==="be_fr") && isNotNull(priceDisplay)){
					priceDisplay = deleteCurrency(priceDisplay, pfPriceCurrency);
				}

				var priceTextForCompare = "";

				//Hybris Intg > tradeIn price text 표시
				var tradeInPriceText = "";
				var tradeInClass = "";

				if(isHybrisIntg && isNotNull(frontModel.tradeInPriceText)) {
					tradeInPriceText = frontModel.tradeInPriceText;
					tradeInClass = " use-tradein-price";
				}


				var usePriceArea = false;
				if(priceDisplayYn === "Y" && isNotNull(priceDisplay)){
					usePriceArea = true;
				}

				if (siteCode==="mx" ){
					if( isNotNull(frontModel.priceDisplay)){
						originPrice = deleteCurrencyComma(frontModel.priceDisplay,pfPriceCurrency);
					}
				}

				if (siteCode==="tr" && isNotNull(priceDisplay)){
					usePriceArea = true;
				}

				var priceItem = "";
				let priceMainClass = "pd03-product-card__price-main";
				const priceSecondClass = "pd03-product-card__price-second";
				if(usePriceArea) {
					var promotionDisplay = "";
					var currentDisplay = priceDisplay;
					var currentDisplayForMiniCard = priceDisplay;

					// tagging data - originPrice Set ( data-modelprice )
					if(isNotNull(frontModel.price)){
						originPrice = frontModel.price;
					} else if( isNotNull(frontModel.priceDisplay)){
						originPrice = deleteCurrencyComma(frontModel.priceDisplay,pfPriceCurrency);
					}

					// monthlyPrice data
					var useMonthlyPrice = false;
					var monthlyPrice = "";
					var tenureVal = "";
					var leasingInterest = "";

					// leasingInfo data
					var useLeasingInfo = false;
					var downPaymentFormatted = "";
					var tenureUnit = "";
					var monthlyRate = "";

					// [US-EppDiscount] US Epp Discount Price
					var usEppCurrentPrice = 0; // epp discount 적용된 가격
					var usEppSavePrice = 0;
					var usDefaultCurrentPrice = 0; // epp discount 전 기본 할인가격
					var usCurrentPriceAttr = "";
					var usSuggestPriceAttr = "";
					var usUseTradeInDiscount = false;

					// msrpPrice
					var useMsrpPrice = false;
					// installmentDesc EMI popup
					let financingInstallmentDescText = "";

					if(siteCode==="us"){

						// 기본 가격정보 셋팅 ( exit epp 할 경우 api 호출 없이 가격정보만 변경처리 )
						usDefaultCurrentPrice = frontModel.price;
						var usPromotionPriceForTradeIn = frontModel.listPrice;
						if(isNotNull(frontModel.promotionPrice)){
							usDefaultCurrentPrice = frontModel.promotionPrice;
							usPromotionPriceForTradeIn = frontModel.promotionPrice;
						}

						//[US] tradeInDiscount 가 있는 경우 > listPrice : 원가 , tradeInDiscount : save, 재고없음이 아닌 경우
						if(isNotNull(frontModel.tradeInDiscount) && isNotNull(frontModel.listPrice)
								&& frontModel.tradeInDiscount != 0 && frontModel.listPrice != 0 && Number(frontModel.listPrice) > Number(frontModel.tradeInDiscount)
								&& upperStock !== "OUTOFSTOCK"
								){
							usUseTradeInDiscount = true;

							priceDisplay = currencyComma(frontModel.listPrice, pfPriceCurrency);

							usDefaultCurrentPrice = Number(usPromotionPriceForTradeIn) - Number(frontModel.tradeInDiscount);

							currentDisplay = 'From '+currencyComma(usDefaultCurrentPrice, pfPriceCurrency)+' with trade-in<sup>θ</sup>';

							// tagging data - originPrice Set ( data-modelprice )
							originPrice = frontModel.listPrice;
							// tagging data - discountPrice Set ( data-discountprice )
							discountPrice = usDefaultCurrentPrice;
						}

						usCurrentPriceAttr = ' data-de-currentprice="'+usDefaultCurrentPrice+'"';
						if(usUseTradeInDiscount){
							usCurrentPriceAttr += ' data-de-use-tradein="true"';
						}
						usSuggestPriceAttr = ' data-de-originpricetxt="'+priceDisplay+'"';

						// US Epp 가격표시 관련 정보 셋팅
						if((isNotNull(frontModel.prdSavePriceInf) || isNotNull(frontModel.tradeDiscountPrice)) && isNotNull(frontModel.prdPriceInf)){
							usEppSavePrice = 0;
							if(isNotNull(frontModel.prdSavePriceInf)){
								usEppSavePrice += frontModel.prdSavePriceInf;
							}
							if(isNotNull(frontModel.tradeDiscountPrice)){
								usEppSavePrice += frontModel.tradeDiscountPrice;
							}

							// US Epp 할인 가격 : prdSavePriceInf + tradeDiscountPrice
							usEppCurrentPrice = frontModel.prdPriceInf - usEppSavePrice;

							// tagging data - originPrice Set ( data-modelprice )
							originPrice = frontModel.prdPriceInf;
							// tagging data - discountPrice Set ( data-discountprice )
							discountPrice = usEppCurrentPrice;
						}
					}
					//new-hybris
					if(isGPv2 || isNewHybris){
						if(isNotNull(frontModel.leasingInfo) && (siteCode === "nl" || siteCode === "be" ||siteCode === "be_fr") && frontModel.upgrade === "Y"){
							// nl 사이트만 leasingInfo 사용
							var leasingInfo = frontModel.leasingInfo;
							if(isNotNull(leasingInfo.monthlyRate) && isNotNull(leasingInfo.downPaymentFormatted)){
								monthlyRate = deleteCurrency(leasingInfo.monthlyRate, pfPriceCurrency);
								tenureVal = leasingInfo.tenureVal;
								downPaymentFormatted = deleteCurrency(leasingInfo.downPaymentFormatted, pfPriceCurrency);
								tenureUnit = leasingInfo.tenureUnit;
								useLeasingInfo = true;
							}
						} else if ( isNotNull(frontModel.monthlyPriceInfo)
								&& isNotNull(frontModel.monthlyPriceInfo.leasingMonthly) && isNotNull(frontModel.monthlyPriceInfo.leasingMonths) && isNotNull(frontModel.monthlyPriceInfo.interest)){
							monthlyPrice = frontModel.monthlyPriceInfo.leasingMonthly;
							monthlyPrice = currencyComma(monthlyPrice, pfPriceCurrency);
							tenureVal = frontModel.monthlyPriceInfo.leasingMonths;
							dataMonth = frontModel.monthlyPriceInfo.leasingMonths;// add on
							leasingInterest = frontModel.monthlyPriceInfo.interest;

							useMonthlyPrice = true;
						}

						promotionDisplay = frontModel.promotionPriceDisplay;
						if((siteCode==="nl" || siteCode==="be" || siteCode ==="be_fr") && isNotNull(promotionDisplay)){
							promotionDisplay = deleteCurrency(promotionDisplay, pfPriceCurrency);
						}
						if((siteCode==="nl" || siteCode==="be" || siteCode ==="be_fr") && isNotNull(frontModel.msrpPrice)){
							useMsrpPrice = true;
						}
						
						//[EPP] nl/be/be_fr leasing 정보사용 예외처리 (2022.08.24)
						if((siteCode==="nl" || siteCode==="be" || siteCode ==="be_fr" || siteCode ==="pl") && isEppSite){
							useLeasingInfo = false;
							useMonthlyPrice = false;
						}
					} else {
						if( isNotNull(frontModel.monthlyPriceInfo) &&
								isNotNull(frontModel.monthlyPriceInfo.leasingMonthly) && isNotNull(frontModel.monthlyPriceInfo.leasingMonths) &&
								(siteCode === "au" || siteCode === "nz" || siteCode === "ae" || siteCode === "my" || siteCode === "sg" || siteCode === "ca" || siteCode === "ca_fr" ||
								siteCode === "it" || siteCode === "se" || siteCode === "dk" || siteCode === "fi" || siteCode === "no" || siteCode === "es" || siteCode === "pt" ||
								siteCode === "th" || siteCode === "tw" || siteCode === "ru" || siteCode === "ch" || siteCode === "ch_fr" || siteCode === "za" || siteCode === "br"  ||
								siteCode === "at" || siteCode === "levant" || siteCode === "levant_ar" || siteCode === "sa" || siteCode === "sa_en" )){
							var monthlyPriceInfo = frontModel.monthlyPriceInfo;
							monthlyPrice = monthlyPriceInfo.leasingMonthly;
							monthlyPrice = currencyComma(monthlyPrice, pfPriceCurrency);
							tenureVal = monthlyPriceInfo.leasingMonths;

							useMonthlyPrice = true;
						}
						if(isHybrisIntg){
							promotionDisplay = frontModel.promotionPriceDisplay;
						}
					}

					if(isNotNull(promotionDisplay) && !usUseTradeInDiscount){
						currentDisplay = promotionDisplay;
						currentDisplayForMiniCard = promotionDisplay;
					}

					let topPrice = '';
					let topPriceAttr = '';
					var savePriceSpan = ``;
					
					if(isGPv2 || isNewHybris) {
						if(isNotNull(promotionDisplay) || usUseTradeInDiscount ) {
							var listPrice = 0;
							if(frontModel.listPrice != null){
								listPrice = parseFloat(frontModel.listPrice) - parseFloat(frontModel.price);
							}

							var savePrice = parseFloat(frontModel.price) - parseFloat(frontModel.promotionPrice);

							// US Epp Exit 시 원래 save 가격 표시를 위한 attr
							var usOriginSaveAttr = "";
							if(siteCode === "us"){
								var usOriginSaveText = isNotNull(frontModel.saveText) && savePrice > 0 ? frontModel.saveText : 0;

								if(usUseTradeInDiscount){
									savePrice = Number(frontModel.listPrice) - discountPrice;
									usOriginSaveText = currencyComma(savePrice, pfPriceCurrency);
									frontModel.saveText = usOriginSaveText;
								}
								usOriginSaveAttr = ' data-de-saveprice="'+usOriginSaveText+'"';
							}

							if(siteCode==="us" && usEppSavePrice > 0) {
								topPriceAttr = `${usSuggestPriceAttr}`;
								topPrice = `
								<span class="pd03-product-card__price-origin">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<del>${currencyComma(frontModel.prdPriceInf, pfPriceCurrency)}</del>
								</span>
								<span class="pd03-product-card__price-save" ${usOriginSaveAttr}>
									<span class="hidden">Save Price: </span>
									${Granite.I18n.get("Save {0}", [currencyComma(usEppSavePrice, pfPriceCurrency)])}
								</span>
								`;
							} else if(savePrice !== 0 && isNotNull(frontModel.saveText) && !(isEppSite && siteCode === "pl")) {
								discountPrice = frontModel.promotionPrice; // pl 비노출 CRHQ-8555
								var saveText = frontModel.saveText;
								if(eppIsUserGroupPricing){
									saveText = savePrice;
								}
								
								if(siteCode !== "nl" && siteCode !== "be" && siteCode !== "be_fr") {
									/* GPv2 국가 save 문구 노출
									 * SEBN 국가 save 문구 미노출 처리 */
									let savePriceText = Granite.I18n.get("Save {0}", [currencyComma(saveText, pfPriceCurrency)]);
									/*
									if(siteCode === "hr") {
										savePriceText = Granite.I18n.get("Save {0}", [currencyComma(saveText, pfPriceCurrency) + " (" + euroToKunaPrice(saveText) + ")"]);
									}
									*/
									if(siteCode === "iq_ar" || siteCode === "iq_ku"){
										savePriceText = saveText;
									}
									savePriceSpan = `
									<span class="pd03-product-card__price-save" ${usOriginSaveAttr}>
										<span class="hidden">Save Price: </span>
										${savePriceText}
									</span>
									`;
								}
								var priceText = "";
								if(siteCode === "nl" || siteCode === "be" || siteCode === "be_fr" || siteCode === "de") {
									priceText = Granite.I18n.get("From {0}",[`<del>${priceDisplay}</del>`]);
								} else if((isStrikethroughRmSite && frontModel.lowestWasPriceUseYn !== "Y") || siteCode === "ro") {
									priceText = "";
									savePriceSpan = `
									<span class="pd03-product-card__price-save" ${usOriginSaveAttr}>
										<span class="hidden">Save Price: </span>
									</span>
									`;
								} else {
									priceText = `<del>${priceDisplay}</del>`;
								}

								topPriceAttr = ``;
								topPrice = `
								<span class="pd03-product-card__price-origin">
									${(siteCode=="in")? 'MRP (Inclusive of all taxes) ' : ''}
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									${priceText}
								</span>
								${savePriceSpan}
								`;
							} else if(siteCode=="us") {
								//savePrice 가 없는 경우 Epp 선택 후 사용할 save 영역 생성 ( 미노출 )
								topPriceAttr = ``;
								topPrice = `
								<span class="pd03-product-card__price-origin">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<del>${priceDisplay}</del>
								</span>
								<span class="pd03-product-card__price-save" style="display:none;"></span>
								`;
							} else if(listPrice > 0 && (siteCode === "nl" || siteCode === "be" || siteCode === "be_fr")) {
								originPrice = frontModel.listPrice;
								discountPrice = frontModel.promotionPrice;
								topPriceAttr = ``;
								topPrice = `
								<span class="pd03-product-card__price-origin">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<span>${Granite.I18n.get("Listprice")}</span> ${currencyComma(frontModel.listPrice, pfPriceCurrency)}
								</span>
								`;
							}
							emiPrice = frontModel.promotionPrice;
						} else {
							emiPrice = frontModel.price;
							var usOriginSaveAttr = ' data-de-saveprice="0"';
							if(siteCode=="us") {
								var savePriceStyle = ' style="display:none;"';
								if(isNotNull(usEppSavePrice) && usEppSavePrice != 0){
									//Epp Save 정보가 있는 경우 Show 처리
									savePriceStyle = '';
								}
								topPriceAttr = `${savePriceStyle} ${usSuggestPriceAttr}`;
								topPrice = `
								<span class="pd03-product-card__price-origin">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<del>${priceDisplay}</del>
								</span>
								<span class="pd03-product-card__price-save" ${usOriginSaveAttr} ${savePriceStyle}>
									<span class="hidden">Save Price: </span>
									${Granite.I18n.get("Save {0}", [currencyComma(usEppSavePrice, pfPriceCurrency)])}
								</span>
								`;
							}
						}
					} else if (isHybrisIntg) {
						emiPrice = frontModel.price;
						if(isNotNull(frontModel.promotionPrice) && isNotNull(frontModel.promotionPriceDisplay) && (Number(frontModel.price) > Number(frontModel.promotionPrice))) {
							emiPrice = frontModel.promotionPrice;
							discountPrice = frontModel.promotionPrice;
							if(siteCode === "my"){
								var savePrice = parseFloat(frontModel.price) - parseFloat(frontModel.promotionPrice);
								
								savePriceSpan = `
								<span class="pd03-product-card__price-save" >
									<span class="hidden">Save Price: </span>
									${Granite.I18n.get("Save {0}", [currencyComma(savePrice, pfPriceCurrency)])}
								</span>
								`;
							}
							topPriceAttr = ``;
							topPrice = `
							<span class="pd03-product-card__price-origin">
								<span class="hidden">${frontModel.afterTaxPriceDisplay}</span>
								<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
								<del>${priceDisplay}</del>
							</span>
							${savePriceSpan}
							`;
						}
					} else {
						if(isNotNull(frontModel.formattedPriceSave) && siteCode !== "br") {
							topPriceAttr = ``;
							topPrice = `
							<span class="pd03-product-card__price-label">
								<span class="hidden">${Granite.I18n.get("Price before discount")}: </span>
								${frontModel.formattedPriceSave}
							</span>
							`;
						}
						if(isNotNull(frontModel.rrpPriceDisplay) && isNotNull(frontModel.formattedPriceSave) && siteCode === "br") {
							topPriceAttr = ``;
							topPrice = `
							<span class="pd03-product-card__price-origin">
								<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
								<del>${frontModel.rrpPriceDisplay}</del>
							</span>
							<span class="pd03-product-card__price-save" ${usOriginSaveAttr}>
								<span class="hidden">Save Price: </span>
								${frontModel.formattedPriceSave}
							</span>
							`;
						}
						if(siteCode === "it"){
							topPriceAttr = ``;
							topPrice = ``;
							
							if(isNotNull(frontModel.lowestWasPrice) && isNotNull(frontModel.promotionPrice) 
									&& frontModel.promotionPrice < frontModel.lowestWasPrice
									){
								let savePrice = parseFloat(frontModel.lowestWasPrice) - parseFloat(frontModel.promotionPrice);
								let savePriceText = "";
								if(siteCode === "it"){
									savePriceText = Granite.I18n.get("Save the {0}%", [getDiscountRate(savePrice, frontModel.lowestWasPrice)]);
								}else{
									savePriceText = Granite.I18n.get("Save {0}", [currencyComma(savePrice, pfPriceCurrency)]);
									
								}
								
								topPrice = `
								<span class="pd03-product-card__price-label">
									<span class="hidden">${Granite.I18n.get("Original Price")}: </span>
									<del>${frontModel.lowestWasPriceDisplay}</del>
								</span>
								<span class="pd03-product-card__price-save">
									<span class="hidden">Save Price: </span>
									${savePriceText}
								</span>
								`;
							}
						}
					}
					let mainPrice = "";
					let mainPriceAttr = "";
					let monthlyFinanceText = "";
					let rrpPricePTag = ``;
					if(siteCode === "ro" && parseFloat(frontModel.promotionPrice) !== parseFloat(frontModel.price)){
						rrpPricePTag = `
						<p class="pd03-product-card__price-pr">
							<span class="hidden">PR Price :</span>
							<span class="pd03-product-card__price-pr-unit">${Granite.I18n.get("RRP {0}", [frontModel.priceDisplay])}</span>
						</p>
						`;
					}
					if((upperStock === "LEARNMORE" || upperStock === "NOORDER") && (siteCode === "nl" || siteCode === "be" || siteCode === "be_fr")) {
						mainPriceAttr = `data-pricetext="${priceDisplay}"`;
						mainPrice = `
						<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
						${priceDisplay}
						`;
						dataPricetext = priceDisplay;
						emiPrice = frontModel.price;
					} else if(((isGPv2 || isNewHybris) && upperStock !== "LEARNMORE" && upperStock !== "NOORDER") || (!isGPv2 && !isNewHybris && upperStock !== "LEARNMORE")) {
						if(isNotNull(tradeInPriceText)) {
							mainPriceAttr = `data-pricetext="${tradeInPriceText}"`;
							mainPrice = `
							<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
							${tradeInPriceText}
							`;
							dataPricetext = tradeInPriceText;
						} else if(useMonthlyPrice && !usUseTradeInDiscount) {
							// console.debug("test 1", useMonthlyPrice);
							if(siteCode === "id") {
								priceTextForCompare = Granite.I18n.get("pf From {0}/mo",[monthlyPrice]) + ' ';
							} else {
								priceTextForCompare = Granite.I18n.get("From {0}/mo",[monthlyPrice]) + ' ';
							}

							if(leasingInterest !== "" && siteCode !== "pe" && siteCode !== "cl" && siteCode !== "mx" && siteCode !== "co" && siteCode !== "de"){
								priceTextForCompare +=
									Granite.I18n.get("for {0} mos at {1}% APR",[tenureVal, leasingInterest]) + ' ';
							} else {
								priceTextForCompare += Granite.I18n.get("for {0} mos",[tenureVal])+' ';
							}
							financingInstallmentDescText = priceTextForCompare;
							priceTextForCompare += Granite.I18n.get("or")+' ';

							var priceTextForCompareAttr = ' data-pricetext="'+priceTextForCompare+currentDisplay+'"';
							dataPricetext = priceTextForCompare + currentDisplay;
							if(siteCode === "us") {
								if(isNotNull(usEppCurrentPrice) && usEppCurrentPrice != 0) {
									//compare 추가시 표시되는 문구 설정
									var eppPriceTextForCompare =
										Granite.I18n.get("From {0}/mo",[monthlyPrice])+
										' '+ Granite.I18n.get("for {0} mos at {1}% APR",[tenureVal, leasingInterest])+
										' '+ Granite.I18n.get("or")+' '+currencyComma(usEppCurrentPrice, pfPriceCurrency);
									priceTextForCompareAttr = ' data-use-epp-discount="true"';
									currentDisplay = currencyComma(usEppCurrentPrice, pfPriceCurrency);
								}

								priceTextForCompareAttr += ' data-de-pricetext="' + priceTextForCompare + '" data-de-currentprice="' + usDefaultCurrentPrice + '"' + ' data-use-monthly="true"';
							}
							if(siteCode === "br") {
								var formattedPriceSave = isNotNull(frontModel.formattedPriceSave)?frontModel.formattedPriceSave:"";
								var afterTaxPriceDisplay = isNotNull(frontModel.afterTaxPriceDisplay)?frontModel.afterTaxPriceDisplay:"";
								priceTextForCompareAttr = 
									' data-pricetext="' + currentDisplay + ' à vista ' + afterTaxPriceDisplay + ' em ' + tenureVal  + 'x ' + monthlyPrice + ' sem juros"';
								dataPricetext = currentDisplay + ' à vista ' + afterTaxPriceDisplay + ' em ' + tenureVal  + 'x ' + monthlyPrice + ' sem juros';
								
								mainPriceAttr = `${priceTextForCompareAttr} ${usCurrentPriceAttr}`;
								let savingInformationTag = "";
								if(isNotNull(frontModel.rrpPriceDisplay) && isNotNull(frontModel.formattedPriceSave)){
									savingInformationTag = `
									<span class="pd03-product-card__price-main-unit">à vista</span>
									`;
								}
								mainPrice = `
								<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
								${currentDisplay} 
								${savingInformationTag}
								`;
								monthlyFinanceText = `${afterTaxPriceDisplay} em ${tenureVal}x ${monthlyPrice} sem juros`;
							
							} else if(siteCode === "nl" || siteCode === "be" || siteCode === "be_fr") {
								var leasingUpfront = frontModel.monthlyPriceInfo.leasingUpfront;

								priceTextForCompareAttr =
									' data-pricetext="'+currentDisplay+' '+Granite.I18n.get("or")+' '+ leasingUpfront  + " + " + monthlyPrice + " x " + tenureVal  + " " +  Granite.I18n.get("months")+'"';
								dataPricetext = currentDisplay+' '+Granite.I18n.get("or")+' '+ leasingUpfront  + " + " + monthlyPrice + " x " + tenureVal  + " " +  Granite.I18n.get("months");
								mainPriceAttr = `${priceTextForCompareAttr} ${usCurrentPriceAttr}`;
								mainPrice = `
								<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
								${dataPricetext}
								`;
								// mainPrice = `
								// <p class="${priceMainClass}" ${priceTextForCompareAttr} ${usCurrentPriceAttr}>
								// 	<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
								// 	${currentDisplay}
								// </p>
								// `;
							} else {
								var displayText = "";
								if(siteCode=="id"){
									displayText += Granite.I18n.get("pf From {0}/mo", [monthlyPrice])+' ';
								} else {
									displayText += Granite.I18n.get("From {0}/mo", [monthlyPrice])+' ';
								}

								if(leasingInterest !== "" && siteCode !== "pe" && siteCode !== "cl" && siteCode !== "mx" && siteCode !== "co" && siteCode !== "de"){
									displayText += Granite.I18n.get("for {0} mos at {1}% APR", [tenureVal, leasingInterest]);
								} else {
									displayText += Granite.I18n.get("for {0} mos", [tenureVal]);
								}
								if(siteCode !== "sa" && siteCode !== "sa_en"){
									displayText += ' ' + Granite.I18n.get("or") + ' ' + currentDisplay
								}
								mainPriceAttr = `${priceTextForCompareAttr} ${usCurrentPriceAttr}`;
								monthlyFinanceText = displayText;
								
								if(siteCode === "pe" || siteCode === "cl" || siteCode === "mx" || siteCode === "co" || siteCode === "at"
									|| siteCode === "de"
								){
									mainPrice = `
									<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
									${displayText}
									`;
								}else{
									mainPrice = `
									<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
									${currentDisplay}
									`;
								}
							}
							dataMonth = tenureVal; // add on
						} else if(useLeasingInfo) {
							if(downPaymentFormatted !== "" && tenureUnit !== "" && tenureVal !== "" && monthlyRate !== "") {
								var leasingText = " " + downPaymentFormatted + " + " + tenureVal + " x " + monthlyRate + "/" + Granite.I18n.get(tenureUnit);
			  					priceTextForCompare = currentDisplay + ' '+Granite.I18n.get("or")+' ' + leasingText;

								var priceTextForCompareAttr = ' data-pricetext="'+priceTextForCompare+'"';
								dataPricetext = priceTextForCompare;
								mainPriceAttr = priceTextForCompareAttr;
								mainPrice = `
								<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
								${currentDisplay} ${Granite.I18n.get("or")} ${leasingText}
								`;
							}
							dataMonth = tenureVal; // add on
						} else {
							var priceTextForCompareAttr = ' data-pricetext="'+currentDisplay+'"';
							dataPricetext = currentDisplay;
							var defaultCurrentDisplay = currentDisplay;
							if(siteCode==="us") {
								if(isNotNull(usEppCurrentPrice) && usEppCurrentPrice != 0) {
									currentDisplay = currencyComma(usEppCurrentPrice, pfPriceCurrency);
									if(frontModel.tradeDiscountPrice > 0) {
										// tradeDiscount 가 있는경우 아래 문구로 표시
										currentDisplay = 'From '+currentDisplay+' with trade-in<sup>θ</sup>';
									}
									priceTextForCompareAttr = ' data-use-epp-discount="true"';
								}
								priceTextForCompareAttr += ' data-de-pricetext="'+defaultCurrentDisplay+'" data-use-monthly="false"';
							}
							mainPriceAttr = `${priceTextForCompareAttr} ${usCurrentPriceAttr}`;
							mainPrice = `
							<span class="hidden">${Granite.I18n.get("Total Price")}: </span>
							${currentDisplay}
							`;
						}
					}
					var advicedPriceDiv = "";
					if(useMsrpPrice) {
						advicedPriceDiv = `
						<div class="pd03-product-card__finance">
							${Granite.I18n.get("Listprice")} ${currencyComma(frontModel.msrpPrice, pfPriceCurrency)}
						</div>
						`;
					}
					// COMP6FE-1599 [EPP] SEPOL MSRP Price 추가건
					if ( isEppSite && siteCode === "pl" ){
                    	let msrpPrice = '';
                    	if ( isNotNull(frontModel.msrpPrice) ){
                    		msrpPrice = ' ' + currencyComma(frontModel.msrpPrice, pfPriceCurrency);
							advicedPriceDiv = `<div class="pd03-product-card__finance"><span style="color:#ff0000"><strong>${Granite.I18n.get("Listprice")}${msrpPrice}</strong></span></div>`;
                    	} else {
                    		advicedPriceDiv = `<div class="pd03-product-card__finance"></div>`;
                    	}
					}					
					if( useMonthlyPrice && (siteCode === "pe" || siteCode === "cl" || siteCode === "mx" || siteCode === "co" )){
						advicedPriceDiv = `
							<div class="pd03-product-card__finance">*Aplican condiciones</div>
							`;
					}
					var calcFinance = "";
					if(isGPv2 || isNewHybris) {
						var financingDesc = [];
						if(frontModel.financingFormattedDesc != null && frontModel.financingFormattedDesc.length > 0){
							financingDesc = frontModel.financingFormattedDesc;
						} else {
							financingDesc = frontModel.financingDesc;
						}
						if (isNotNull(financingDesc) && financingDesc.length > 0 && siteCode !== "us") {
							for(var fdi in financingDesc) {
								var financingHtml = financingDesc[fdi];
								if(fdi == 0) {
									// var desc = String(financingDesc[fdi]).replace(Granite.I18n.get("Calculate Finance"), "").trim();
									if(isNotNull(emiPrice)) {
										if((siteCode === "in" || siteCode === "uk" || siteCode === "id" || siteCode === "ee" || siteCode === "lv" || siteCode === "lt" || siteCode === "pl" || siteCode === "ro" 
											|| siteCode === "ua" || siteCode === "ph" || siteCode === "cn"
										 ) && isNotNull(emiUrl) && frontModel.financing == "Y") {
											// new-hybris
											// financingHtml = `
											// <div class="pd03-product-card__finance">
											// 	${desc}
											// 	<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install" data-modelcode="${frontModel.shopSkuCode}"
											// 	data-link_info="${emiUrl}/?sku=${frontModel.shopSkuCode}&price=${emiPrice}&page=pf"
											// 	an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
											// 		${Granite.I18n.get("Calculate Finance")}
											// 	</button>
											// </div>
											// `;
											if(siteCode === "ua"){
												financingHtml = `
												<div class="pd03-product-card__finance">
													${financingInstallmentDescText}.
													<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install" data-modelcode="${frontModel.shopSkuCode}"
													data-link_info="${emiUrl}/?sku=${frontModel.shopSkuCode}&price=${emiPrice}&page=pf"
													an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
														${Granite.I18n.get("Calculate Finance")}
													</button>
												</div>
												`;
											}else{
												financingHtml = `
												<div class="pd03-product-card__finance">
													<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install" data-modelcode="${frontModel.shopSkuCode}"
													data-link_info="${emiUrl}/?sku=${frontModel.shopSkuCode}&price=${emiPrice}&page=pf"
													an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
														${financingDesc[fdi]}
													</button>
												</div>
												`;
											}
										} else if(siteCode !== "in" && siteCode !== "uk" && isNotNull(financingUrl)) {
											var financeLayerUrl = financingUrl;
											if(siteCode !== "de") {
												financeLayerUrl +='/?total='+ emiPrice +'&page=pf';
											}
											if(siteCode!=="fr") {
												// financingHtml = `
												// <div class="pd03-product-card__finance">
												// 	${desc}
												// 	<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install"
												// 	data-link_info="${financeLayerUrl}" aria-label="${Granite.I18n.get("Calculate Finance")}" ${isNewHybris? 'data-modelcode="' + frontModel.shopSkuCode + '"' : ""}
												// 	an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
												// 		${Granite.I18n.get("Calculate Finance")}
												// 	</button>
												// </div>
												// `;
												financingHtml = `
												<div class="pd03-product-card__finance">
													<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install"
													data-link_info="${financeLayerUrl}" aria-label="${financingDesc[fdi]}" ${isNewHybris? 'data-modelcode="' + frontModel.shopSkuCode + '"' : ""}
													an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
														${financingDesc[fdi]}
													</button>
												</div>
												`;
											} else {
												// financingHtml = `<div class="pd03-product-card__finance">From $222.17/month. <button type="button" class="pd03-product-card__finance-cta">Calculate Finance</button></div>`;
												financingHtml = `<div class="pd03-product-card__finance"><button type="button" class="pd03-product-card__finance-cta">${financingDesc[fdi]}</button></div>`;
											}
										}
									}
								}
							}
							calcFinance = financingHtml;
						}
					} else if(isHybrisIntg) {
						var financingHtml = "";
						if (frontModel.financing === "Y" && isNotNull(frontModel.financingDesc)) {
							financingHtml = frontModel.financingDesc;
							if(isNotNull(emiPrice) && isNotNull(financingUrl)) {
								// var desc = String(frontModel.financingDesc).replace(Granite.I18n.get("Calculate Finance"), "").trim();
								var financeLayerUrl = financingUrl +'/?total='+ emiPrice +'&page=pf';
								// financingHtml = `
								// <div class="pd03-product-card__finance">
								// 	${desc}
								// 	<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install"
								// 	aria-label="${Granite.I18n.get("Calculate Finance")}" data-link_info="${financeLayerUrl}"
								// 	an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
								// 		${Granite.I18n.get("Calculate Finance")}
								// 	</button>
								// </div>
								// `;
								financingHtml = `
								<div class="pd03-product-card__finance">
									<button type="button" class="pd03-product-card__finance-cta js-pfv2-calculate-popup-open" data-type="install"
									aria-label="${Granite.I18n.get("Calculate Finance")}" data-link_info="${financeLayerUrl}"
									an-tr="pd03_product finder:option-${pageTrack}-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">
										${frontModel.financingDesc}
									</button>
								</div>
								`;
							}
						}
						calcFinance = financingHtml;
					}

					let monthlyFinanceArea = "";
					if(monthlyFinanceText !== "" && (isOldHybris || siteCode === "br" || siteCode === "my")) {
						monthlyFinanceArea = `
						<div class="pd03-product-card__finance">
							${monthlyFinanceText}
						</div>
						`;
					}

					const topPriceDescription = (siteCode === "pl" && frontModel.lowestWasPriceUseYn === "Y")?`
								<p class="pd03-product-card__price-description">
									<span class="hidden">Was price description: </span>
									<span class="ppd03-product-card__finance">${Granite.I18n.get("Lowest price 30 days before the discount:")}</span>
								</p>
								`:``;
					const priceSecondNoDataClass = topPrice.trim() === ""? "no-data" : "";
					const priceMainNoDataClass = mainPrice.trim() === ""? "no-data" : "";
					const priceDescNoDataClass = advicedPriceDiv.trim() === "" && calcFinance.trim() === "" && monthlyFinanceArea.trim() === ""? "no-data" : "";
					// mainPriceAttr
					
					if(siteCode === "co" && frontModel.vatEligible === "true"){
						priceItem = `
							<p class="pd03-product-card__price-excluding-vat" data-pricetext="${frontModel.vatFreePriceDisplay}" >${Granite.I18n.get("Price without VAT")}: ${frontModel.vatFreePriceDisplay}</p>
							`;
						if(isNotNull(promotionDisplay)){
							priceItem +=`
									<p class="pd03-product-card__price-special" data-pricetext="${promotionDisplay}">${Granite.I18n.get("Price with discount")}: ${promotionDisplay}</p>
									`;
						}
						priceItem += `
							<p class="pd03-product-card__price-rrp" data-pricetext="${priceDisplay}">${Granite.I18n.get("Price before")}: <del>${priceDisplay}</del></p>
							`;
					}else if(siteCode === "it"){
						priceItem = `
							${topPriceDescription}
							<p class="${priceMainClass} ${priceMainNoDataClass}" ${mainPriceAttr}>
								${mainPrice}
							</p>
							<p class="${priceSecondClass} ${priceSecondNoDataClass}" ${topPriceAttr}>
								${topPrice}
							</p>
							${rrpPricePTag}
							<div class="pd03-product-card__price-description ${priceDescNoDataClass}">
								${advicedPriceDiv}
								${calcFinance}
								${monthlyFinanceArea}
							</div>
							`;
					}else{
						priceItem = `
							${topPriceDescription}
							<p class="${priceSecondClass} ${priceSecondNoDataClass}" ${topPriceAttr}>
								${topPrice}
							</p>
							<p class="${priceMainClass} ${priceMainNoDataClass}" ${mainPriceAttr}>
								${mainPrice}
							</p>
							${rrpPricePTag}
							<div class="pd03-product-card__price-description ${priceDescNoDataClass}">
								${advicedPriceDiv}
								${calcFinance}
								${monthlyFinanceArea}
							</div>
						`;
					}
				}
				if(priceItem.trim() === "") {
					priceItem = `
					<p class="${priceSecondClass} no-data"></p>
					<p class="${priceMainClass} no-data"></p>
					<div class="pd03-product-card__price-description no-data"></div>
					`;
				}

				var sellerInfo = "";
				if(isNotNull(thirdPASeller)) {
					sellerInfo += `<p class="seller-info">${thirdPASeller}</p>`;
				}

				// pd03-product-card__price-croatia
				const croatiaClass = siteCode === "hr"? "pd03-product-card__price-croatia" : "";
				const seprClass = (siteCode === "pe" || siteCode === "cl" || siteCode === "mx" || siteCode === "co")? "pd03-product-card__price--sepr" : "";
				const seromClass = (siteCode === "ro" && parseFloat(frontModel.promotionPrice) !== parseFloat(frontModel.price)) ? "pd03-product-card__price-serom" : "";

				const sellerNoDataClass = sellerInfo.trim() === ""? "no-data" : "";
				var productCardTemplate = `
				<div class="pd03-product-card__price for-${cardLayout} ${tradeInClass} ${croatiaClass} ${seprClass} ${seromClass}">
					${priceItem}
				</div>
				<div class="pd03-product-card__seller for-${cardLayout} ${sellerNoDataClass}">
					${sellerInfo}
				</div>
				`;
				return productCardTemplate;
			}

			/**
			 * package 영역
			 * @param {*} frontModel
			 * @param {*} cardLayout
			 * @returns
			 */
			var productCardPkgChildBuild = function(frontModel, cardLayout) {
				let productCardTemplate = "";
				cardLayout = String(cardLayout).toLowerCase();
				if(cardLayout !== 'vertical' && cardLayout !== 'horizontal') {
					cardLayout = 'vertical';
				}
				let energyLabelComboPackageCheck = false;
				if(isNotNull(frontModel.packageYN) && frontModel.packageYN === "Y"){
					
					let pkgChildModels = frontModel.pkgChildModelList;
					let pkgListTemp = ``;
					
					if(pkgChildModels.length > 0){
					
						for(var pkgChildModelIdx in pkgChildModels){
							let energyLabeleCheck = false;
							pkgChildModel = pkgChildModels[pkgChildModelIdx];
							pkgChildModel.modelCode;
							pkgChildModel.modelName;
							pkgChildModel.thumbUrl;
							//pfImgDomain(pkgChildModel.thumbUrl, "product-desktop", null, false);
							//pfImgDomain(pkgChildModel.thumbUrl, "product-mobile", null, false);
							let displayNameTemp = pkgChildModel.displayName;
							// TODO markup ~~
							let energyLabelTemp = ``;
							if(isNotNull(pkgChildModel.energyLabelGrade)){
								energyLabeleCheck = true;
								energyLabelComboPackageCheck = true;
								let isNewEnergyLabel = pkgChildModel.newEnergyLabel === "Y";
								let ficheText = ``;
								if(isNotNull(pkgChildModel.ficheFileUrl)) {
									ficheText = `
									<a class="badge-energy-label__text" href="${pkgChildModel.ficheFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}">
										${isNewEnergyLabel? Granite.I18n.get("PRODUCT INFORMATION SHEET") : Granite.I18n.get("Product Fiche")}
									</a>`;
								}
								let energyLabelClassTemp = `badge-energy-label__badge badge-energy-label__badge--${pkgChildModel.energyLabelGrade.toLowerCase()}`;
								let energyLabelGradeTag = `${pkgChildModel.energyLabelGrade}`;
								if(!isNewEnergyLabel){
									energyLabelClassTemp = `badge ${pkgChildModel.energyLabelClass2}`;
									energyLabelGradeTag = `
													<span class="badge__grade--with-text ${pkgChildModel.energyLabelClass1}">
														<span class="hidden">${pkgChildModel.energyLabelGrade}</span>
													</span>
													`;
								}
								
								energyLabelTemp = `
											<div class="badge-energy-label">
												${ficheText}
												<a class="${energyLabelClassTemp}" href="${pkgChildModel.energyFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}">
													${energyLabelGradeTag}
												</a>
											</div>
								`;
							}
							let repairabilityTemp = ``;
							if(isNotNull(pkgChildModel.repairabilityIndex)){
								let repairabilityIndex = Number(pkgChildModel.repairabilityIndex);
								let repairabilityAlt = Granite.I18n.get("Repairability Index : {0} / 10", [repairabilityIndex] );
								
								if(siteCode=="fr" || siteCode=="test") {
									let reparabiliteUrl = '/fr/indice-reparabilite/';
									if(isNotNull(pkgChildModel.repairabilityIndexPdfUrl)) {
										reparabiliteUrl = String(pkgChildModel.repairabilityIndexPdfUrl);
									}
									let tempArr = reparabiliteUrl.split("/");
									let reparabiliteFileName = tempArr[tempArr.length-1];
									repairabilityTemp = `
												<div class="badge-repairability">
													<a href="${reparabiliteUrl}" target="_blank" aria-label="Indice de réparabilité" target="_blank" an-tr="pd03_product finder:option-${pageTrack}-repairability index-option_click4"
														an-ca="option click" an-ac="pf product card" an-la="repairability index:${reparabiliteFileName}">
														<div class="image">
															<img class="image__main responsive-img" data-desktop-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_83x50/${repairabilityIndex}.svg" 
															data-mobile-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_130x78/${repairabilityIndex}.svg" alt="${repairabilityAlt}" role="img" data-comp-name="image">
														</div>
													</a>
												</div>
									`;
								}else{
									repairabilityTemp = `
												<div class="badge-repairability">
													<a href="javascript:;">
														<div class="image">
															<img class="image__main responsive-img" data-desktop-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_83x50/${repairabilityIndex}.svg" 
															data-mobile-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_130x78/${repairabilityIndex}.svg" alt="${repairabilityAlt}" role="img" data-comp-name="image">
														</div>
													</a>
												</div>
									`;
								}
							}
							if(energyLabeleCheck){
								pkgListTemp += `
										<div class="pd03-product-card__combo-package-slide swiper-slide" role="listitem">
											<div class="pd03-product-card__combo-package-slide-inner">
												<div class="pd03-product-card__combo-package-product-name">${pkgChildModel.displayName}</div>
												<div class="pd03-product-card__combo-package-fiche">
													<!--/* New Energy Label */-->
													${energyLabelTemp}
													<!--/* // New Energy Label */-->
													<!--/* Repairability */-->
													${repairabilityTemp}
													<!--/* // Repairability */-->
												</div>
											</div>
										</div>
								`;
							}
						}
					}
					if(energyLabelComboPackageCheck){
						productCardTemplate = `
								<div class="pd03-product-card__combo-package-container swiper-container basic-swiper" data-swiper-option='{
										"slidesPerView":"1",
										"keepWrapper":true,
										"loop":false,
										"componentEl":".pd03-product-card__combo-package",
										"offTxtAccesibility":"true",
										"noSwiping": true,
										"noSwipingClass": "button-controller--scroll",
										"watchOverflow":"true"
									}'>
									
									<div class="pd03-product-card__combo-package-wrapper swiper-wrapper" role="list">
										${pkgListTemp}
									</div>
									<button type="button" class="pd03-product-card__combo-package-button swiper-button-prev">
										<span class="hidden">Previous</span>
										<svg class="icon" focusable="false" aria-hidden="true">
										<use xlink:href="#previous-regular" href="#previous-regular"></use>
										</svg>
									</button>
									<button type="button" class="pd03-product-card__combo-package-button swiper-button-next">
										<span class="hidden">Next</span>
										<svg class="icon" focusable="false" aria-hidden="true">
										<use xlink:href="#next-regular" href="#next-regular"></use>
										</svg>
									</button>
								</div>
						`;
					}
				}
				let productCardTemplateWrapper = `
							<div class="pd03-product-card__combo-package">
								${productCardTemplate}
							</div>
							`;
				
				return productCardTemplateWrapper;
			}
			
			/**
			 * 에너지 등급 영역
			 * @param {*} frontModel
			 * @param {*} cardLayout
			 * @returns
			 */
			var productCardEnergyLabelBuild = function(frontModel, cardLayout) {
				cardLayout = String(cardLayout).toLowerCase();
				if(cardLayout !== 'vertical' && cardLayout !== 'horizontal') {
					cardLayout = 'vertical';
				}

				var productCardTemplate = "";
				let ficheText = "";
				if(isNotNull(frontModel.energyLabelGrade) && isNotNull(frontModel.energyLabelClass1) && isNotNull(frontModel.energyFileUrl) && frontModel.newEnergyLabel != "Y") {
					if(isNotNull(frontModel.ficheFileUrl)) {
						ficheText += `
						<a class="badge-energy-label__text" href="${frontModel.ficheFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}"
						an-tr="pd03_product finder:option-${pageTrack}-product fiche-link" an-ca="option click" an-ac="pf product card" an-la="product fiche">
							${Granite.I18n.get("Product Fiche")}
						</a>
						`;
					}
					ficheText += `
					<a class="badge ${frontModel.energyLabelClass2}" href="${frontModel.energyFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}"
					an-tr="pd03_product finder:option-${pageTrack}-product fiche-link" an-ca="option click" an-ac="pf product card" an-la="product fiche">
						<span class="badge__grade--with-text ${frontModel.energyLabelClass1}">
							<span class="hidden">${frontModel.energyLabelGrade}</span>
						</span>
					</a>
					`;
				} else if(isNotNull(frontModel.energyLabelGrade) && isNotNull(frontModel.energyLabelClass1) && isNotNull(frontModel.energyFileUrl) && frontModel.newEnergyLabel == "Y") {
					var energyLabelClass = "";
					if(isNotNull(frontModel.ficheFileUrl)) {
						ficheText += `
						<a class="badge-energy-label__text" href="${frontModel.ficheFileUrl}" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}"
						an-tr="pd03_product finder:option-${pageTrack}-product fiche-link" an-ca="option click" an-ac="pf product card" an-la="product fiche">
							${Granite.I18n.get("PRODUCT INFORMATION SHEET")}
						</a>
						`;
					}
					if(frontModel.energyLabelClass) { //energyLabelClass 있으면
						energyLabelClass = frontModel.energyLabelClass;
					} else { //energyLabelClass 없으면
						energyLabelClass = frontModel.energyLabelClass1;
					}
					ficheText += `
					<a class="badge-energy-label__badge ${energyLabelClass}" href="${frontModel.energyFileUrl}" target="_blank" aria-label="badge title"
					an-tr="pd03_product finder:option-${pageTrack}-product fiche-link" an-ca="option click" an-ac="pf product card" an-la="product fiche">
						${frontModel.energyLabelGrade}
					</a>
					`;
				}
				// var labelText = "";
				// labelText = `<div class="badge-energy-label">`;
				// labelText += `</div>`;
				let labelText = ficheText !== ''? `
				<div class="badge-energy-label">
					${ficheText}
				</div>
				` : "";
				// ficheText
				var repairabilityHtml = "";
				if(isNotNull(frontModel.repairabilityIndex)) {
					var repairabilityIndex = Number(frontModel.repairabilityIndex);
					var repairabilityAlt = Granite.I18n.get("Repairability Index : {0} / 10", [repairabilityIndex] );

					if(siteCode=="fr" || siteCode=="test") {
						var reparabiliteUrl = '/fr/indice-reparabilite/';
						if(isNotNull(frontModel.repairabilityIndexPdfUrl)) {
							reparabiliteUrl = String(frontModel.repairabilityIndexPdfUrl);
						}
						var tempArr = reparabiliteUrl.split("/");
						var reparabiliteFileName = tempArr[tempArr.length-1];
						repairabilityHtml = `
						<div class="badge-repairability">
							<a class="badge-repairability__link" href="${reparabiliteUrl}" target="_blank" aria-label="Indice de réparabilité" target="_blank" an-tr="pd03_product finder:option-${pageTrack}-repairability index-option_click4"
							an-ca="option click" an-ac="pf product card" an-la="repairability index:${reparabiliteFileName}">
								<div class="image">
									<img class="image__main responsive-img" data-desktop-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_83x50/${repairabilityIndex}.svg" 
										data-mobile-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_130x78/${repairabilityIndex}.svg" alt="${repairabilityAlt}" role="img" data-comp-name="image">
								</div>
							</a>
						</div>
						`;
					} else {
						repairabilityHtml = `
						<div class="badge-repairability">
							<a class="badge-repairability__link" href="javascript:;">
								<div class="image">
									<img class="image__main responsive-img" data-desktop-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_83x50/${repairabilityIndex}.svg" 
										data-mobile-src="//images.samsung.com/is/image/samsung/${siteCode}/icon/repairability/Light_130x78/${repairabilityIndex}.svg" alt="${repairabilityAlt}" role="img" data-comp-name="image">
								</div>
							</a>
						</div>
						`;
					}
				}
				// if(isNotNull(thirdPASeller)) {
				// 	labelText += `<p class="seller-info">${thirdPASeller}</p>`;
				// }
				if(siteCode==="us") {
					var includeText = '';
					var includeStyle = ' style="display:none;"';
					if(useUSEppDiscount && isNotNull(frontModel.prdSavePriceTI) && isNotNull(tsgmt)) {
						includeText += 'Includes '+frontModel.prdSavePriceTI+' '+tsgmt+' Discount';
						includeStyle = '';
					}

					labelText += `<p class="pd03-product-card__epp js-pfv2-us-epp-include-area" ${includeStyle}>${includeText}</p>`;
				}
				const ficheInner = `${labelText.trim()}${repairabilityHtml.trim()}`.trim();
				productCardTemplate = ficheInner !== ``? `
				<div class="pd03-product-card__fiche for-${cardLayout}">
					${ficheInner}
				</div>
				` : `<div class="pd03-product-card__fiche for-${cardLayout} no-data"></div>`;
				return productCardTemplate;
			}

			/**
			 * 재고 영역
			 * @param {*} frontModel
			 * @param {*} cardLayout
			 * @returns
			 */
			var productCardStockStatusBuild = function(frontModel, cardLayout) {
				cardLayout = String(cardLayout).toLowerCase();
				if(cardLayout !== 'vertical' && cardLayout !== 'horizontal') {
					cardLayout = 'vertical';
				}

				var productCardTemplate = "";
				// it stock info(재고 표기) 제거
				if(siteCode !== "it"){
					// pd03-product-card__stock--out
					var ctaType = frontModel.ctaTypeUpperCase;
					var stockClass = "";
					var stockText = "";
					var stockIcons = `
					<span class="pd03-product-card__stock-icons">
						<svg class="icon icon--in-stock" focusable="false" aria-hidden="true">
							<use xlink:href="#done-bold" href="#done-bold"></use>
						</svg>
						<svg class="icon icon--out-of-stock" focusable="false" aria-hidden="true">
							<use xlink:href="#delete-bold" href="#delete-bold"></use>
						</svg>
					</span>
					`;
					// upperStock
					// whereToBuy
					var wtbStockStatusText = String(frontModel.stockStatusText).toUpperCase(); // lowstock / instock
					// console.debug(wtbStockStatusText, ctaType, upperStock);
					if(ctaType === "INSTOCK" || ctaType === "LOWSTOCK" || ((ctaType === "WHERETOBUY") && (wtbStockStatusText === "LOWSTOCK" || wtbStockStatusText === "INSTOCK"))) {
						stockText = Granite.I18n.get("IN STOCK");
					} else if(upperStock === "LEARNMORE" ||  ctaType === "PREORDER") {
						// 스톡 표시 안 함
						stockIcons = "";
					} else {
						stockClass = "pd03-product-card__stock--out";
						stockText = Granite.I18n.get("Out Of Stock");
					}
					const stockInner = stockIcons.trim() !== "" && stockText.trim() !== ""? `
					<div class="pd03-product-card__stock-inner">
						${stockIcons}
						${stockText}
					</div>
					` : "";
					const noDataClass = stockInner.trim() === ""? "no-data" : "";
					productCardTemplate = `
					<div class="pd03-product-card__stock ${stockClass} for-${cardLayout} ${noDataClass}">
						${stockInner}
					</div>
					`;
				}
				return productCardTemplate;
			}

			/**
			 * Rating 영역
			 * @param {*} product
			 * @returns
			 */
			var productCardRatingAreaBuild = function(product) {
				var frontModel = product.modelList[product.frontModelIdx];

				let reviewArea = "";
				// 미판매 제품이어도 ratings 정보가 있으면 별점 영역 노출
//				if(!isNonShop && frontModel.ctaTypeUpperCase === "LEARNMORE") {
//					// 미판매 상품의 경우 리뷰 노출 안 하도록 수정
//				} else 
				//if(siteCode === "it") {
					// var reviewUrl = '/'+siteCode+'/common/review/'+frontModel.modelCode+'/';
					// if(isNotNull(frontModel.reviewUrl)) {
					// 	reviewUrl = frontModel.reviewUrl;
					// }
				//	reviewArea = `
				//	<reevoo-reviewable-badge trkref="SAM-IT" sku="${frontModel.modelCode}" variant="category_v2"></reevoo-reviewable-badge>
				//	`;
				//} else 
				
				if((reviewUseYN === "Y" || reevooUseYN === "Y") && isNotNull(frontModel.ratingHtml) && siteCode !== "cn") {
					if(!(!isNonShop && frontModel.ctaTypeUpperCase === "LEARNMORE")
						|| (!isNonShop && frontModel.ctaTypeUpperCase === "LEARNMORE" && frontModel.ratings != '0')
						){
						var ratingEmptyCls = "";
						if(frontModel.ratings == '0') {
							ratingEmptyCls = ' rating--empty';
						}
						var reviewUrl = '/'+siteCode+'/common/review/'+frontModel.modelCode+'/';
						if(isNotNull(frontModel.reviewUrl)) {
							reviewUrl = frontModel.reviewUrl;
						}
						reviewArea = `
						<!--/* Rating 사용하지 않을 경우 아래 마크업 삭제 */-->
						<a href="${reviewUrl}" aria-label="${frontModel.ratings}, (${frontModel.reviewCount}), ${escapeHtml(frontModel.displayName.replace(/<br>/ig," ").replace(/<sup>/ig," "))} Reivew"
						data-modelcode="${frontModel.modelCode}" data-modelname="${escapeHtml(frontModel.modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}" an-tr="pd03_product finder:option-${pageTrack}-image-review" an-ca="review" an-ac="pf product card" an-la="read review">
							<!-- /* 전체 Empty: .rating--empty 추가 */ -->
							<span class="rating ${ratingEmptyCls}">
							<span class="hidden">${Granite.I18n.get("Rating")}</span>
								<span class="rating__inner">
									<span class="rating__star-list">
										${frontModel.ratingHtml}
									</span>
									<strong class="rating__point"><span class="hidden">${Granite.I18n.get("Product Ratings")} : </span><span>${frontModel.ratings}</span></strong>
									<em class="rating__review-count">(<span class="hidden">${Granite.I18n.get("Number of Ratings")} :</span><span>${frontModel.reviewCount}</span>)</em>
								</span>
							</span>
						</a>
						`;
					}
				}
				const noDataClass = reviewArea.trim() === ""? "no-data" : "";
				var productCardTemplate = `<div class="pd03-product-card__rating ${noDataClass}">${reviewArea}</div>`;
				return productCardTemplate;
			}

			/**
			 * 현재 선택된 옵션 카드를 바탕으로 스펙 생성
			 *
			 * 기본 노출 순서
			 *
			 * USP > Key Feature > Key Spec
			 *
			 * 단, DA의 경우
			 *
			 * Categorized group data > USP > Key Feature > Key Spec
			 * @returns
			 */
			var productCardSpecBuild = function(product) {
				var frontModel = product.modelList[product.frontModelIdx];
				const selectedOptions = [];

				const categorizedGroupDataArray = [];
				const uspArray = [];
				const refinedFeatureArray = [];
				const refinedSpecArray = [];
				const keySummary = frontModel.keySummary;
				const pimLength = 3; // 최대 노출 개수는 3개
				// standardKeySpecValue
//				if(categoryGroupCode === GROUPCODE_HA && isNotNull(frontModel.standardKeySpecValue)) {
//					for(const cgd of frontModel.standardKeySpecValue) {
//						if(typeof cgd === 'string') {
//							const option = `<li class="pd03-product-card__spec-item" role="listitem" title="${cgd}">${cgd}</li>`;
//							categorizedGroupDataArray.push(option);
//						} else if(typeof cgd === 'object') {
//							const key = cgd.key;
//							const value = cgd.value;
//							const option = `<li class="pd03-product-card__spec-item" role="listitem" title="${key} : ${value}">${key} : <span class="pd03-product-card__spec-text">${value}</span></li>`;
//							categorizedGroupDataArray.push(option);
//						}
//					}
//				}
				// if(categoryGroupCode === GROUPCODE_HA && isNotNull(frontModel.newKeySpec)) {
				// 	for(const cgd of frontModel.newKeySpec) {
				// 		const specName = cgd.attributesName;
				// 		const specValue = cgd.attributesValue;
				// 		const option = `<li class="pd03-product-card__spec-item" role="listitem">${specName} : <span class="pd03-product-card__spec-text">${specValue}</span></li>`;
				// 		categorizedGroupDataArray.push(option);
				// 	}
				// }
				// console.debug(frontModel);
				const uspArr = (isGPv2 || isHybrisIntg || isNewHybris)? frontModel.usp : frontModel.uspDescription;
				
				if(isNotNull(uspArr) && uspArr.length > 0) {
					for(const uspi of uspArr) {
						const option = `<li class="pd03-product-card__spec-item" role="listitem">${uspi}</li>`;
						uspArray.push(option);
					}
				}
				if(isNotNull(keySummary)) {
					const filteredFeature = keySummary.filter(item => item.displayType.toLowerCase() === 'feature');
					filteredFeature.forEach(item => {
						const specName = item.title;
						const option = `<li class="pd03-product-card__spec-item" role="listitem">${specName}</li>`;
						refinedFeatureArray.push(option);
					});
					const filteredSpec = keySummary.filter(item => item.displayType.toLowerCase() === 'spec');
					filteredSpec.forEach(item => {
						const specName = item.key;
						const specValue = item.value;
						const option = `<li class="pd03-product-card__spec-item" role="listitem">${specName} : <span class="pd03-product-card__spec-text">${specValue}</span></li>`;
						refinedSpecArray.push(option);
					});
				}
				var specCnt = 0;
//				// Categorized Group Data (DA)
//				for(let idx = 0; idx < categorizedGroupDataArray.length; idx++) {
//					if(specCnt > (pimLength - 1)) {
//						break;
//					}
//					specCnt++;
//					const option = categorizedGroupDataArray[idx];
//					selectedOptions.push(option);
//				}
				// USP
				for(let idx = 0; idx < uspArray.length; idx++) {
					if(specCnt > (pimLength - 1)) {
						break;
					}
					specCnt++;
					const option = uspArray[idx];
					selectedOptions.push(option);
				}
				// Key Feature
				for(let idx = 0; idx < refinedFeatureArray.length; idx++) {
					if(specCnt > (pimLength - 1)) {
						break;
					}
					specCnt++;
					const option = refinedFeatureArray[idx];
					selectedOptions.push(option);
				}
				// Key Spec
				for(let idx = 0; idx < refinedSpecArray.length; idx++) {
					if(specCnt > (pimLength - 1)) {
						break;
					}
					specCnt++;
					const option = refinedSpecArray[idx];
					selectedOptions.push(option);
				}

				var optionList = selectedOptions.length > 0? `
				<ul class="pd03-product-card__spec-list" role="list">
					${selectedOptions.join('')}
				</ul>
				` : "";
				const noDataClass = optionList.trim() === ""? "no-data" : "";
				var productCardTemplate = `
				<div class="pd03-product-card__spec ${noDataClass}">
					${optionList}
				</div>
				`;
				return productCardTemplate;
			}

			/**
			 * Offer 영역
			 * Offer 노출 순서
			 *
			 * 예1) tradeIn > financing >  upgrade > premiumCare > storePromotions
			 *
			 * 예2) buyBackDesc > financeInfoAmount > financing > tradeIn > upgrade > premiumCare > storePromotions
			 * @param {*} product
			 * @param {*} emiPrice
			 * @returns
			 */
			var productCardOfferBuild = function(product, emiPrice) {
				var frontModel = product.modelList[product.frontModelIdx];

				// var useNationalFlag = false;
				// var nationalFlagHtml = "";

				var usePricePeriod = false;
				var pricePeriodHtml = "";

				var itemCnt = 0;

				// var useUSP = false;

				var totalFeatureCnt = 0;
				var totalFeatureArr = [];
				var featureItems = [];

				// if(!isGPv2 && !isHybrisIntg && !isNewHybris && isNotNull(frontModel.nationalFlags)) {
				// 	var nationalFlagArr = frontModel.nationalFlags.split(",");
				// 	if(nationalFlagArr.length > 0) {
				// 		useNationalFlag = true;
				// 		var flags = [];
				// 		for(var nfi in nationalFlagArr) {
				// 			var nationalName = nationalFlagArr[nfi].toLowerCase();
				// 			if(nationalName === "congo") {
				// 				nationalName = 'national-flags-04';
				// 			} else if(nationalName === "benin") {
				// 				nationalName = 'national-flags-05';
				// 			}
				// 			flags.push(`<div class="pd03-product-card__flags ${nationalName}"></div>`);
				// 		}
				// 		nationalFlagHtml = `
				// 		<div class="pd03-product-card__national-flags">${flags.join("")}</div>
				// 		`;
				// 	}
				// }

				// 가격 기간 정보. Offer 영역에는 포함되지 않는 것으로 보임
				// if(isGPv2 || isNewHybris) {
				// 	pricePeriodHtml += '<div class="pd03-product-card__additional-info">';
				// 	if(isNotNull(frontModel.pricePeriodInfo)){
				// 		totalFeatureCnt++;
				// 		usePricePeriod = true;
				// 		itemCnt++;
				// 		pricePeriodHtml += '<div class="pd03-product-card__description">' + frontModel.pricePeriodInfo + '</div>';
				// 	}
				// 	pricePeriodHtml += '</div>';
				// }

				var buildFeatureItem = function(featureTxt, featureIconHtml) {
					if(typeof featureIconHtml === 'undefined' || featureIconHtml === null) {
						featureIconHtml = "";
					}
					var featureItem = `
					<li class="pd03-product-card__benefit-item" role="listitem">
						<div class="pd03-product-card__benefit-icon">
							${featureIconHtml}
						</div>
						<p class="pd03-product-card__benefit-text">
							${featureTxt}
						</p>
					</li>
					`;
					return featureItem;
				}

				let unsoldClass = "";
				let noSaleClass = "";
				const maxAmount = 4;
				if(!isNonShop && frontModel.ctaTypeUpperCase === "LEARNMORE") {
					// shop 국가의 미판매 상품은 아래의 로직을 따른다.
					// console.debug(frontModel);
					unsoldClass = "unsold-product"
					noSaleClass = "no-sale";
					const keySummary = frontModel.keySummary ?? [];
					const refinedFeatureArray = [];
					const refinedSpecArray = [];
					let count = 0;
					if(isNotNull(keySummary)) {
						const filteredFeature = keySummary.filter(item => item.displayType.toLowerCase() === 'feature');
						filteredFeature.forEach(item => {
							const specName = item.title;
							totalFeatureCnt++;
							totalFeatureArr.push(specName);
							// buildFeatureItem(storePromotionTxt, iconHtml)
							// const option = `<li class="pd03-product-card__spec-item" role="listitem">${specName}</li>`;
							const option = `
							<li class="pd03-product-card__benefit-item" role="listitem">
								<p class="pd03-product-card__benefit-text">
									${specName}
								</p>
							</li>
							`;
							// const option = buildFeatureItem(specName, "");
							refinedFeatureArray.push(option);
						});
						const filteredSpec = keySummary.filter(item => item.displayType.toLowerCase() === 'spec');
						filteredSpec.forEach(item => {
							const specName = item.key;
							const specValue = item.value;
							totalFeatureCnt++;
							totalFeatureArr.push(`${item.key} : ${item.value}`);
							// const option = `<li class="pd03-product-card__spec-item" role="listitem">${specName} : <span class="pd03-product-card__spec-text">${specValue}</span></li>`;
							// const option = buildFeatureItem(`${specName} : <span class="pd03-product-card__spec-text">${specValue}</span>`, "");
							const option = `
							<li class="pd03-product-card__benefit-item" role="listitem">
								<p class="pd03-product-card__benefit-text">
									${specName} : <span class="pd03-product-card__spec-text">${specValue}</span>
								</p>
							</li>
							`;
							refinedSpecArray.push(option);
						});
					}
					for(const item of refinedFeatureArray) {
						if(count < maxAmount) {
							count++;
							featureItems.push(item);
						}
					}
					for(const item of refinedSpecArray) {
						if(count < maxAmount) {
							count++;
							featureItems.push(item);
						}
					}
				} else {
					const localBenefitList = product.localBenefitList ?? [];

					// Local Benefit 이 4개가 안되는 경우 offer 데이터가 있으면 Local Benefit 위에 노출
					const maxOffer = 4 - localBenefitList.length;
					let curOffer = 0;
					// let offerAmount = 2; // offer 노출은 최대 2개
					// if(localBenefitList.length >= 4) offerAmount = 0;
					// else if(localBenefitList.length === 3) offerAmount = 1;
					// else if(localBenefitList.length <= 2) offerAmount = 2;
					if(!shopPromoOnlyFl) {
						if(isGPv2 || isNewHybris) {
					// 		/*
					// 		 * 예2) buyBackDesc > financeInfoAmount > financing > tradeIn > upgrade > premiumCare > storePromotions
					// 		*/
					// 		var tradeInDesc = [];
					// 		var financingDesc = [];
					// 		var upgradeDesc = [];
					// 		var premiumCareDesc = [];

					// 		// tradeIn
					// 		if(frontModel.tradeInFormattedDesc != null && frontModel.tradeInFormattedDesc.length > 0) {
					// 			tradeInDesc = frontModel.tradeInFormattedDesc;
					// 		} else {
					// 			tradeInDesc = frontModel.tradeInDesc;
					// 		}

					// 		// upgrade
					// 		if(frontModel.upgradeFormattedDesc != null && frontModel.upgradeFormattedDesc.length > 0) {
					// 			upgradeDesc = frontModel.upgradeFormattedDesc;
					// 		} else {
					// 			upgradeDesc = frontModel.upgradeDesc;
					// 		}

					// 		// premiumCare
					// 		if(frontModel.premiumCareFormattedDesc != null && frontModel.premiumCareFormattedDesc.length > 0){
					// 			premiumCareDesc = frontModel.premiumCareFormattedDesc;
					// 		} else {
					// 			premiumCareDesc = frontModel.premiumCareDesc;
					// 		}

					// 		// financing
					// 		if(frontModel.financingFormattedDesc != null && frontModel.financingFormattedDesc.length > 0){
					// 			financingDesc = frontModel.financingFormattedDesc;
					// 		} else {
					// 			financingDesc = frontModel.financingDesc;
					// 		}

					// 		// buyback
					// 		if(siteCode=="in" && frontModel.buyBackDesc != null) {
					// 			totalFeatureCnt++;
					// 			totalFeatureArr.push(frontModel.buyBackDesc);
					// 			if(itemCnt < offerAmount) {
					// 				itemCnt++;
					// 				featureItems.push(buildFeatureItem(frontModel.buyBackDesc));
					// 			}
					// 		}

					// 		// finance info
					// 		if(isNotNull(frontModel.financeInfoAmount) && isNotNull(frontModel.financeInfoValue)) {
					// 			var financeText = Granite.I18n.get("Enjoy the flagship experience at only {0} for {1} month",[currencyComma(frontModel.financeInfoAmount, pfPriceCurrency), frontModel.financeInfoValue]);
					// 			totalFeatureCnt++;
					// 			totalFeatureArr.push(financeText);
					// 			if(itemCnt < offerAmount){
					// 				itemCnt++;
					// 				featureItems.push(buildFeatureItem(financeText));
					// 			}
					// 		}

					// 		// financing
					// 		if(isNotNull(financingDesc) && financingDesc.length > 0 && itemCnt < 4 && siteCode !== "us") {
					// 			// uk financingDesc 제거
					// 			for(var fdi in financingDesc){
					// 				totalFeatureCnt++;
					// 				totalFeatureArr.push(financingDesc[fdi]);
					// 				if(itemCnt < offerAmount) {
					// 					itemCnt++;
					// 					var iconHtml =
					// 						'<svg class="icon" focusable="false">'+
					// 							'<use xlink:href="#finance-regular" href="#finance-regular"></use>'+
					// 						'</svg>';
					// 					var financingHtml = financingDesc[fdi];

					// 					if(fdi == 0){
					// 						if(isNotNull(emiPrice)){
					// 							if((siteCode === "in" || siteCode === "uk" || siteCode === "id" || siteCode === "ee" || siteCode === "lv" || siteCode === "lt" || siteCode === "pl" ) && isNotNull(emiUrl) && frontModel.financing == "Y"){					//new-hybris
					// 							financingHtml =
					// 									'<a class="product-card-v2__feature-cta js-pfv2-calculate-popup-open" data-type="install" data-modelcode="'+frontModel.shopSkuCode+'"'+
					// 									' href="javascript:;" title="'+Granite.I18n.get("Calculate Finance")+'" data-link_info="'+emiUrl+'/?sku=' + frontModel.shopSkuCode + '&price=' + emiPrice + '&page=pf"'+
					// 									' an-tr="pd03_product finder:option-'+pageTrack+'-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">'+
					// 										financingDesc[fdi]+
					// 									'</a>';
					// 							} else if(siteCode !== "in" && siteCode !== "uk" && isNotNull(financingUrl)){
					// 								var financeLayerUrl = financingUrl;
					// 								if(siteCode !== "de"){
					// 									financeLayerUrl +='/?total='+ emiPrice +'&page=pf';
					// 								}
					// 								if(siteCode!=="fr"){
					// 									financingHtml =
					// 										'<a class="product-card-v2__feature-cta js-pfv2-calculate-popup-open" data-type="install"';
					// 										if(isNewHybris){		//new-hybris
					// 											financingHtml +=
					// 											' data-modelcode="'+frontModel.shopSkuCode+'"';
					// 										}
					// 										financingHtml +=
					// 										' href="javascript:;" aria-label="'+Granite.I18n.get("Calculate Finance")+'" data-link_info="'+financeLayerUrl+'"'+
					// 											' an-tr="pd03_product finder:option-'+pageTrack+'-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">'+
					// 												financingDesc[fdi]+
					// 											'</a>';
					// 								}else{
					// 									financingHtml = financingDesc[fdi];
					// 								}
					// 							}
					// 						}
					// 					}

					// 					featureItems.push(buildFeatureItem(financingHtml, iconHtml));
					// 				} else {
					// 					// break;
					// 				}
					// 			}
					// 		}

					// 		// trade in
					// 		if(isNotNull(tradeInDesc) && tradeInDesc.length > 0) {
					// 			for(var tdi in tradeInDesc) {
					// 				totalFeatureCnt++;
					// 				totalFeatureArr.push(tradeInDesc[tdi]);
					// 				if(itemCnt < offerAmount) {
					// 					itemCnt++;
					// 					featureItems.push(buildFeatureItem(tradeInDesc[tdi]));
					// 				} else {
					// 					// break;
					// 				}
					// 			}
					// 		}

					// 		// upgrade
					// 		if(isNotNull(upgradeDesc) && upgradeDesc.length > 0) {
					// 			for(var udi in upgradeDesc) {
					// 				totalFeatureCnt++;
					// 				totalFeatureArr.push(upgradeDesc[udi]);
					// 				if(itemCnt < offerAmount) {
					// 					itemCnt++;
					// 					featureItems.push(buildFeatureItem(upgradeDesc[udi]));
					// 				} else {
					// 					// break;
					// 				}
					// 			}
					// 		}

					// 		// premium care
					// 		if(isNotNull(premiumCareDesc) && premiumCareDesc.length > 0) {
					// 			for(var pdi in premiumCareDesc) {
					// 				totalFeatureCnt++;
					// 				totalFeatureArr.push(premiumCareDesc[pdi]);
					// 				if(itemCnt < offerAmount) {
					// 					itemCnt++;
					// 					featureItems.push(buildFeatureItem(premiumCareDesc[pdi]));
					// 				} else {
					// 					// break;
					// 				}
					// 			}
					// 		}

							// store promotions
							if(isNotNull(frontModel.storePromotions) && frontModel.storePromotions.length > 0) {
								for(var spi in frontModel.storePromotions) {
									var storePromotionTxt = "";
									if(frontModel.storePromotions[spi].promotionFormattedText != null) {
										storePromotionTxt = frontModel.storePromotions[spi].promotionFormattedText;
									} else {
										storePromotionTxt = frontModel.storePromotions[spi].promotionText;
									}
									totalFeatureCnt++;
									totalFeatureArr.push(storePromotionTxt);
									if(itemCnt < maxAmount && curOffer < maxOffer) {
										curOffer++;
										itemCnt++;
										var iconHtml =
											'<svg class="icon" focusable="false">'+
												'<use xlink:href="#shopping-deal-regular" href="#shopping-deal-regular"></use>'+
											'</svg>';
										featureItems.push(buildFeatureItem(storePromotionTxt, iconHtml));
									} else {
										// break;
									}
								}
							}
						} else if(isHybrisIntg) {
					// 		/*
					// 		 * 예1) tradeIn > financing >  upgrade > premiumCare > storePromotions
					// 		*/

					// 		// trade in
					// 		if(frontModel.tradeIn === "Y" && isNotNull(frontModel.tradeInDesc)) {
					// 			totalFeatureCnt++;
					// 			totalFeatureArr.push(frontModel.tradeInDesc);
					// 			if(itemCnt < offerAmount) {
					// 				itemCnt++;
					// 				featureItems.push(buildFeatureItem(frontModel.tradeInDesc));
					// 			}
					// 		}

					// 		// financing
					// 		if(frontModel.financing === "Y" && isNotNull(frontModel.financingDesc)) {
					// 			totalFeatureCnt++;
					// 			totalFeatureArr.push(frontModel.financingDesc);
					// 			if(itemCnt < offerAmount) {
					// 				itemCnt++;
					// 				var iconHtml =
					// 					'<svg class="icon" focusable="false">'+
					// 						'<use xlink:href="#finance-regular" href="#finance-regular"></use>'+
					// 					'</svg>';

					// 				var financingHtml = frontModel.financingDesc;

					// 				if(isNotNull(emiPrice) && isNotNull(financingUrl)){
					// 					var financeLayerUrl = financingUrl +'/?total='+ emiPrice +'&page=pf';

					// 					financingHtml =
					// 						'<a class="product-card-v2__feature-cta js-pfv2-calculate-popup-open" data-type="install"'+
					// 						' href="javascript:;" aria-label="'+Granite.I18n.get("Calculate Finance")+'" data-link_info="'+financeLayerUrl+'"'+
					// 						' an-tr="pd03_product finder:option-'+pageTrack+'-calculator-link" an-ca="option click" an-ac="pf product card" an-la="calculator">'+
					// 							frontModel.financingDesc+
					// 						'</a>';
					// 				}

					// 				featureItems.push(buildFeatureItem(financingHtml, iconHtml));
					// 			}
					// 		}

					// 		// upgrade
					// 		if(frontModel.upgrade === "Y" && isNotNull(frontModel.upgradeDesc)) {
					// 			totalFeatureCnt++;
					// 			totalFeatureArr.push(frontModel.upgradeDesc);
					// 			if(itemCnt < offerAmount) {
					// 				itemCnt++;
					// 				featureItems.push(buildFeatureItem(frontModel.upgradeDesc));
					// 			}
					// 		}

					// 		// premium care
					// 		if(frontModel.premiumCare === "Y" && isNotNull(frontModel.premiumCareDesc)) {
					// 			totalFeatureCnt++;
					// 			totalFeatureArr.push(frontModel.premiumCareDesc);
					// 			if(itemCnt < offerAmount) {
					// 				itemCnt++;
					// 				featureItems.push(buildFeatureItem(frontModel.premiumCareDesc));
					// 			}
					// 		}

							// store promotions
							if(isNotNull(frontModel.storePromotions) && frontModel.storePromotions.length > 0) {
								for(var spi in frontModel.storePromotions) {
									totalFeatureCnt++;
									totalFeatureArr.push(frontModel.storePromotions[spi]);
									if(itemCnt < maxAmount && curOffer < maxOffer) {
										curOffer++;
										itemCnt++;
										var iconHtml =
											'<svg class="icon" focusable="false">'+
												'<use xlink:href="#shopping-deal-regular" href="#shopping-deal-regular"></use>'+
											'</svg>';
										featureItems.push(buildFeatureItem(frontModel.storePromotions[spi], iconHtml));
									} else {
										// break;
									}
								}
							}
					// 	} else {
					// 		if(isNotNull(frontModel.marketingMessage) && frontModel.marketingMessage.length > 0) {
					// 			for(var mmi in frontModel.marketingMessage) {
					// 				totalFeatureCnt++;
					// 				totalFeatureArr.push(frontModel.marketingMessage[mmi]);
					// 				if(itemCnt < offerAmount) {
					// 					itemCnt++;
					// 					featureItems.push(buildFeatureItem(frontModel.marketingMessage[mmi]));
					// 				} else {
					// 					// break;
					// 				}
					// 			}
					// 		}
						} else if(isOldHybris) {
							// store promotions
							if(isNotNull(frontModel.salesText) && frontModel.salesText.length > 0) {
								for(var spi in frontModel.salesText) {
									totalFeatureCnt++;
									totalFeatureArr.push(frontModel.salesText[spi]);
									if(itemCnt < maxAmount && curOffer < maxOffer) {
										curOffer++;
										itemCnt++;
										var iconHtml =
											'<svg class="icon" focusable="false">'+
												'<use xlink:href="#shopping-deal-regular" href="#shopping-deal-regular"></use>'+
											'</svg>';
										featureItems.push(buildFeatureItem(frontModel.salesText[spi], iconHtml));
									} else {
										// break;
									}
								}
							}
						}
					}

					for(const localBenefitItem of localBenefitList) {
						const localBenefitText = localBenefitItem.localBenefitText;
						const localBenefitIconType = localBenefitItem.localBenefitIconType;
						const iconId = localBenefitIcons[localBenefitIconType] ?? "";
						const localBenefitImgAltText = isEppSite ? localBenefitItem.localBenefitIconAltText : localBenefitItem.localBenefitImgAltText;
						const localBenefitImgUrl = pfImgDomain(localBenefitItem.localBenefitImgUrl ?? "", "key-feature");
						const iconHtml = iconId !== ""?
							`<svg class="icon" focusable="false"><use xlink:href="${iconId}" href="${iconId}"></use></svg>` :
							`<img class="image__main lazy-load responsive-img" data-desktop-src="${localBenefitImgUrl}" data-mobile-src="${localBenefitImgUrl}" alt="${localBenefitImgAltText}">`;

						totalFeatureCnt++;
						totalFeatureArr.push(localBenefitText);
						if(itemCnt < maxAmount) {
							itemCnt++;
							featureItems.push(buildFeatureItem(localBenefitText, iconHtml));
						}
					}
				}

				// if(usePricePeriod) {
				// 	totalFeatureArr.push(frontModel.pricePeriodInfo);
				// }

				var featureHtml = "";
				if(!shopPromoOnlyFl) {
					var benefitWrap = "";
					if(featureItems.length > 0) {
						var benefitTooltip = "";
						// 판매 상품의 경우 노출 안 하도록 수정
						if(totalFeatureCnt > 0 && !isNotNull(noSaleClass)) {
							var tooltipItems = [];
							for(const item of totalFeatureArr) {
								tooltipItems.push(`<li class="pd03-product-card__benefit-tooltip-item" role="listitem">*${item}</li>`);
							}
							// const moreBtnName = siteCode === 'uk'? Granite.I18n.get("more") : Granite.I18n.get("Show More");
							const moreBtnName = Granite.I18n.get("View more");
							//const moreBtnTxt = siteCode === "it"? `${moreBtnName} 5` : `5 ${moreBtnName}`;
							
							benefitTooltip = `
							<div class="pd03-product-card__benefit-tooltip">
								<button type="button" class="pd03-product-card__benefit-more pd03-product-card__quickview_btn">
									<span>${moreBtnName}</span>
								</button>
								<!-- div class="pd03-product-card__benefit-tooltip-wrap" role="tooltip">
									<ul class="pd03-product-card__benefit-tooltip-list" role="list">
										${tooltipItems.join("")}
									</ul>
									<button type="button" class="pd03-product-card__benefit-tooltip-close">
										<span class="hidden">Close</span>
										<svg class="icon">
											<use xlink:href="#delete-bold" href="#delete-bold"></use>
										</svg>
									</button>
								</div -->
							</div>
							`;
						}
						benefitWrap = `
						<div class="pd03-product-card__benefit-wrap ${noSaleClass}">
							<ul class="pd03-product-card__benefit-list" role="list">
								${featureItems.join("")}
							</ul>
							${pricePeriodHtml}
							${benefitTooltip}
						</div>
						`;
					}
					featureHtml = benefitWrap;
				}

				const noDataClass = featureHtml.trim() === ""? "no-data" : "";
				var productCardTemplate = `
				<div class="pd03-product-card__benefit ${unsoldClass} ${noDataClass}">
					${featureHtml}
				</div>
				`;
				// if(useNationalFlag) {
				// 	productCardTemplate += nationalFlagHtml;
				// }
				return productCardTemplate;
			}

			var productCardFlagAndCampaign = function(product) {
				// var frontModel = product.modelList[product.frontModelIdx];

				// var useNationalFlag = false;
				// var nationalFlagHtml = "";

				// var usePriceCampaign = false;
				// var priceCampaignHtml = "";

				// if(!isGPv2 && !isHybrisIntg && !isNewHybris && isNotNull(frontModel.nationalFlags)) {
				// 	var nationalFlagArr = frontModel.nationalFlags.split(",");
				// 	if(nationalFlagArr.length > 0) {
				// 		useNationalFlag = true;
				// 		var flags = [];
				// 		for(var nfi in nationalFlagArr) {
				// 			var nationalName = nationalFlagArr[nfi].toLowerCase();
				// 			if(nationalName === "congo") {
				// 				nationalName = 'national-flags-04';
				// 			} else if(nationalName === "benin") {
				// 				nationalName = 'national-flags-05';
				// 			}
				// 			const item = `
				// 			<li class="pd03-product-card__national-flags-item" role="listitem">
				// 				<a class="pd03-product-card__national-flags-link ${nationalName}" aria-label="Opens in a new window" target="_blank"></a>
				// 			</li>
				// 			`;
				// 			flags.push(item);
				// 		}
				// 		nationalFlagHtml = `
				// 		<div class="pd03-product-card__national-flags">
				// 			<ul class="pd03-product-card__national-flags-list" role="list">
				// 				${flags.join("")}
				// 			</ul>
				// 		</div>
				// 		`;
				// 	}
				// }

				// 가격 기간 정보 --- 혹시 이것이 price campaign인가??
				// 아직 데이터 정의가 나오지 않았으므로 일단은 이 데이터를 붙여둔다.
				// if(isGPv2 || isNewHybris) {
				// 	if(isNotNull(frontModel.pricePeriodInfo)){
				// 		usePriceCampaign = true;
				// 		priceCampaignHtml = `<p class="pd03-product-card__price-campaign">${frontModel.pricePeriodInfo}</p>`;
				// 	}
				// }

				var productCardTemplate = `<div class="pd03-product-card__nonshop-option no-data"></div>`;
				// if(useNationalFlag || usePriceCampaign) {
				// 	productCardTemplate = `
				// 	<div class="pd03-product-card__nonshop-option">
				// 		${useNationalFlag? nationalFlagHtml : ""}
				// 		${usePriceCampaign? priceCampaignHtml : ""}
				// 	</div>
				// 	`;
				// }

				return productCardTemplate;
			}

			/**
			 * CTA 영역
			 * @param {*} product
			 * @param {*} originPrice
			 * @param {*} discountPrice
			 * @param {*} dataPricetext
			 * @param {*} dataMonth
			 * @returns
			 */
			var productCardCTABuild = function(product, originPrice, discountPrice, dataPricetext, dataMonth) {
				var dataPrice = ""; // add on
				var frontModel = product.modelList[product.frontModelIdx];

				// pre order, buy now, add to cart 에 사용
				var dataModelCodeAttr = ' data-modelcode="' + frontModel.modelCode + '"';
				var dataModelNameAttr = ' data-modelname="' + escapeHtml(frontModel.modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " ")) + '"';
				var dataShopSkuAttr = '';
				//new-hybris
				if(isGPv2 || isNewHybris) {
					dataShopSkuAttr = ' data-sku-code="' + frontModel.shopSkuCode + '"';
				}
				var dataGetStockAttr = ''; 	//CRHQ 798 [AEM][CN] Hybris 전환 
				if(siteCode == "cn") dataGetStockAttr = ' data-gs-flag="GetStock"';	
				
				var dataEppVirtualModelCodeAttr = "";
				
				if((eppIsFlash || eppIsRefurbish) && isNotNull(frontModel.virtualModelCode)){
					dataEppVirtualModelCodeAttr=
					' data-virtual-modelcode="'+frontModel.virtualModelCode+'"';
				}

				var taggingAttrForBuy =
					' data-pimsubtype="' + (isNotNull(product.categorySubTypeEngName) ? product.categorySubTypeEngName.toLowerCase() : '') + '"' +
					' data-pvitype="' + (isNotNull(frontModel.pviTypeName) ? frontModel.pviTypeName.toLowerCase() : '') + '"' +
					' data-pvisubtype="' + (isNotNull(frontModel.pviSubtypeName) ? frontModel.pviSubtypeName.toLowerCase() : '') + '"' +
					' data-modelrevenue="' + originPrice + '"' +
					' data-modelqty="1"' +
					' data-modelcurrency="' + pfPriceCurrency + '"' +
					dataModelCodeAttr +
					dataModelNameAttr +
					' data-modeldisplay="' + escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " ")) + '"';
				if(isGPv2 || isHybrisIntg || isNewHybris) { //new-hybris
					taggingAttrForBuy += ' data-modelprice="' + originPrice + '"';
				} else {
					taggingAttrForBuy += ' data-discountprice="' + originPrice + '"';
				}
				dataPrice = originPrice; // add on

				if(isNotNull(discountPrice)) {
					taggingAttrForBuy += ' data-discountprice="' + discountPrice + '"';
					dataPrice = discountPrice; // add on
				}
				

				const galleryList = frontModel.galleryList ?? [];
				const galleryItem = galleryList.length > 0? galleryList[0] : {};
				const gallImageAlt = galleryItem.imageAlt ?? "";
				const gallImageUrlDesktop = galleryItem.imageUrlDesktop ?? "";
				const gallImageUrlMobile = galleryItem.imageUrlMobile ?? "";
				var dataAddOn =
					' data-modelcode="' + frontModel.modelCode + '"' +
					' data-desktop-src="' + gallImageUrlDesktop + '"' +
					' data-mobile-src="' + gallImageUrlMobile + '"' +
					' data-img-alt="' + gallImageAlt + '"' +
					' data-price-text="' + dataPricetext + '"' +
					' data-price="' + dataPrice + '"' +
					' data-price-month="' + dataMonth + '"' +
					' data-display-name="' + escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " ")) + '"';
				if(isNotNull(frontModel.saveText)){
					 dataAddOn +=
					' data-save-price="' + frontModel.saveText + '"' +
					' data-original-price="' + dataPrice + '"';
				}
				var useConfiguratorUrl = false;
				var hasNoUrl = false;
				var configUrl = "";
				if(isNotNull(frontModel.configuratorUseYn) && frontModel.configuratorUseYn == "Y") {
					useConfiguratorUrl = true;
					if(!isNotNull(frontModel.configuratorUrl) || frontModel.configuratorUrl == '') {
						hasNoUrl = true;
					} else {
						configUrl = frontModel.configuratorUrl;
					}
				}
				if(eppIsFlash || eppIsRefurbish){
					useConfiguratorUrl = false;
				}

				// CRHQ-3390 nonshop CTA 마크업 조정 건 :: S
				if(isNonShop && useConfiguratorUrl) {
					var pfMainDiv = $(".pd03-product-finder");
					var hasConfigClass = pfMainDiv.hasClass("pd03-product-finder--configurator");

					if(!hasConfigClass) {
						$(".pd03-product-finder").addClass("pd03-product-finder--configurator");
					}
				}
				// CRHQ-3390 nonshop CTA 마크업 조정 건 :: E

				// US > buyingConfigLinkType 이 pf 일 때만 buyingConfigLink 사용
				if(siteCode === "us") {
					if (frontModel.buyingConfigLinkType === 'pf') {
						useConfiguratorUrl = true;
						configUrl = frontModel.buyingConfigLink;
					}
				}

				var ctaTypeUpperCase = frontModel.ctaTypeUpperCase;

				var isSimplePD = product.simplePdYN === "Y" ? true : false;
				var buyingPDUrl = frontModel.originPdpUrl;
				if(isSimplePD) {
					if(isEppSite){
						if(frontModel.originPdpUrl != null){
							buyingPDUrl = frontModel.originPdpUrl.replace("feature.", "buy.");
						}
					} else {
						buyingPDUrl = frontModel.originPdpUrl + "buy/";
					}
				}

				var isSTDPD = false;
				if(!isSimplePD && frontModel.marketingpdpYN === "N") {
					isSTDPD = true;
				}
				if(isSTDPD) {
					frontModel.pdpUrl = getPdpUrlParamText(frontModel.pdpUrl, product.filterParamText);
				}
				//new-hybris
				if(isGPv2 || isNewHybris) {
					/* GPv2 standard pd 이동시 benefits 포커스 이동 :: 확인 필요함 */
					var learnmoreUrl = frontModel.pdpUrl;
					if (isSTDPD && pdurlAnchorCheckYn === "Y") {
						learnmoreUrl += "#benefits";
					}
					frontModel.pdpUrl = learnmoreUrl;
				}

				if(siteCode == "in" && categoryGroupCode != "01000000") {
					isSTDPD = false;
				}

				var isBespokeCta = false;
				if(isNotNull(frontModel.bespokeCtaUse) && frontModel.bespokeCtaUse == "Y") {
					isBespokeCta = true;
				}
				var isAddOn = false;
				/* VD add on 영역   old / new  hybris인 경우만 VD인지? 체크   uk sku 예외처리 */
				if(isOldHybris || isHybrisIntg || isNewHybris) {
					if(GROUPCODE_VD === categoryGroupCode && !frontModel.isUkSkuExpModel) {
						isAddOn = true;
					}
				}
				var fullCartUrl = storeDomain + cartUrl;
				if(cartUrl.indexOf("http://") > -1 || cartUrl.indexOf("https://") > -1) {
					fullCartUrl = cartUrl;
				}
				if(isEppSite){
					fullCartUrl = (isNewHybris?storeWebDomain:storeDomain) + "/" +eppCompanyCode + "/cart";
					if(isGPv2){
						fullCartUrl = cartUrl;
					}
				}

				// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건
				const storePopupClass =  isEppSite && checkEppOffline() && checkStorePopup(frontModel) ? " js-store-popup" : "";
				
				var actionBtn = "";
				var learnMoreBtn = `
				<button class="cta cta--outlined cta--black js-pfv2-learn-more" href="${frontModel.pdpUrl}" ${dataModelCodeAttr} ${dataModelNameAttr}
				aria-label="${Granite.I18n.get("Learn more")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
				an-tr='pd03_product finder:option-${pageTrack}-product-link' an-ca='product click' an-ac='pf product card' an-la='learn more click'>
					${Granite.I18n.get("Learn more")}
				</button>
				`;
				if(!frontModel.isDeSkuExpModel){
					if(siteCode == "cn" && frontModel.isComingSoon && frontModel.isComingSoon == true){	//SCIC hybris
						dataGetStockAttr = ' data-gs-flag="ComingSoon"';	//cn getStockAlert/ComingSoon 구분
						actionBtn += `
							<button class="cta cta--contained cta--black js-cta-stock" href="javascript:;" ${dataGetStockAttr} ${dataModelCodeAttr} ${dataModelNameAttr} ${dataShopSkuAttr} ${dataEppVirtualModelCodeAttr}
							an-tr="pd03_product finder:stock alert-product finder-cta-button" an-ca="buy cta" an-ac="stock alert" an-la="stock alert">
								${Granite.I18n.get("Coming Soon Title")}
							</button>
							`;
					}else{
						if(useConfiguratorUrl) {
							if(!frontModel.ctaLocalText || frontModel.ctaLocalText == "") {
								
								let configuratorCtaText = buyNowCta;
								//[EPP] epp 일때 configurator cta 에서 ctaType 별 텍스트 적용
								if(isEppSite){
									if(!isNonShop){
										if(ctaTypeUpperCase === "WHERETOBUY" || ctaTypeUpperCase === "BACKORDER" || ctaTypeUpperCase === "BACKORDERED" || ctaTypeUpperCase === "INSTOCK" || ctaTypeUpperCase === "LOWSTOCK"){
											if(isBespokeCta){
												configuratorCtaText = Granite.I18n.get("Customize yours");
											}else if(isSTDPD){
												configuratorCtaText = Granite.I18n.get("Add to cart");
											}
										} else if (ctaTypeUpperCase === "PREORDER"){
											configuratorCtaText = Granite.I18n.get("pre order");
										} else if (ctaTypeUpperCase === "OUTOFSTOCK"){
											configuratorCtaText = Granite.I18n.get("Get stock alert");
										}
									}
								}
		
								// console.log("case 01");
								actionBtn += `
								<button class="cta cta--contained cta--black js-pfv2-buy-now${storePopupClass}" href="javascript:;" data-link_info="" data-config_info="${configUrl}" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
									${configuratorCtaText}
								</button>
								`;
							} else {
								// console.log("case 02");
								actionBtn += `
								<button class="cta cta--contained cta--black js-pfv2-buy-now ${hasNoUrl ? 'cta--disabled' : ''}${storePopupClass}" href="javascript:;" ${hasNoUrl ? 'aria-disabled="true"' : ''}
								data-link_info="" data-config_info="${configUrl}" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
									${frontModel.ctaLocalText}
								</button>
								`;
							}
						} else if(isNotNull(originPrice)) {
							if(siteCode === "us" && ctaTypeUpperCase !== "PREORDER" &&
								(ctaTypeUpperCase === "WHERETOBUY" || ctaTypeUpperCase === "BACKORDER" || ctaTypeUpperCase === "BACKORDERED" || ctaTypeUpperCase === "INSTOCK" || ctaTypeUpperCase === "LOWSTOCK" || ctaTypeUpperCase === "OUTOFSTOCK")
							) {
								// console.log("case 03");
								// US 사이트  Buy Now CTA 표시 (PreOrder CTA 제외)
								actionBtn += `
								<button class="cta cta--contained cta--black js-pfv2-buy-now" href="${buyingPDUrl}" data-link_info="${buyingPDUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
									${buyNowCta}
								</button>
								`;
							} else if(!isNonShop) {
								// console.log("case 04");
								if(ctaTypeUpperCase === "WHERETOBUY" || ctaTypeUpperCase === "BACKORDER" || ctaTypeUpperCase === "BACKORDERED" || ctaTypeUpperCase === "INSTOCK" || ctaTypeUpperCase === "LOWSTOCK") {
									//bespoke CTA
									if(isBespokeCta) {
										actionBtn += `
										<button class="cta cta--contained cta--black js-pfv2-anchor-btn" href="${frontModel.bespokeCtaLink}" ${dataShopSkuAttr} data-link_info="${frontModel.bespokeCtaLink}" data-config_info="" ${dataModelCodeAttr}
										${dataModelNameAttr} ${bespokeCtaTaggingAttr}>
											${Granite.I18n.get("Customize yours")}
										</button>
										`;
									} else if(isSTDPD) {
										if (isAddOn) {
											// console.log("case 05");
											actionBtn += `
											<button class="cta cta--contained cta--black js-cta-addon${storePopupClass}" href="javascript:;" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
											data-cart="true" ${dataAddOn} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowToCartTaggingAttr}>
												${Granite.I18n.get("Add to cart")}
											</button>
											`;
										} else if(siteCode === "br") {
											// console.log("case 06");
											actionBtn += `
											<button class="cta cta--contained cta--black js-pfv2-buy-now" href="javascript:;" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
											data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
												${Granite.I18n.get("Add to cart")}
											</button>
											`;
										} else {
											if(frontModel.isUkSkuExpModel){
												// uk sku cta button buy now, link learn-more
												actionBtn += `
												<button class="cta cta--contained cta--black js-pfv2-learn-more" href="${frontModel.pdpUrl}" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
												data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${addToCartTaggingAttr}>
													${buyNowCta}
												</button>
												`;
											}else{
			                					//EPP flash,refurbish addtocart cta 변경
												//[24.02.13] flashsale D2R 스토어는 "add to cart" CTA 사용
			                                	if((eppIsFlash && window.sg.epp.common.ecomStoreType != "D2R") || eppIsRefurbish){
			    									actionBtn += `
			    										<button class="cta cta--contained cta--black js-pfv2-buy-now${storePopupClass}" href="${buyingPDUrl}" data-link_info="${buyingPDUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
			    											${buyNowCta}
			    										</button>
			    										`;		                                		
			                                	}else{
													// console.log("case 07");
													actionBtn += `
													<button class="cta cta--contained cta--black js-pfv2-buy-now${storePopupClass}" href="javascript:;" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
													data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${addToCartTaggingAttr}>
														${Granite.I18n.get("Add to cart")}
													</button>
													`;		                                		
			                                	}
												
											}
										}
									} else {
										// console.log("case 08");
										//[24.02.13] flashsale D2R 스토어는 "add to cart" CTA 사용
										if(eppIsFlash && window.sg.epp.common.ecomStoreType === "D2R"){
											actionBtn += `
												<button class="cta cta--contained cta--black js-pfv2-buy-now${storePopupClass}" href="javascript:;" aria-label="${Granite.I18n.get("Add to cart")}:${escapeHtml(frontModel.displayName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))}"
												data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}" data-config_info="" ${taggingAttrForBuy} ${addToCartTaggingAttr}>
													${Granite.I18n.get("Add to cart")}
												</button>
												`;										
										}else{
											actionBtn += `
											<button class="cta cta--contained cta--black js-pfv2-buy-now${storePopupClass}" href="${buyingPDUrl}" data-link_info="${buyingPDUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
												${buyNowCta}
											</button>
											`;
										}
									}
								} else if(ctaTypeUpperCase === "PREORDER") {
									if(isSTDPD) {
										if(isAddOn) {
											// console.log("case 09");
											actionBtn += `
											<button class="cta cta--contained cta--black js-cta-addon${storePopupClass}" href="javascript:;" data-cart="true" ${dataAddOn} data-link_info="${fullCartUrl}" data-config_info=""
											${taggingAttrForBuy} ${preOrderToCartTaggingAttr}>
												${Granite.I18n.get("pre order")}
											</button>
											`;
										} else {
											// console.log("case 10");
											actionBtn += `
											<button class="cta cta--contained cta--black js-pfv2-buy-now${storePopupClass}" href="javascript:;" data-cart="true" ${dataShopSkuAttr} data-link_info="${fullCartUrl}"data-config_info=""
											${taggingAttrForBuy} ${preOrderToCartTaggingAttr}>
												${Granite.I18n.get("pre order")}
											</button>
											`;
										}
									} else {
										// console.log("case 11");
										actionBtn += `
										<button class="cta cta--contained cta--black js-pfv2-buy-now${storePopupClass}" href="${buyingPDUrl}" data-link_info="${buyingPDUrl}" data-config_info="" ${taggingAttrForBuy} ${preOrderToLinkTaggingAttr}>
											${Granite.I18n.get("pre order")}
										</button>
										`;
									}
								} else if(ctaTypeUpperCase === "OUTOFSTOCK") {
									//EPP flash,refurbish outofstock cta 변경
									const outOfStockCta = (eppIsFlash || eppIsRefurbish)? Granite.I18n.get("Out Of Stock") : Granite.I18n.get("Get stock alert");
									const stockCss = (eppIsFlash || eppIsRefurbish)? "cta--disabled" : "js-cta-stock";
									const ariaDisabled = (eppIsFlash || eppIsRefurbish)? "aria-disabled=\"true\"" : "";
									// console.log("case 12");
									actionBtn += `
									<button class="cta cta--contained cta--black ${stockCss}" href="javascript:;" ${dataGetStockAttr} ${dataModelCodeAttr} ${dataModelNameAttr} ${dataShopSkuAttr} ${dataEppVirtualModelCodeAttr}
									an-tr="pd03_product finder:stock alert-product finder-cta-button" an-ca="buy cta" an-ac="stock alert" an-la="stock alert" ${ariaDisabled}>
										${outOfStockCta}
									</button>
									`;
								}
							} else if(siteCode === "tr" && ctaTypeUpperCase === "WHERETOBUY") {
								// console.log("case 13");
								actionBtn += `
								<button class="cta cta--contained cta--black js-pfv2-buy-now" href="${frontModel.shopCtaUrl}" data-link_info="${frontModel.shopCtaUrl}" data-config_info="" ${taggingAttrForBuy} ${buyNowtoLinkTaggingAttr}>
									${buyNowCta}
								</button>
								`;
							}
						}
					}
				}
				var buildTextCTAArea = function(product, ctaTypeUpperCase) {
					var tempProductCardTemplate = "";
					var frontModel = product.modelList[product.frontModelIdx];
					var wtbOnlineDispFuncUseYN = product.wtbOnlineDispFuncUseYN;
					var wtbStockStatusText = frontModel.stockStatusText;
					var wtbDispFuncUseYN = product.wtbDispFuncUseYN;

					var dataModelCodeAttr =  ' data-modelcode="'+frontModel.modelCode+'"';
					var dataModelNameAttr = ' data-modelname="'+escapeHtml(frontModel.modelName.replace(/<br>/ig, " ").replace(/<sup>/ig, " "))+'"';

					var whereToBuy = "";
					var compare = "";

					/* Where To Buy 영역 */
					if(frontModel.wtbUseFlag==="Y" && isNotNull(product.categorySubTypeCode) && siteCode !== "mx") {
						//wtbDispFuncUseYN "Y" 재고가 없으면 wtb 노출 or wtbDispFuncUseYN "N" wtb 노출 이거나 shop 국가가 아닌경우 wtb 노출
						if((!isNonShop && ((wtbDispFuncUseYN === "Y" && ctaTypeUpperCase === "LEARNMORE") || wtbDispFuncUseYN === "N"))|| isNonShop){
							if(siteCode === "at" || siteCode === "ch" || siteCode === "ch_fr" || siteCode === "de") {
								whereToBuy += `
								<a class="cta cta--label cta--black cta--icon cta--icon-leading cta--icon-location js-cta-buy" href="javascript:void(0);"
								${dataModelCodeAttr} ${dataModelNameAttr} data-title="${escapeHtml(frontModel.displayName.replace(/<br>/ig," ").replace(/<sup>/ig," "))}"
								${wtbTaggingAttr} data-iacode="${product.categorySubTypeCode}" data-img-src="${frontModel.thumbUrl}">
									${Granite.I18n.get("Where to buy")}
									<svg class="icon" focusable="false" aria-hidden="true">
										<use xlink:href="#location-for-pf" href="#location-for-pf"></use>
									</svg>
								</a>
								`;
							} else {
								if(siteCode === "us") {
									whereToBuy += `
									<a class="cta cta--label cta--black cta--icon cta--icon-leading cta--icon-location" href="/us/where-to-buy/${frontModel.modelCode}/"
									role="button" target="_blank" aria-label="${Granite.I18n.get("Open in a new window")}"
									${wtbTaggingAttr} data-iacode="${product.categorySubTypeCode}" ${dataModelCodeAttr} ${dataModelNameAttr}>
										${Granite.I18n.get("Where to buy")}
										<svg class="icon" focusable="false" aria-hidden="true">
											<use xlink:href="#location-for-pf" href="#location-for-pf"></use>
										</svg>
									</a>
									`;
								} else {
									whereToBuy += `
									<a class="cta cta--label cta--black cta--icon cta--icon-leading cta--icon-location js-cta-buy" href="javascript:void(0);" role="button"'
									${wtbTaggingAttr} data-iacode="${product.categorySubTypeCode}" ${dataModelCodeAttr} ${dataModelNameAttr}>
										${Granite.I18n.get("Where to buy")}
										<svg class="icon" focusable="false" aria-hidden="true">
											<use xlink:href="#location-for-pf" href="#location-for-pf"></use>
										</svg>
									</a>
									`;
								}
							}
						}
					}
					/* Compare 영역 */
					if(useCompareButton) {
						if(frontModel.specCompareYN !== "N"){
							var addedCompareCls = '';
							var compareIconHtml = '<use xlink:href="#default-circle-regular" href="#default-circle-regular"></use>';
							var addedCompareModelCode = '';
							if(product.addedCompareYN === "Y"){
								addedCompareCls = ' cta--done';
								compareIconHtml = '<use xlink:href="#circle-selected-regular" href="#circle-selected-regular"></use>';
								addedCompareModelCode = product.addedCompareModelCode;
							}
							let eppOriginModelCodeAttr = '';
							if(eppIsFlash || eppIsRefurbish){
								eppOriginModelCodeAttr = ` data-originmodelcode="${frontModel.originModelCode}"`;
							}
							compare = `
							<button class="cta cta--label cta--black cta--icon cta--icon-leading cta--icon-compare js-pfv2-compare-cta ${addedCompareCls}"
							${dataModelCodeAttr} ${dataModelNameAttr} ${compareCTATaggingAttr}${eppOriginModelCodeAttr}
							data-displayname="${escapeHtml(product.modelList[product.frontModelIdx].displayName.replace(/<br>/ig," ").replace(/<sup>/ig," "))}"
							data-addedmodelcode="${addedCompareModelCode}" data-categorysubtypecode="${product.categorySubTypeCode}" data-text-pressed="${Granite.I18n.get("Comparing")}"
							data-img-src="${frontModel.thumbUrl}" data-img-alt="${frontModel.thumbUrlAlt}"
							>
								${Granite.I18n.get("Compare")}
								<svg class="icon" focusable="false" aria-hidden="true">
									${compareIconHtml}
								</svg>
							</button>
							`;
						}
					}

					if(whereToBuy !== "" || compare !== "") {
						tempProductCardTemplate = `
						<div class="pd03-product-card__icon-text-cta-wrap">
							<input type="hidden" class="wtbStockStatusText" value="${wtbStockStatusText}">
							<input type="hidden" class="useWtbStockFunction" value="${wtbOnlineDispFuncUseYN}">
							${whereToBuy}
							${compare}
						</div>
						`;
					} else {
						tempProductCardTemplate = `<div class="pd03-product-card__icon-text-cta-wrap no-data"></div>`;
					}
					return tempProductCardTemplate;
				}
				// desktopButtonPosition vertical 때 learn more가 앞으로
				// 모바일은 반응형이라 js에서 제어 불가능
				// vertical, horizontal
				// desktopCardLayout
				var ctaButtons = "";
				// if(desktopButtonPosition == 'vertical') {
				// }
				ctaButtons += learnMoreBtn;
				ctaButtons += actionBtn;
				// if(desktopButtonPosition != 'vertical') {
				// 	ctaButtons += learnMoreBtn;
				// }

				var productCardTemplate = `
				<div class="pd03-product-card__label-cta-wrap">
					${ctaButtons}
				</div>
				${buildTextCTAArea(product, ctaTypeUpperCase)}
				`;
				return productCardTemplate;
			}
			// Highlight Card 이면서 Lifestyle 이미지(Highlight Card용 이미지)가 없는 경우에는 pd03-product-card__product-image-cta--outlined 클래스를 추가
			var outLineClass = (useHighlightCard && !isHighligtedImg)?' pd03-product-card__product-image-cta--outlined':'';
			// Highlight Card 내에 Lifestyle img가 업로드되지 않았을 때 이미지 영역에 pd03-product-card__product-image--no-lifestyle-img 클래스 추가
			var highlightNoImgClass = (useHighlightCard && !isHighligtedImg)?' pd03-product-card__product-image--no-lifestyle-img':'';

			var productCardTemplate = `
				<!--/* PD03 Product Card Component */-->
				<div class="pd03-product-card pd03-product-card--${desktopCardLayout}">
					${highlightBar}
					<div class="pd03-product-card__item">
						<div class="pd03-product-card__product-image${highlightNoImgClass}">
							<!-- product images -->
							${productCardImageBuild(product, isSTDPD)}
							<!-- award icons -->
							${productCardAwardBuild(product)}
							<-- quick view -->
							<button class="pd03-product-card__product-image-cta cta ${quickViewCtaClass} pd03-product-card__quickview_btn ${outLineClass}" aria-label="Button Label"
							an-tr="pd03_product finder-product finder-quick view-option_click1" an-ca="option click" an-ac="pf product card" an-la="quick view">
								${Granite.I18n.get('Quick Look')}
							</button>
						</div>
						<div class="pd03-product-card__product-content">
							<!-- badge -->
							${productCardBadgeBuild(product)}
							<!-- wishlist -->
							${productCardWishlistBuild(product, upperStock)}
							<div class="pd03-product-card__product-content-primary">
								<div class="pd03-product-card__product-name">
									${productCardNameBuild(product, isSTDPD)}
								</div>
								<!-- option chips -->
								${productCardFmyOptionBuild(product)}
								<!-- price area vertical -->
								${productCardPriceAreaBuild(product, upperStock, product.thirdPASeller, 'vertical')}
								<!-- package area vertical -->
								${productCardPkgChildBuild(product.modelList[product.frontModelIdx], 'vertical')}
								<!-- energy fiche vertical -->
								${productCardEnergyLabelBuild(product.modelList[product.frontModelIdx], 'vertical')}
								<!-- stock status vertical -->
								${productCardStockStatusBuild(product.modelList[product.frontModelIdx], 'vertical')}
								<!-- rating area -->
								${productCardRatingAreaBuild(product)}
								<!-- spec -->
								${productCardSpecBuild(product)}
							</div>
							<div class="pd03-product-card__product-content-secondary">
								<!-- price area horizontal -->
								${productCardPriceAreaBuild(product, upperStock, product.thirdPASeller, 'horizontal')}
								<!-- energy fiche horizontal -->
								${productCardEnergyLabelBuild(product.modelList[product.frontModelIdx], 'horizontal')}
								<!-- stock status horizontal -->
								${productCardStockStatusBuild(product.modelList[product.frontModelIdx], 'horizontal')}
								<!-- feature benefit -->
								${productCardOfferBuild(product, emiPrice)}
								<!-- national flags and price campaign -->
								${productCardFlagAndCampaign(product)}
								<!-- CTA area -->
								${productCardCTABuild(product, originPrice, discountPrice, dataPricetext, dataMonth)}
							</div>
						</div>
					</div>
				</div>
				<!--/* // PD03 Product Card Component */-->
			`;

			return productCardTemplate;
		}

		/**
		 * Product 데이터를 가공하여 반환한다.
		 */
		var getProductInfo = function(product){
			var tempProduct = product;

			tempProduct.categoryTypeCode = categoryTypeCode;

			/* Award Data 셋팅  :: S */
			if(isNotNull(tempProduct.awardList) && tempProduct.awardList.length > 0){
				var removeIdxArr = [];
				tempProduct.awardList.forEach(function(item,index){
					if(isNotNull(item.awardImg)){
						item.awardImgWithPreset = pfImgDomain(item.awardImg, "", null);
						item.awardLazyImg = pfImgDomain(item.awardImg, "lazy", null);
					} else {
						removeIdxArr.unshift(index);
					}
				});
				removeIdxArr.forEach(function(item){
					tempProduct.awardList.splice(item,1);
				});
			}
			/* Award Data 셋팅  :: E */

			/*
			 * viewOptionObj : 전체 옵션칩 리스트
			 * optionTypeList : 옵션 타입만 담고 있는 리스트 ( 옵션타입의 index 값을 구하기 위해 생성함 )
			 */

			var tmpOptionListInModel = {};
			for(var mi in tempProduct.modelList){
				var tmpModel = tempProduct.modelList[mi];
				var tmpFmyChipList = tmpModel.fmyChipList;

				for(var fci in tmpFmyChipList){
					//fmyChipCode에 " 제거
					var thisOptionKey = tmpFmyChipList[fci].fmyChipType + '+'+
					 					tmpFmyChipList[fci].fmyChipCode.replace("\"", "").replace("&quot;", "")+'+'+
					 					tmpFmyChipList[fci].fmyChipLocalName.replace("\"", "").replace("&quot;", "");

					if(tmpOptionListInModel[thisOptionKey] == undefined){
						tmpOptionListInModel[thisOptionKey] = mi;
					} else {
						tmpOptionListInModel[thisOptionKey] += ","+mi;
					}
				}
				// SEF, SEBN, SEDA(rs, al, mk, ba은 스토어국가아니므로 패스), SENA, SEPOL, SEH (우선 pl만 반영)
				// 기존 price(원가, msrp price 포함)가 이미 노출되는 경우에 이를 lowestWasPrice 가 노출되도록 변경하는 작업
				// [EPP] epp meta 체크 추가
				// lowestwasprice 가 price 보다 낮거나 같고, promotion price보다 높을 때만 적용
				tmpModel['lowestWasPriceUseYn'] = "N";
				if(((
					 (isStrikethroughRmSite)
					 && !isEppSite) || (isEppSite && eppOmniPricingUseYn == "Y"))
				&& isNotNull(tmpModel.lowestWasPrice)
				&& isNotNull(tmpModel.promotionPrice)
				&& (parseFloat(tmpModel.lowestWasPrice) <= parseFloat(tmpModel.price) && parseFloat(tmpModel.promotionPrice) < parseFloat(tmpModel.lowestWasPrice))
				){
					console.log("modelCode [{}] origin price::{}", tmpModel.modelCode, tmpModel.price);
					console.log("origin priceDisplay::"+tmpModel.priceDisplay);
					console.log("origin saveText::"+tmpModel.saveText);
					//[EPP] lowestWasPrice 적용
					tmpModel.price = (isEppSite && siteCode === "it") ? tmpModel.promotionPrice : tmpModel.lowestWasPrice;
					
					if(isEppSite){
						tmpModel.priceDisplay = (isEppSite && siteCode === "it") ? currencyComma(tmpModel.promotionPrice, pfPriceCurrency) : currencyComma(tmpModel.lowestWasPrice, pfPriceCurrency);
					}else{
						if(!isOldHybris){// oldHybris 는 예외처리 들어온 priceDisplay를 노출
							tmpModel.priceDisplay = currencyComma(tmpModel.lowestWasPrice, pfPriceCurrency);
						}
					}
					/*
					if(siteCode === "hr"){
						tmpModel.priceDisplay = currencyComma(tmpModel.lowestWasPrice, pfPriceCurrency)+" ("+euroToKunaPrice(tmpModel.lowestWasPrice)+")";
					}
					*/
					if(isNotNull(tmpModel.msrpPrice)){
						tmpModel.msrpPrice = tmpModel.lowestWasPrice;
						console.log("after msrpPrice::"+tmpModel.msrpPrice);
					}
					tmpModel.saveText = parseFloat(tmpModel.lowestWasPrice) - parseFloat(tmpModel.promotionPrice);
					tmpModel.lowestWasPriceUseYn = "Y";
					console.log("after price::"+tmpModel.price);
					console.log("after priceDisplay::"+tmpModel.priceDisplay);
					console.log("after saveText::"+tmpModel.saveText);
				}
				tmpModel['isUkSkuExpModel'] = false;
				tmpModel['isDeSkuExpModel'] = false;
				// uk 예외처리
				if(siteCode === "uk" && $.inArray(tmpModel.modelCode, UK_SKU_EXCEPTION) >= 0){
					tmpModel.isUkSkuExpModel = true;
				}
				if(siteCode === "de" && $.inArray(tmpModel.modelCode, DE_SKU_EXCEPTION) >= 0){
					tmpModel.isDeSkuExpModel = true;
				}
			}

			var optionTypeList = [];
			var viewOptionObj = {};
			if(isNotNull(tempProduct.chipOptions)){
				for(var a=0; a<tempProduct.chipOptions.length; a++){
					var optionData = tempProduct.chipOptions[a];
					var optionTypeTmp = optionData.fmyChipType;

					var optionListInType = optionData.optionList;
					for(var opl in optionListInType){
						var thisOptionKey = optionData.fmyChipType + '+'+
											optionListInType[opl].optionCode.replace("\"", "").replace("&quot;", "")+'+'+
											optionListInType[opl].optionLocalName.replace("\"", "").replace("&quot;", "");
						if(tmpOptionListInModel[thisOptionKey] != undefined){
							optionListInType[opl].modelIdx = tmpOptionListInModel[thisOptionKey];
						}

					}
					viewOptionObj[optionTypeTmp] = {};
					viewOptionObj[optionTypeTmp]['optionList'] = optionListInType;

					optionTypeList.push(optionTypeTmp);
				}
			}


			tempProduct["viewOptionObj"] = viewOptionObj;
			tempProduct["optionTypeList"] = optionTypeList;

			tempProduct.addedCompareYN = "N";
			for(var cmi in pfCompareModelList){
				if(pfCompareModelList[cmi].firstModelCode == tempProduct.modelList[0].modelCode){
					tempProduct.addedCompareModelCode = pfCompareModelList[cmi].modelCode;
					tempProduct.addedCompareYN = "Y";
					break;
				}
			}
			return tempProduct;
		};

		/**
		 * Product 에 model 데이터를 가공하여 반환한다.
		 *
		 * @param product
		 * @param frontModelIdx Product 의 model리스트 중 노출할 model의 index
		 * @return product
		 */
		var getProductModelInfo = function(product, frontModelIdx){
			var tempProduct = product;

			if(isNotNull(frontModelIdx) && isNotNull(tempProduct.modelList) && isNotNull(tempProduct.modelList[frontModelIdx])){

				var tempModel = tempProduct.modelList[frontModelIdx];
				var isRecommended = tempProduct.isRecommended && tempProduct.isRecommended === "Y"? true : false;

				/* Fmy Icon 셋팅 :: S*/
				var iconUseFlag = "N";
				var iconInfoObj = {};

				if(isNewHybris && !(siteCode === "pe" || siteCode === "cl" || siteCode === "mx" || siteCode === "co" || siteCode === "cn")){//[cn new-hybris 전환]
					tempModel.merchandisingText = "";
				}
				if(isNotNull(tempModel.merchandisingText)){
					/* 20201120 merchandisingText 가 있을 경우 User Key-in Badge와 같은 초록색 Badge로 Text 표시*/
					iconInfoObj["iconText"] = tempModel.merchandisingText;
					iconInfoObj["iconClass"] = " badge-icon--bg-color-teal";
					iconUseFlag = "Y";
				} else if(isNotNull(tempModel.topFlags) && isNotNull(tempModel.topFlags.iconTypeCd)){
					if(tempModel.topFlags.iconTypeCd === "N"){
						iconInfoObj["iconText"] = Granite.I18n.get("new");
						iconInfoObj["iconClass"] = " badge-icon--bg-color-blue";
						iconUseFlag = "Y";
					} else if(tempModel.topFlags.iconTypeCd === "H"){
						iconInfoObj["iconText"] = Granite.I18n.get("hot");
						iconInfoObj["iconClass"] = " badge-icon--bg-color-red";
						iconUseFlag = "Y";
					} else if(tempModel.topFlags.iconTypeCd === "B"){
						iconInfoObj["iconText"] = Granite.I18n.get("best seller");
						iconInfoObj["iconClass"] = " badge-icon--bg-color-orange";
						iconUseFlag = "Y";
					} else if(tempModel.topFlags.iconTypeCd === "U"){
						iconInfoObj["iconText"] = tempModel.topFlags.iconTitle;
						iconInfoObj["iconClass"] = " badge-icon--bg-color-teal";
						iconUseFlag = "Y";
					}
				}

				tempProduct.modelList[frontModelIdx].fmyIconYN = iconUseFlag;
				tempProduct.modelList[frontModelIdx].iconInfoObj = iconInfoObj;
				/* Fmy Icon 셋팅 :: E */

				/* Product Name SKU 단위로 조정  :: S */
				if(fnIsNull(tempModel.displayName)){
					tempProduct.modelList[frontModelIdx].displayName = "";
				}
				/* Product Name SKU 단위로 조정  :: E */

				// Highlight Image SS
				let highlightDesktopImage = "";
				let highlightMobileImage = "";
				let highlightImageAlt = "";
				if(isRecommended && useHighlightCard) {
					const runmodeInfo = $("#runmodeInfo").val();
					const serverType = $("#serverType").val();
					highlightDesktopImage = jqueryImgsrc(String($pfComponent.data("highlightdesktopimageref") ?? "").trim(), runmodeInfo, serverType);
					highlightMobileImage = jqueryImgsrc(String($pfComponent.data("highlightmobileimageref") ?? "").trim(), runmodeInfo, serverType);
					highlightImageAlt = String($pfComponent.data("highlightalttext") ?? "").trim();
				}

				// Highlight Image EE

				/* Gallery Image URL 정보 셋팅 :: S */
				if(isNotNull(tempModel.thumbUrl)){

					var galleryArray = [];
					var galleryObj = {};

					// Highlight 이미지가 있는 경우에는 Thumbnail 이미지를 대체한다.
					if(isRecommended) {
						const desktopImage = highlightDesktopImage.trim() !== ""? highlightDesktopImage : tempModel.thumbUrl;
						const mobileImage = highlightMobileImage.trim() !== ""? highlightMobileImage : tempModel.thumbUrl;
						galleryObj = {};
						galleryObj['imageUrlDesktop'] = pfImgDomain(desktopImage, "product-desktop", null, isRecommended);
						galleryObj['imageUrlMobile'] = pfImgDomain(mobileImage, "product-mobile", null, isRecommended);
						// galleryObj['imageUrlQuickViewDesktop'] = pfImgDomain(highlightDesktopImage, "quickview-desktop", null, isRecommended);
						// galleryObj['imageUrlQuickViewMobile'] = pfImgDomain(highlightMobileImage, "quickview-mobile", null, isRecommended);
						galleryObj['lazyImageUrl'] = pfImgDomain(desktopImage, "lazy", null, isRecommended);
						galleryObj['imageAlt'] = highlightImageAlt;
						galleryArray.push(galleryObj);
					} else if(isNotNull(tempModel.thumbUrl)){
						galleryObj = {};
						galleryObj['imageUrlDesktop'] = pfImgDomain(tempModel.thumbUrl, "product-desktop", null, isRecommended);
						galleryObj['imageUrlMobile'] = pfImgDomain(tempModel.thumbUrl, "product-mobile", null, isRecommended);
						// galleryObj['imageUrlQuickViewDesktop'] = pfImgDomain(tempModel.thumbUrl, "quickview-desktop", null, isRecommended);
						// galleryObj['imageUrlQuickViewMobile'] = pfImgDomain(tempModel.thumbUrl, "quickview-mobile", null, isRecommended);
						galleryObj['lazyImageUrl'] = pfImgDomain(tempModel.thumbUrl, "lazy", null, isRecommended);
						galleryObj['imageAlt'] = tempModel.thumbUrlAlt
						galleryArray.push(galleryObj);
					}
					if(isNotNull(tempModel.galleryImage) && tempModel.galleryImage.length > 0){
						for(var gi=0; gi<tempModel.galleryImage.length; gi++){
							if(isNotNull(tempModel.galleryImage[gi])){
								galleryObj = {};
								galleryObj['imageUrlDesktop'] = pfImgDomain(tempModel.galleryImage[gi], "product-desktop", null, isRecommended);
								galleryObj['imageUrlMobile'] = pfImgDomain(tempModel.galleryImage[gi], "product-mobile", null, isRecommended);
								galleryObj['imageUrlQuickViewDesktop'] = pfImgDomain(tempModel.galleryImage[gi], "quickview-desktop", null, isRecommended);
								galleryObj['imageUrlQuickViewMobile'] = pfImgDomain(tempModel.galleryImage[gi], "quickview-mobile", null, isRecommended);
								galleryObj['lazyImageUrl'] = pfImgDomain(tempModel.galleryImage[gi], "lazy", null, isRecommended);
								if(isNotNull(tempModel.galleryImageAlt[gi])){
									galleryObj['imageAlt'] = tempModel.galleryImageAlt[gi];
								} else {
									galleryObj['imageAlt'] = tempModel.thumbUrlAlt;
								}
								galleryArray.push(galleryObj);
							}else{
								tempProduct.modelList[frontModelIdx].galleryImage[gi] = "";
							}
						}
					}
					tempProduct.modelList[frontModelIdx].galleryList = galleryArray;

					tempProduct.modelList[frontModelIdx].thumbUrl = pfImgDomain(tempModel.thumbUrl, "product-desktop", null, isRecommended);
				}
				/* Gallery Image URL 정보 셋팅 :: E */

				/* 별점 정보 & review Count :: S */
				if(reviewUseYN ==="Y" || reevooUseYN === "Y"){
					var item = "";
					var ratings = tempModel.ratings;
					if(fnIsNull(ratings)){
						ratings = 0;
						tempProduct.modelList[frontModelIdx].ratings = 0;
					}

					// rating 반올림 처리
					var tmpCount = Math.pow(10,1);
					ratings = Math.round(ratings*tmpCount)/tmpCount;

					var ratingValue = parseFloat(ratings).toFixed(1),
					fullStarCnt = parseInt(ratings),
					cutStarWidthStyleNum = 0;
					cutStarWidthStyleNum = parseInt((ratingValue-fullStarCnt)*100);

					if(ratingValue !== "0.0"){
						tempProduct.modelList[frontModelIdx].ratings = ratingValue;
					}

					for(var j=0; j<fullStarCnt;j++){
						item+='<span class="rating__star-item"><span class="rating__star-empty"></span><span class="rating__star-filled" style="width: 100%;"></span></span>';
					}
					if(fullStarCnt < 5 && fullStarCnt > 0){
						item+='<span class="rating__star-item"><span class="rating__star-empty"></span><span class="rating__star-filled" style="width: ' + cutStarWidthStyleNum + '%;"></span></span>';
						for(var k=4;k>fullStarCnt;k--){
							item+='<span class="rating__star-item"><span class="rating__star-empty"></span><span class="rating__star-filled" style="width: 0%;"></span></span>';
						}
					} else if ( fullStarCnt === 0 ){
						for(var empty_idx=0;empty_idx<5;empty_idx++){
							item+='<span class="rating__star-item"><span class="rating__star-empty"></span><span class="rating__star-filled" style="width: 0%;"></span></span>';
						}
					}
					tempProduct.modelList[frontModelIdx].ratingHtml = item;

					if(fnIsNull(tempModel.reviewCount)){
						tempProduct.modelList[frontModelIdx].reviewCount = "0";
					}
					tempProduct.modelList[frontModelIdx].ratingsText = Granite.I18n.get("{0} out of {1} Stars",["<span>"+tempModel.ratings+"</span>","5"],siteCode);

				}
				/* 별점 정보 & review Count :: E */

				/* Energy Label Data :: S */
				if(fnIsNull(tempModel.energyLabelGrade)){
					tempProduct.modelList[frontModelIdx].energyLabelGrade = "";
				}
				if(fnIsNull(tempModel.ficheFileUrl)){
					tempProduct.modelList[frontModelIdx].ficheFileUrl = "";
				}
				/* Energy Label Data :: E */
			}
			return tempProduct;
		};

		var buildProductGrid = function(jsonData){
			var productGridTemplate = "";

			if(useUSEppDiscount){
				jsonData.productList = getUsEppDiscountPriceData(jsonData.productList);
			}
			if(loadPageCount === 1){
				productListData = jsonData.productList;
				productListIndex = 0;
			} else {
				productListData = productListData.concat(jsonData.productList);
			}

			var productCardIndex = 0;
			var isFirstPromotionCardUsed = false;
			var isSecondPromotionCardUsed = false;

			if(isNotNull(jsonData.productList) && jsonData.productList.length > 0){
				$('.js-pfv2-noresult').remove();
				$viewMoreArea.show();
				
				// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건 : [S]
				let arrInventoryInfo = [];
				if ( isEppSite && checkEppOffline() ) {		
					let arrOfflineModel = [];
					//selected model을 찾고 그 모델의 shopSKU를 arrOfflineModel에 저장해서 ajax 호출시에 파라미터로 넘긴다.
					for(var pr=0; pr<jsonData.productList.length; pr++){
						var tempProduct = jsonData.productList[pr];
						if(isNotNull(tempProduct.modelList) && tempProduct.modelList.length > 0){
							for(var cnt=0; cnt<tempProduct.modelList.length; cnt++){
								var tempModel = tempProduct.modelList[cnt];
								if(tempModel.selected !== undefined && tempModel.selected === "Y"){
									arrOfflineModel[pr] = tempModel.shopSKU;
								}
							}	
						}
					}

					//arrOfflineModel 정보가 있을 경우만 ajax 호출
					if ( arrOfflineModel != null && arrOfflineModel.length > 0 ){
						offlineStockAjax(arrOfflineModel).done(function(data){
							arrInventoryInfo = data.inventory_info;
						}).fail(function(data, textStatus, errorThrown){
							console.error(data.statusText);
		                });
					}					
				}
				// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건 : [E]
				
				for(var pr=0; pr<jsonData.productList.length; pr++){

					var tempProduct = jsonData.productList[pr];


					var selectedIndex = 0;	// selected Y값이 여러개 올경우 마지막 모델의 index

					if(isNotNull(tempProduct.modelList) && tempProduct.modelList.length > 0){
						/* selected가 Y인 모델의 마지막 index가 변수에 저장됨.*/
						for(var cnt=0; cnt<tempProduct.modelList.length; cnt++){
							var tempModel = tempProduct.modelList[cnt];
							if(tempModel.selected !== undefined && tempModel.selected === "Y"){
								selectedIndex = cnt;
							}
						}
					}
					tempProduct.frontModelIdx = selectedIndex;

					tempProduct = getProductInfo(tempProduct);
					//product까지 가공된 데이터를 productListData 에 저장해줌
					productListData[productListIndex] = tempProduct;

					var refinedProduct = getProductModelInfo(tempProduct, selectedIndex);

					// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건 : [S]
					// 위의 inventory ajax 호출 결과가 저장된 arrInventoryInfo를 파싱하여 동일한 모델의 offlineStockCount 값을 업데이트한다.
					if ( arrInventoryInfo != null && arrInventoryInfo.length > 0 ){
						let ivtInfo = arrInventoryInfo.find(ivt => ivt.sku === refinedProduct.modelList[selectedIndex].shopSKU);
						if ( ivtInfo != null ){
							refinedProduct.modelList[selectedIndex].offlineStockCount = ivtInfo.quantity_available;
						}
					}
					// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건 : [E]
					
					// Dialog 에서 Authoring 한 contentCard 추가
					// ## PFV2 S : 필터 사용시 프로모션카드 보이지 않기 // 2022.09.13 필터 사용시에도 프로모션 카드 보이도록 요청.
					if(loadPageCount === 1 && usePromotionCard && usePromotionPosition){
						if (productListIndex === 0 && useHighlightCard && tempProduct.isRecommended == "Y") { // Highlight card 사용 여부에 따른 promotion card 위치 조정
							refinedProduct.isHighlightCard = true;
							if (firstPromotionCardIdx === 1) {
								firstPromotionCardIdx = 2;
								if(useSecondPromotionCard){
									secondPromotionCardIdx++;
								}
							}else if(useSecondPromotionCard && secondPromotionCardIdx === 1){
								secondPromotionCardIdx = 2;
								firstPromotionCardIdx++;
							}
						}

						if(firstPromotionCardIdx-1 === productCardIndex){
							productGridTemplate += $firstPromotionCard.html();
							productCardIndex++;
							isFirstPromotionCardUsed = true;
						} else if(useSecondPromotionCard && secondPromotionCardIdx-1 === productCardIndex){
							productGridTemplate += $secondPromotionCard.html();
							productCardIndex++;
							isSecondPromotionCardUsed = true;
						}
					}
					//## PFV2 E

					productGridTemplate +=
						'<!--/* product-card-grid */-->'+
						'<div class="pd03-product-finder__content-item pd03-product-finder__content-item-view js-pfv2-product-card" data-productidx='+productListIndex+'>' +
						buildProductCardV2(refinedProduct)+
						'</div>';

					// Dialog 에서 Authoring 한 contentCard 추가
					// Promotion Card가 Large 일 경우 위치는 5 와 10  으로 고정되는데, 여기서 처리가 완료된다.
					if(loadPageCount === 1 && usePromotionCard && !usePromotionPosition){
						if(firstPromotionCardIdx-1 === pr){
							productGridTemplate += $firstPromotionCard.html();
							isFirstPromotionCardUsed = true;
						} else if(useSecondPromotionCard && secondPromotionCardIdx-1 === pr){
							productGridTemplate += $secondPromotionCard.html();
							isSecondPromotionCardUsed = true;
						}
					}
					//## PFV2 E
					productListIndex++;
					productCardIndex++;
				}
				// Dialog 에서 Authoring 한 contentCard 추가
				// Promotion Card가 Large 일 경우 위치는 5 와 10  으로 고정되는데, for문에서 처리가 완료된다.
				if(loadPageCount === 1 && usePromotionCard && !useLargePromotionCard) {
					if(firstPromotionCardIdx < secondPromotionCardIdx){
						if(usePromotionCard && !isFirstPromotionCardUsed){
							productGridTemplate += $firstPromotionCard.html();
						}
						if(useSecondPromotionCard && !isSecondPromotionCardUsed){
							productGridTemplate += $secondPromotionCard.html();
						}
					}else{
						if(useSecondPromotionCard && !isSecondPromotionCardUsed){
							productGridTemplate += $secondPromotionCard.html();
						}
						if(usePromotionCard && !isFirstPromotionCardUsed){
							productGridTemplate += $firstPromotionCard.html();
						}
					}
				}
				if(loadPageCount === 1){
					$(".js-pfv2-content-wrap").html(productGridTemplate);
				} else {
					$(".js-pfv2-content-wrap").append(productGridTemplate);
				}
			} else {
				if(loadPageCount === 1){
					buildNoResult();
				}
			}

			if(isNotNull(jsonData.common.totalRecord)){
				if(Number(jsonData.common.toRecord) < Number(jsonData.common.totalRecord)){
					$viewMoreArea.show();
					$(".pd03-product-finder__filters-list").removeClass("pd03-product-finder__filters--bottom");
				} else {
					$viewMoreArea.hide();
					$(".pd03-product-finder__filters-list").addClass("pd03-product-finder__filters--bottom");
				}
			}else{
				$viewMoreArea.hide();
				$(".pd03-product-finder__filters-list").addClass("pd03-product-finder__filters--bottom");
			}
		};

		var buildNoResult = function(){
			var productGridTemplate = `
			<div class="pd03-product-finder__no-results js-pfv2-noresult">
				<svg class="icon" focusable="false" aria-hidden="true">
					<use xlink:href="#emoticon-sorry-regular" href="#emoticon-sorry-regular"></use>
				</svg>
				<p class="pd03-product-finder__no-results-text">${Granite.I18n.get("Sorry, no results were found.")}</p>
			</div>
			`;

			$(".js-pfv2-content-wrap").html(productGridTemplate);
			$viewMoreArea.hide();
		};

		/**
		 * zip code 검색 결과 없을 경우에 html 생성
		 */
		var buildNoZipCode = function() {
			var productGridTemplate = `
			<div class="pd03-product-finder__no-results js-pfv2-noresult">
				<svg class="icon" focusable="false" aria-hidden="true">
					<use xlink:href="#emoticon-sorry-regular" href="#emoticon-sorry-regular"></use>
				</svg>
				<p class="pd03-product-finder__no-results-text">
					We’re sorry, there are no matching products available for delivery<br> to the selected ZIP code. Please enter another ZIP code.
				</p>
				<div class="pd03-product-finder__no-results-cta">
					<button class="cta cta--outlined cta--black">
						Reset zip code
					</button>
					<button class="cta cta--contained cta--black">
						Explore more products
					</button>
				</div>
			</div>
			`;

			$(".js-pfv2-content-wrap").html(productGridTemplate);
			$viewMoreArea.hide();
		};

		var getChangeUrl = function(filterInfoList){
			var pathname = window.location.pathname;
			var urlChangePath = "";

			var totalFilterParam = "";

			var cidParamInfo = "";
			if(isNotNull($('#cid').val())){
				cidParamInfo = $('#cid').val();
			}

			// var addUrlParam = false;// filter 추가 여부
			if(filterInfoList != null && filterInfoList.length > 0){
				// 현재 체크된 필터 정보 리스트
				for(var idx=0; idx<filterInfoList.length; idx++){
					var searchCode = filterInfoList[idx].filterCode,
					filterRegName = filterInfoList[idx].filterRegName;
					if(isDefaultFilter && arrayContains(defaultFilterCodeList, searchCode)){
						//default filter 는 url 파라미터에 추가하지 않는다.
					}else {
						if(searchCode != null && filterRegName != null){
							// addUrlParam = true;

							var tempParamArr = totalFilterParam.split("+");

							if(tempParamArr.length === 1 && tempParamArr[0] === ""){
								totalFilterParam = "?" + filterRegName;
							}else{
								if(tempParamArr.length < 3){
									totalFilterParam += "+" + filterRegName;
								}else{
									totalFilterParam += "+" + searchCode;
								}
							}
						}
					}
				}
				urlChangePath = pathname + totalFilterParam;
				if(totalFilterParam !== '' && cidParamInfo !== ""){
					urlChangePath += "&" + cidParamInfo;
				} else if(cidParamInfo !== ""){
					urlChangePath += "?" + cidParamInfo;
				}
			}else{
				// addUrlParam = true;
				urlChangePath = pathname;
				if(cidParamInfo !== ""){
					urlChangePath += "?" + cidParamInfo;
				}
			}
			return urlChangePath;
		};

		/**
		 * Url Parameter 값을 이용하여 header 를 선택하여 보여줌
		 */
		var setHeader = function(){
			var seletedFilterCode;

			var urlParameter = window.location.search;
			if(urlParameter != ""){
				urlParameter = urlParameter.substring(1, urlParameter.length).replace('wcmmode=disabled&', '');
			}
			var useDefaultFilter = false;
			if(defaultFilterObjList.length > 0){
				seletedFilterCode = defaultFilterObjList[0].filterRegName;
				if($('#checkbox-series'+defaultFilterObjList[0].filterCode).prop("checked")){
					useDefaultFilter = true;
				}
			}

			if(!useDefaultFilter){
				seletedFilterCode = $.trim(urlParameter).split("+")[0];
			}

			var carouselList = $('section.header-carousel'),
			defaultCarousel = undefined,
			matchCarousel = undefined;

			if(isEditMode != 'true'){
				if(carouselList.length) {
					carouselList.each(function(){
						carousel = $(this);
						if(carousel.attr('data-filter-id') == seletedFilterCode){
							if (matchCarousel == undefined) {
								matchCarousel = carousel;
							}
						}
						if(carousel.attr('data-header') === "default"){
							defaultCarousel = carousel;
						}
					});

				}

				carouselList.hide();
				if(matchCarousel != undefined) {
					matchCarousel.show();
				} else {
					if(defaultCarousel == undefined) {
						// if(defaultHeader != undefined) defaultHeader.hide();
						var lastCarousel = carouselList.last();
						lastCarousel.show();
					} else {
						defaultCarousel.show();
					}
				}
			}
		};
		/** 
		 * Compare 모델, 뷰 삭제
		 */
		var deleteCompareView = function(compareId){
			if(isNotNull(compareId)){
				if(pfCompareModelList.length > 0){
					for(var cmi = 0; cmi < pfCompareModelList.length; cmi++){
						if(pfCompareModelList[cmi].modelCode === compareId){

							var $this_addedCompareCTA = $('.js-pfv2-compare-cta[data-addedmodelcode="'+pfCompareModelList[cmi].modelCode+'"]');
							$this_addedCompareCTA.find('svg').html('<use xlink:href="#compare-bold" href="#compare-bold"></use>');
							$this_addedCompareCTA.removeClass("cta--done").removeAttr('data-addedmodelcode');
							
							pfCompareModelList.splice(cmi,1);
							break;
						}
					}
				}
				if(pfCompareModelList.length == 0){
					pfCompareCategorySubTypeCode = "";
				}
				window.sg.components.pd03ProductFinder.comparebarSlotClose(compareId);
			}
		}
		/**
		 * 'filter' / 'sort' / 'view more' event listener
		 */
		var filteringClickListener = function(){
			/* filter click event :: S */
			var $filterInputEl = $filterListWrap.find('.pd03-product-finder__filters-list-list-items .checkbox-radio input');

			$filterInputEl.on("change.finder", function(e){
				goFilteringFn("filter");
			});
			$(window).on("filterHeaderUpdate", function (e) {
				goFilteringFn("filter");
			});
			/* filter click event :: E */

			/* hashtag chip click event :: S */
			$hashtagChip.on("click.finder", function(){
				var chipTarget = $(this);
				/* 칩 클릭시 다른 선택된 칩 해제  :: S */
				$('.chip__action--light-selected').each(function(){
					var preSelected = $(this);
					if($.trim(preSelected.text()) !== $.trim(chipTarget.text())){
						preSelected.removeClass('chip__action--light-selected');
					}
				});
				/* 칩 클릭시 다른 선택된 칩 해제  :: E */
				if(isNotNull(chipTarget.data("chipvalue"))){
					var searchCodeArr = chipTarget.data("chipvalue").split(",");

					var chipFilterObjArr = [];
					for(var sci in searchCodeArr){
						var searchCode = searchCodeArr[sci];
						if(!chipTarget.hasClass("chip__action--light-selected")){
							var chipFilterObj = fullNavGroupsSearch(searchCode);
							if(isNotNull(chipFilterObj.filterCode)){
								chipFilterObjArr.push(fullNavGroupsSearch(searchCode));
							}
						} else {
							var targetFilterId = "#checkbox-series"+searchCode;
							if(isNotNull($(targetFilterId))){
								$(targetFilterId).prop("checked", false);
							}
						}
					}
					if(!chipTarget.hasClass("chip__action--light-selected")){
						goFilteringFn("hashchip", chipFilterObjArr);
					} else {
						goFilteringFn("filter");
					}
				}

			});
			/* hashtag chip click event :: E */

			/* sort click event :: S */
			var $sortByDropDownOption = $sortByWrap.find('.menu__list-option');
			$sortByDropDownOption.on("click.finder", function(){
				var clickedSortText = $.trim($(this).find('.menu__list-option-text').text());
				var clickedSortId = getSortId(clickedSortText);
				$(".js-pfv2-sortby-wrap .menu__select-field").attr("data-aria-label", Granite.I18n.get("click to sort results"));
				$(".js-pfv2-sortby-wrap .menu__select-field").attr("aria-label", Granite.I18n.get("click to sort results"));
				if( isNotNull(clickedSortId) && clickedSortId !== pfSearchApiParam.sort) {
					pfSearchApiParam.sort = clickedSortId;
					goFilteringFn("sort");
				}
			});

			$sortBySelect.on("change.finder", function(){
				var clickedSortId = $(this).val();
				if( isNotNull(clickedSortId) && clickedSortId !== pfSearchApiParam.sort) {
					pfSearchApiParam.sort = clickedSortId;
					goFilteringFn("sort");
				}
			});
			/* sort click event :: E */

			$viewMoreBtn.on("click.finder", function(e){
				goFilteringFn("view-more");
			});

			$resetFilterBtn.on("click.finder", function(e){
				goFilteringFn("reset-filter");
				$hashtagChip.removeClass(hashChipSelectClass);
			});

			$mobileResetBtn.on("click.finder", function(e){
				goFilteringFn("reset-filter");
				$hashtagChip.removeClass(hashChipSelectClass);
			});

			$mobileViewResultBtn.on("click.finder", function(e){
				window.sg.components.pd03ProductFinder.mobileFilterClose();
				utils.visibleScroll();
			});
			if(useCompareButton){
				var initPfCompareCategorySubTypeCode = function(){
					if(pfCompareModelList.length == 0){
						pfCompareCategorySubTypeCode = "";
					}
				}
				//compare item 삭제 버튼 클릭 이벤트
				$compareItemDelete.on("click.finder", function(e){
					var $compareItem = $(this).closest('.pd03-product-finder__compare-bar-item--active');
					if($compareItem.hasClass("pd03-product-finder__compare-bar-item--active")){
						deleteCompareView($compareItem.attr("data-id"));
					}
				});

				$compareClearCta.on("click.finder", function(e){
					pfCompareModelList = [];
					initPfCompareCategorySubTypeCode();
				});

				$compareCta.on("click.finder", function(e){
					window.sg.components.pf.compareLayer.layerGrid();
					window.sg.components.comparePopup.openPopup($(".compare-popup")[0], $(this));
				});

			}

			//[US-ZipCode] zipcode 입력 이벤트
			if(useZipCode){
				var entZipCode = false;

				$zipCodeDelete.on("click", function() {
					$zipCodeInput.val("");
					$.cookies.set("HA-Deeplink-Zipcode", '', $.cookies.getDefaultOption());
				});

				$zipCodeInput.on("keyup",function(e){
					zipCodeText = $(this).val();
					$zipCodeInput.val(zipCodeText);

					if($(this).val().length == 0){
						$.cookies.set("HA-Deeplink-Zipcode", '', $.cookies.getDefaultOption());
						zipCodeText = '';
						if(!entZipCode){
							$zipCodePlaceHolder.show();
							entZipCode = true;
							goFilteringFn();
						}
					} else {
						$zipCodePlaceHolder.hide();
						if($(this).val().length > 4){
							if(!entZipCode){
								$.cookies.set("HA-Deeplink-Zipcode", $(this).val(), $.cookies.getDefaultOption());
								entZipCode = true;
								goFilteringFn();
							}
						} else {
							entZipCode = false;
						}
					}
				});
				$zipCodeInput.on("mouseup",function(e){
					if($(this).val().length == 0){
						$zipCodePlaceHolder.show();
					} else {
						$zipCodePlaceHolder.hide();
					}
				});
				//Eligible for 3-Day Delivery 이벤트
				if(isThreeDayEligibility){
					$threeDayEligibilityInput.on("change.finder", function(e){
						goFilteringFn();
					});
				}
			}
			
			$epromoterBtn.on("click.finder", function(e){
				window.sprChat('open');
			});
			
		};

		var addToCartCallBackError = function(e){
			var errorText = "";
			if (e.responseJSON != null) {
				if (isNotNull(e.responseJSON.message)) {
					errorText = e.responseJSON.message;
				}
			}
			confirmPopup(errorText,"error");
		}
		
		var productCardEventListener = function(){
			// image reinit
			window.sg.common.image.initAll();
			//Wtb Reinit
			window.smg.wtb.common.reInit();
			//Wishlist icon Reinit
			window.sg.components.wishlistIcon.reInit();

			// $('.js-pfv2-fmyChip-is-disabled').parent().addClass('is-disabled');
			// $('.js-pfv2-fmyChip-is-disabled').removeClass('js-pfv2-fmyChip-is-disabled').find('input').prop('disabled', true);

			/* fmychip click event :: S */
			var $fmyChipEl = $('.js-pfv2-product-fmychip');
			$fmyChipEl.off("click.finder");
			$fmyChipEl.on("click.finder", function(e){
				var $optionInputEl = $(this);
				var $targetContentEl = $optionInputEl.closest('.js-pfv2-product-card');

				var productIdx = $targetContentEl.data("productidx");

				var modelIdx =  $optionInputEl.data("modeli");
				var chipType = $optionInputEl.data("chiptype");
				// compare button 선택 처리
				if($targetContentEl.find('.js-pfv2-compare-cta').hasClass('cta--done')){
					for(var cmi in pfCompareModelList){
						if(pfCompareModelList[cmi].firstModelCode === productListData[productIdx].modelList[0].modelCode){
							productListData[productIdx].addedCompareModelCode = pfCompareModelList[cmi].modelCode;
							break;
						}
					}
					productListData[productIdx].addedCompareYN = "Y";
				} else {
					productListData[productIdx].addedCompareYN = "N";
				}

				setTimeout(function(){
					if(isNotNull(modelIdx)){
						productListData[productIdx].frontModelIdx = modelIdx;

						var proObj = getProductModelInfo(productListData[productIdx], modelIdx);

						// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건 : [S]
						if ( isEppSite && checkEppOffline() ) {		
							let arrInventoryInfo = [];
							if ( proObj.modelList[modelIdx].shopSKU != null ) {
								offlineStockAjax([proObj.modelList[modelIdx].shopSKU]).done(function(data){
									arrInventoryInfo = data.inventory_info;
								}).fail(function(data, textStatus, errorThrown){
				                    console.error(data.statusText);
				                });
							}
							
							if ( arrInventoryInfo != null && arrInventoryInfo.length > 0 ){
								let ivtInfo = arrInventoryInfo.find(ivt => ivt.sku === proObj.modelList[modelIdx].shopSKU);
								if ( ivtInfo != null ){
									proObj.modelList[modelIdx].offlineStockCount = ivtInfo.quantity_available;
								}
							}
						}
						// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건 : [E]
						
						// $targetContentEl.find('.option-selector-v2__wrap').each(function(idx){
						// 	var tmpType = productListData[productIdx].optionTypeList[idx];
						// 	var styleAttr = $(this).find('.option-selector-v2__swiper-wrapper').attr("style");
						// 	productListData[productIdx].viewOptionObj[tmpType].styleAttr = styleAttr;
						// });


						$targetContentEl.html(buildProductCardV2(proObj));

						productCardEventListener();

						var modelCode = productListData[productIdx].modelList[modelIdx].modelCode;
						changeAddedWishlist($targetContentEl, modelCode);

						// product card 를 새로 그려줬으므로 이벤트 새로 지정
						var reInitProductCardEl = $targetContentEl.find(".pd03-product-card")[0];
						window.sg.components.pd03ProductCard.reInitCard(reInitProductCardEl);
					}
				}, 300);
			});
			/* fmychip click event :: E */

			/* CTA click event :: S */
			var isBuyNowClicked = false;
			var $ctaBtn = $('.js-pfv2-buy-now');
			$ctaBtn.off("click.finder");
			$ctaBtn.on("click.finder", function(e){
				var $targetBtn = $(this);
				var modelCode = "";
				var configInfo = "";
				var configuratorURL = "";

				if(isGPv2){
					// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건
					if ( checkEppOffline() && $targetBtn.hasClass("js-store-popup") ){
						confirmPopup(Granite.I18n.get("This product is available to buy in store. Please contact store representative. Thank You!"),"error");
						return false;
					}					
					configInfo = $targetBtn.attr("data-config_info");
					modelCode = $targetBtn.attr("data-modelcode");
					var addToCartFlag = $targetBtn.attr("data-cart");
					var shopSkuCode = $targetBtn.attr("data-sku-code");

					if(addToCartFlag === "true"){
						var addToCartUrl = cartUrl + "?addItem[]=" + shopSkuCode + ",1";
						if(eppIsFlash || eppIsRefurbish){
							addToCartUrl = cartUrl + "?flash_skus=" + shopSkuCode;
						}
						window.location.href = addToCartUrl;
					}else{
						if(configInfo !== ""){
							if(configInfo.indexOf("?modelCode") < 0){
								configuratorURL = configInfo + "?modelCode=" + modelCode;
							} else {
								configuratorURL = configInfo;
							}
							window.location.href = configuratorURL;
						} else {
							const $targetBtn = $(this);
							const attrNames = $targetBtn[0].getAttributeNames();
							const anchor = document.createElement("a");
							for(const name of attrNames) {
								const attr = $targetBtn[0].getAttribute(name);
								anchor.setAttribute(name, attr);
							}
							anchor.click();
						}
					}
				} else {
					if(isBuyNowClicked === true){
						return;
					}

					configInfo = $(this).attr("data-config_info");
					modelCode = $(this).attr("data-modelcode");
					var addToCartFlag = $targetBtn.attr("data-cart");

					var addCartTimeout = 10000;
					if(siteCode === "vn"){
						addCartTimeout = 20000;
					}

					if(configInfo !== ""){
						if(configInfo.indexOf("?modelCode") < 0){
							configuratorURL = configInfo + "?modelCode=" + modelCode;
						} else {
							configuratorURL = configInfo;
						}
						window.location.href = configuratorURL;
					}else if(addToCartFlag === "true"){
						var linkInfo = $(this).attr("data-link_info");
						//new-hybris
						if((cartUrl.indexOf("http://") > -1 || cartUrl.indexOf("https://") > -1) && !isEppSite){
							linkInfo = cartUrl;
						}
						// addToCart POST 호출
						var postParam = {
							'products' : []
						};

						//new-hybris
						if(isNewHybris && (siteCode ==='uk' || siteCode ==='cn') ){ //20210402 SEBN old hybris -- 20210408 id/ph //uk
							addToCartNewHybris(modelCode, linkInfo)

						}else if(siteCode==="ar" || siteCode==="br"){
							var storeurl= storeDomain + "/" + siteCode + "/getServicesProduct?productCode="+modelCode;
							window.location.href = storeurl;

						}else if(siteCode==="py"){
							var storeurl = storeDomain + "/getServicesProduct?productCode="+modelCode;
							window.location.href = storeurl;

						} else if(addToCartPostYn == "Y"){// addToCart POST 호출 addToCartPostYn meta 정보로 구분 차후 이전 소스제거
							var realSiteCode = siteCode;
							if(isNotNull(shopSiteCd)){
								realSiteCode = shopSiteCd;
							}
							if(isEppSite){
								realSiteCode = eppCompanyCode;
							}
							if(isNewHybris){
								apiUrl =  storeWebDomain + "/" + realSiteCode + "/servicesv2/addToCart";
							}else{
								apiUrl =  storeDomain + "/" + realSiteCode + "/servicesv2/addToCart";
							}
							postParam['products'].push({
											'productCode' : modelCode,
											'quantity' : 1,
										});
							$.ajax({
								url: apiUrl,
								type: "POST",
								data: JSON.stringify (postParam),
								contentType : "application/json",
								dataType : "json",
								xhrFields: { withCredentials: true },
								crossDomain : true,
								timeout : addCartTimeout,
								success: function (data) {
									if(data){
										if(data.resultCode === "0000"){
											isBuyNowClicked = true;
											window.location.href = linkInfo;
										}else{
											confirmPopup(data.resultMessage,"error");
										}
									}else{
										confirmPopup("","error");
									}
								},error : function(e){
									addToCartCallBackError(e);
								}
							});
						// addToCart POST 호출 addToCartPostYn meta 정보로 구분 차후 이전 소스제거 STR
						} else if(hybrisApiJson==="Y"){
							let siteCodeWithEpp = isEppSite ? eppCompanyCode : siteCode;
							var apiUrl =  storeDomain + "/" + siteCodeWithEpp + "/ng/p4v1/addCart";
							var sendData = {"productCode" : modelCode, "quantity" : 1};
							//new-hybris
							if(isNewHybris && siteCode !='uk' && siteCode !== 'cn'){
								apiUrl =  storeWebDomain + "/" + siteCodeWithEpp + "/ng/p4v1/addToCart";
								sendData = "products[0].productCode="+modelCode+"&products[0].quantity=1";
							}
							$.ajax({
								url: apiUrl,
								type: "GET",
								data: sendData,
								contentType : "application/x-www-form-urlencoded",
								dataType : "json",
								xhrFields: { withCredentials: true },
								crossDomain : true,
								timeout : addCartTimeout,
								success: function (data) {
									if(data){
										if(data.resultCode === "0000"){
											isBuyNowClicked = true;
											window.location.href = linkInfo;
										}else{
											confirmPopup(data.resultMessage,"error");
										}
									}else{
										confirmPopup("","error");
									}
								},error : function(e){
									addToCartCallBackError(e);
								}
							});
						}else{
							var realSiteCode = siteCode;
							if(isNotNull(shopSiteCd)){
								realSiteCode = shopSiteCd;
							}
							if(isEppSite){
								realSiteCode = eppCompanyCode;
							}
							var apiUrl =  storeDomain + "/" + realSiteCode + "/ng/p4v1/addCart";
							var sendData = {"productCode" : modelCode, "quantity" : 1};
							//new-hybris
							if(isNewHybris && siteCode !='uk' && siteCode !='cn'){
								apiUrl =  storeWebDomain + "/" + realSiteCode + "/ng/p4v1/addToCart";
								sendData = "products[0].productCode="+modelCode+"&products[0].quantity=1";
							}
							$.ajax({
								url : apiUrl,
								type : "GET",
								data: sendData,
								dataType : "jsonp",
								jsonp : "callback",
								timeout : addCartTimeout,
								success : function (data) {
									if(data){
										if(data.resultCode === "0000"){
											isBuyNowClicked = true;
											window.location.href = linkInfo;
										}else{
											confirmPopup(data.resultMessage,"error");
										}
									}else{
										confirmPopup("","error");
									}
								},error : function(e){
									addToCartCallBackError(e);
								}
							});
						}
						// addToCart POST 호출 addToCartPostYn meta 정보로 구분 차후 이전 소스제거 END
					} else {
						try {
							const $targetBtn = $(this);
							const attrNames = $targetBtn[0].getAttributeNames();
							const anchor = document.createElement("a");
							for(const name of attrNames) {
								const attr = $targetBtn[0].getAttribute(name);
								anchor.setAttribute(name, attr);
							}
							anchor.click();
						} catch(e) {
							console.error(e);
						}
					}
				}

			});

			var $learnMoreBtn = $(".js-pfv2-learn-more");
			$learnMoreBtn.off("click.finder");
			$learnMoreBtn.on("click.finder", function(e) {
				const $targetBtn = $(this);
				const attrNames = $targetBtn[0].getAttributeNames();
				const anchor = document.createElement("a");
				for(const name of attrNames) {
					const attr = $targetBtn[0].getAttribute(name);
					anchor.setAttribute(name, attr);
				}
				anchor.click();
			});

			const $anchorBtn = $(".js-pfv2-anchor-btn");
			$anchorBtn.off("click.finder");
			$anchorBtn.on("click.finder", function(e) {
				const $targetBtn = $(this);
				const attrNames = $targetBtn[0].getAttributeNames();
				const anchor = document.createElement("a");
				for(const name of attrNames) {
					const attr = $targetBtn[0].getAttribute(name);
					anchor.setAttribute(name, attr);
				}
				anchor.click();
			});

			// calculator click event
			var $calculateCta = $('.js-pfv2-calculate-popup-open');
			$calculateCta.off("click.finder");
			$calculateCta.on("click.finder", function(e){
				var targetCta = $(this);
				var calType = targetCta.data("type");
				var targetHref = targetCta.attr("data-link_info");
				//new-hybris
				if(isNewHybris || siteCode === "my"){
					window.sg.components.financePopup.showEmiPopup(targetCta.attr("data-modelcode"), targetCta);
				} else if(targetCta.hasClass('eip-ee-cal')){
					installmentPlansData.getPaymentData( $(this).attr("data-price"), $(this)[0], $(this).attr("data-modelcode"));
				} else if(isNotNull($emiPopupEl)){
						var $iframeEl = $emiPopupEl.find('iframe');

						var $emiPopupTitleEl = $emiPopupEl.find('.layer-popup__title');
						var popupTitle = "";
						if(calType==="emi"){
							popupTitle = Granite.I18n.get("EMIs (Pay in Easy Monthly installments)");
						}else if(calType==="install"){
							if(siteCode=="id"){
								popupTitle = Granite.I18n.get("Program CICILAN 0%");
							}else{
								popupTitle = Granite.I18n.get("Installment Calculate");
							}
						}
						$emiPopupTitleEl.html(popupTitle);
						$iframeEl.attr("src", targetHref);

						window.sg.components.eipPopup.showPopup();
				}
			});

			if(useCompareButton){
				var addToCompareCta = $('.js-pfv2-compare-cta');
				addToCompareCta.off("click.finder");
				addToCompareCta.on("click.finder", function(e){
					// compare snack-bar open되 있으면 미처리
					if (document.querySelector('.pd03-product-finder__snack-bar').classList.contains('show')) {
						return;
					}
					var $thisCTA = $(this);
					var modelInfoObj = {};
					var selectedModelCode = $thisCTA.data("modelcode");
					const eppOriginModelCode = (eppIsFlash || eppIsRefurbish) ? $thisCTA.data("originmodelcode") : '';
					// HA > Washers and Dryers or vacuum cleaners or Cooking Appliance 경우 categorySubTypeCode 비교
					if(TYPECODE_HA_WAD === categoryTypeCode || TYPECODE_HA_VAC === categoryTypeCode || TYPECODE_HA_CA === categoryTypeCode){
						var categorySubTypeCode = $thisCTA.data("categorysubtypecode");

						if(pfCompareCategorySubTypeCode){
							if(pfCompareCategorySubTypeCode != categorySubTypeCode){
								window.sg.components.pd03ProductFinder.snackBarOpen($thisCTA);
								return;
							}
						}else{
							pfCompareCategorySubTypeCode = categorySubTypeCode;
						}
					}

					var this_prd_idx = Number($(this).closest(".js-pfv2-product-card").attr("data-productidx"));

					var this_prd = productListData[this_prd_idx];
					var this_firstModelCode = '';
					if(this_prd.modelList.length > 0 && isNotNull(this_prd.modelList[0].modelCode)){
						this_firstModelCode = this_prd.modelList[0].modelCode;
					}

					var compareMaxCount = 3;
					if(window.sg.common.utils.getCurrentDevice() === 'mobile'){
						compareMaxCount = 2;
					}

					if(pfCompareModelList.length > compareMaxCount){
						pfCompareModelList = pfCompareModelList.slice(compareMaxCount);
					}

					var isAddedProduct = false;
					for(var mi in pfCompareModelList){
						if( pfCompareModelList[mi].firstModelCode == this_firstModelCode){
							isAddedProduct = true;
							break;
						}
					}

					if(!isAddedProduct){
						if(pfCompareModelList.length < compareMaxCount){

							modelInfoObj.modelCode = selectedModelCode;
							modelInfoObj.firstModelCode = this_firstModelCode;
							if(eppIsFlash || eppIsRefurbish){
								modelInfoObj.originModelCode = eppOriginModelCode;
							}

							var compareDesc = "";
							var $thisPriceEl = $thisCTA.closest(".pd03-product-card__product-content");
							var $thisCoVatCurrentPriceEl = $thisPriceEl.find(".pd03-product-card__price-excluding-vat");
							var $thisCurrentPriceEl = $thisPriceEl.find(".pd03-product-card__price-main");
							var $thisCurrentPriceElOther = $thisPriceEl.find(".pd03-product-card__price-total");// de 예외처리
							var $thisSuggestedPriceEl = $thisPriceEl.find(".pd03-product-card__price-suggested");
							var coVatFlag = false;
							var coVatObject = {};
							var thumbUrl = isNotNull($thisCTA.data("img-src"))?$thisCTA.data("img-src").replace(/\?\$\d{3}_\d{3}_[a-zA-Z]+\$$/, '') : "";

							if( siteCode === "us"){
								compareDesc = $thisSuggestedPriceEl.attr("data-de-originpricetxt");
							} else if(siteCode === "co" && $thisCoVatCurrentPriceEl.length > 0){
								coVatFlag = true;
								var $thisCoVatSpecial = $thisPriceEl.find(".pd03-product-card__price-special");
								var $thisCoVatRrp = $thisPriceEl.find(".pd03-product-card__price-rrp");
								
								coVatObject = {
										"id":$thisCTA.data("modelcode"),
										"title":$thisCTA.data("displayname"),
										"samcol-price-vat":$thisCoVatCurrentPriceEl.attr("data-pricetext"),
										"samcol-price-rrp":$thisCoVatRrp.attr("data-pricetext"),
										"thumbDesktop":pfImgDomain(thumbUrl, "compare-desktop"),
										"thumbMobile":pfImgDomain(thumbUrl, "compare-mobile"),
										"thumbAlt":$thisCTA.data("img-alt")
									}
								if($thisCoVatSpecial.length > 0){
									coVatObject["samcol-price-special"] = $thisCoVatSpecial.attr("data-pricetext");
								}
							} else if($thisPriceEl.hasClass("use-tradein-price")){
								compareDesc = $thisCurrentPriceEl.text();
							} else if(isNotNull($thisCurrentPriceEl) && $thisCurrentPriceEl.length > 0){
								compareDesc = $thisCurrentPriceEl.attr("data-pricetext");
							} else if(isNotNull($thisCurrentPriceElOther) && $thisCurrentPriceElOther.length > 0){
								compareDesc = $thisCurrentPriceElOther.attr("data-pricetext");
							}
							
							if(coVatFlag){
								window.sg.components.pd03ProductFinder.comparebarSlotOpen(
									coVatObject,
									$thisCTA[0]
								);
							}else{
								window.sg.components.pd03ProductFinder.comparebarSlotOpen(
									{
										"id":$thisCTA.data("modelcode"),
										"title":$thisCTA.data("displayname"),
										"description":compareDesc,
										"thumbDesktop":pfImgDomain(thumbUrl, "compare-desktop"),
										"thumbMobile":pfImgDomain(thumbUrl, "compare-mobile"),
										"thumbAlt":$thisCTA.data("img-alt")
									},
									$thisCTA[0]
								);
							}
							if(siteCode === "us" && $thisCurrentPriceEl.attr("data-use-epp-discount") == "true"){
								var model_list = [];
								for(var moidx in this_prd.modelList){
									var model_obj = {};
									var tmp_model = this_prd.modelList[moidx];
									model_obj.modelCode = tmp_model.modelCode;
									if(isNotNull(tmp_model.prdSavePriceTI)){
										model_obj.prdSavePriceTI = tmp_model.prdSavePriceTI;
									}
									if(isNotNull(tmp_model.prdSavePriceInf)){
										model_obj.prdSavePriceInf = tmp_model.prdSavePriceInf;
									}
									if(isNotNull(tmp_model.tradeDiscountPrice)){
										model_obj.tradeDiscountPrice = tmp_model.tradeDiscountPrice;
									}
									if(isNotNull(tmp_model.prdPriceInf)){
										model_obj.prdPriceInf = tmp_model.prdPriceInf;
									}
									model_list.push(model_obj);
								}
								modelInfoObj.modelList = model_list;
							}

							pfCompareModelList.push(modelInfoObj);

						} else {
							confirmPopup(Granite.I18n.get("You have {0} products ready to compare.",[compareMaxCount]),"error");
						}
					}else{
						// 제거
						deleteCompareView(selectedModelCode);
					}
				});
			}

			var checkSpecDetails = function(productidx) {
				// 모델이 있고 상세 스펙이 없는 경우에만 false
				// 나머지는 전부 true
				const selectedProduct = productListData[productidx];
				if(isNotNull(selectedProduct.modelList)) {
					for(const model of selectedProduct.modelList) {
						if(typeof model['specDetail'] !== 'undefined') {
							// 하나라도 발견했다는건 한 번 호출을 했다는 의미
							return true;
						}
					}
					return false;
				} else {
					return true;
				}
			}

			var checkOriginImages = function(productidx) {
				const selectedProduct = productListData[productidx];
				if(isNotNull(selectedProduct.modelList)) {
					for(const model of selectedProduct.modelList) {
						if(typeof model['originImage'] !== 'undefined') {
							// 하나라도 발견했다는건 한 번 호출을 했다는 의미
							return true;
						}
					}
					return false;
				} else {
					return true;
				}
				// if(isNotNull(model['originImage'])) {
				// 	return true;
				// }
				// return false;
			}

			var openQuickviewPopup = function(event) {
				// window.sg.components.pd03ProductFinder.activePopup(event.target);
				window.sg.components.pd03ProductQuickview.openQuickviewPopup(event.target);
			}

			var callOriginalImages = function(productidx, event) {
				// 퀵뷰 이벤트 호출 밑작업
				if(checkOriginImages(productidx)) {
					openQuickviewPopup(event);
					return;
				}
				const models = pfQuickviewProduct.modelList;
				const modelCodes = isNotNull(models)? models.map(item => item.modelCode).join(",") : "";
				let quickViewParam = {
					"modelList": modelCodes,
					"siteCode": siteCode,
					"saleSkuYN": "N",
					"onlyRequestSkuYN": "Y",
					"vd3PACardYN": "Y",
					"commonCodeYN": "N"
				};
				if(isEppSite){
					quickViewParam['companyCode'] = eppCompanyCode;
					//[24.02.27][EPP][CN][O2O] : o2oId 파라미터 추가
					if(window.sg.epp.common.userStoreId != ""){
						quickViewParam['o2oId'] = window.sg.epp.common.userStoreId;
					}
				}
				$.ajax({
					url: quickViewImageUrl,
					type: 'GET',
					data : quickViewParam,
					dataType : 'json',
					cache : true,
					timeout : 20000,
					success: function(data) {
						// console.log(data);
						const response = data.response;
						let resultData = null;
						// let imageData = null;
						if(isNotNull(response) && response.statusCode == 200) {
							resultData = response.resultData;
						}
						const productList = resultData?.productList;
						const modelList = typeof productList !== 'undefined' && productList.length > 0? productList[0].modelList : [];
						pfQuickviewProduct.modelList.forEach(model => {
							const modelCode = model.modelCode;
							const imageModel = isNotNull(modelList)? modelList.filter(item => item.modelCode === modelCode) : [];
							const largeImage = [];
							const largeImageAlt = [];
							if(imageModel.length > 0) {
								const galleryImageLarge = imageModel[0].galleryImageLarge;
								const galleryImageAlt = imageModel[0].galleryImageAlt;
								if(isNotNull(galleryImageLarge)) {
									galleryImageLarge.forEach((item, idx) => {
										if(idx < 6) {
											largeImage.push(item);
										}
									});
								}
								if(isNotNull(galleryImageAlt)) {
									galleryImageAlt.forEach((item, idx) => {
										if(idx < 6) {
											largeImageAlt.push(item);
										}
									});
								}
								if(largeImageAlt.length < largeImage.length) {
									const targetNum = largeImage.length - largeImageAlt.length;
									for(let i = 0; i < targetNum; i++) {
										largeImageAlt.push('');
									}
								}
							}
							const thumbUrl = model.thumbUrl?.replace(/\?\$\d{3}_\d{3}_[a-zA-Z]+\$$/, '');
							const thumbUrlAlt = model.thumbUrlAlt;

							const listImage = typeof model.galleryImage !== 'undefined' && model.galleryImage !== null? model.galleryImage : [thumbUrl];
							const listImageAlt = typeof model.galleryImageAlt !== 'undefined' && model.galleryImageAlt !== null? model.galleryImageAlt : [thumbUrlAlt];

							const imageArr = largeImage.length > 0? largeImage : listImage;
							const imageAltArr = largeImage.length > 0? largeImageAlt : listImageAlt;
							model.originImage = imageArr;
							model.originImageAlt = imageAltArr;
						});
						// console.log(pfQuickviewProduct);
						openQuickviewPopup(event);
					}
				});
			}

			var quickViewEvent = function(obj, e) {
				var $thisPF = $(obj).closest('.js-pfv2-product-card');
				var productidx = $thisPF.data("productidx");
				pfQuickviewProduct = productListData[productidx];

				if (isNotNull(pfQuickviewProduct) === true) {
					const models = pfQuickviewProduct.modelList;
					if(isNotNull(models) && !checkSpecDetails(productidx)) {
						// model list가 null이 아니고 spec detail을  조회한 적이 없다면, 일단 api를 한 번 거친다.
						const modelCodes = isNotNull(models)? ((eppIsFlash || eppIsRefurbish) ? models.map(item => item.originModelCode).join(",") : models.map(item => item.modelCode).join(",")) : "";
						const pfSpecApiUrl = searchDomain+'/'+apiStageInfo+'/b2c/product/spec/detail/';
						$.ajax({
							url: pfSpecApiUrl,
							type: 'GET',
							data : {
								"modelList": modelCodes,
								"siteCode":siteCode
							},
							dataType : 'json',
							cache : true,
							timeout : 20000,
							success: function(data) {
								const response = data.response;
								if(isNotNull(response) && response.statusCode == 200) {
									const resultData = response.resultData;
									const specModels = resultData.modelList;
									pfQuickviewProduct.modelList.forEach(model => {
										const modelCode = model.modelCode;
										const specModel = specModels.filter(item => item.modelCode === modelCode);
										model['specDetail'] = specModel;
									});
								}
								callOriginalImages(productidx, e);

								// 임시
								// const model = models[pfQuickviewProduct.frontModelIdx];
								// model.originImage = model.galleryImage;
								// model.originImageAlt = model.galleryImageAlt;
								// openQuickviewPopup(e);
							},
							error: function(xhr) {
							}
						});
					} else if(isNotNull(models)) {
						callOriginalImages(productidx, e);
					} else {
						// 모델이 없으면 그냥 팝업을 띄운다.
						openQuickviewPopup(e);
					}
				}
			}

			var $quickviewBtn = $('.pd03-product-card__quickview_btn');
			//$quickviewBtn.off("mouseenter.finder");
			$quickviewBtn.off("click.finder");
			$quickviewBtn.on("click.finder", function(e) {
				quickViewEvent(this, e);
			});

		};

		var goFilteringFn = function(type, filterList){

			//parameter에 filter 정보 리셋
			pfSearchApiParam=
			{
				"type":categoryTypeCode,
				"siteCode":siteCode,
				"start":pfSearchApiParam.start,
				"num":pfSearchApiParam.num,
				"sort":pfSearchApiParam.sort,
				"onlyFilterInfoYN":"N",
				// "keySummaryYN":pfSearchApiParam.keySummaryYN,
				"keySummaryYN":'Y', // keySummaryYN Y로 고정
				"specHighlightYN":"Y"		// ## PFV2 : 신규 PF에서는 항상 포함해서 api 호출
			};
			if(isNotNull(shopSiteCd)){
				pfSearchApiParam['shopSiteCode'] = shopSiteCd;
			}

			if(isEppSite){
				pfSearchApiParam['companyCode'] = eppCompanyCode;
				pfSearchApiParam['pfType'] = pfType;
				if(eppIsFlash || eppIsRefurbish){
					pfSearchApiParam['offerId'] =  offerId;
				}
				if(eppIsUserGroupPricing){
					pfSearchApiParam['groupName'] = eppUserGroupName;
				}
				//[EPP] 23.01.17 o2o site filter 추가
				if ( window.sg.epp && window.sg.epp.common && window.sg.epp.common.isPosStore ){
					if(type === "reset-filter"){
						eppO2oParam = [];
					}
				}
				//[24.02.27][EPP][CN][O2O] : o2oId 파라미터 추가
				if(window.sg.epp.common.userStoreId != ""){
					pfSearchApiParam['o2oId'] = window.sg.epp.common.userStoreId;
				}
			}

			//[US-Zipcode] 페이지 로딩 시 쿠키에 있는 zipcode 셋팅
			if(useZipCode && isNotNull($.trim($zipCodeInput.val()))){
				pfSearchApiParam['zipCode'] = zipCodeText;
			}
			//Eligible for 3-Day Delivery  셋팅
			if(isThreeDayEligibility && $threeDayEligibilityInput.is(":checked")){
				pfSearchApiParam['threeDayEligibility'] = "Y";
			}
			if(type==="view-more"){

				loadPageCount++;

				//기존 설정된 값
				var currentStart = pfSearchApiParam.start;
				var currentNum = pfSearchApiParam.num;

				//바뀌어야하는 설정값
				var tobeStart = currentStart + currentNum;
				var tobeNum = 12;

				pfSearchApiParam.start = tobeStart;
				pfSearchApiParam.num = tobeNum;

			} else {
				loadPageCount = 1;

				pfSearchApiParam.start = 1;

				if(usePromotionCard){
					// ## PFV2 : num 값 조정
					pfSearchApiParam.num = 11;
					if (useSecondPromotionCard === true) {
						pfSearchApiParam.num = 10;
					}

					if(desktopCardLayout == "vertical"){
						if($firstPromotionCard.parent().data("cardwidth")==="Large"){
							pfSearchApiParam.num = 10;
							if(useSecondPromotionCard){
								pfSearchApiParam.num = 8;
							}
						}
					}
				} else {
					pfSearchApiParam.num = 12;
				}
			}

			var filterInfoList = [];
			if(!eppIsFlash && !eppIsRefurbish){
			if(type === "reset-filter"){
				filterInfoList = defaultFilterObjList;
			} else if( type==="hashchip"){
				filterInfoList = defaultFilterObjList;
				filterInfoList = filterInfoList.concat(filterList);
			} else {
				filterInfoList = getFilterCheckedList();
			}

			// ## PFV2 S : 필터가 있으면 promotion card 미표시, HighlightCard 표시안함
			isApplyFilter = (filterInfoList.length > 0) ? true : false;
			/*if (isApplyFilter === true) { // 2022.09.13 필터 사용시에도 프로모션 카드 보이도록 요청.
				pfSearchApiParam.num = 12;
			}*/
			// ## PFV2 E

			// 선택된 filter 정보 pfSearchApiParam 에 셋팅
			for(var filterObj in filterInfoList){
				setApiParamFilterData(filterInfoList[filterObj]);
			}
			}

			var changeUrl = "";
			if(type==="reset-filter" || type==="filter" || type==="hashchip"){
				changeUrl = getChangeUrl(filterInfoList);
			}

			$LoaderEl.css("width", "30%");
			$loaderContainer.show();

			// highligh 상품, 필터적용시 highlight 상품 정보 안받기
			if(isApplyFilter === false && highlightSku !== "" && (pfSearchApiParam.sort === "recommended" || pfSearchApiParam.sort === "onlineavailability") && type!=="view-more") {
				pfSearchApiParam[highlightParamName] = highlightSku;
			} else {
				pfSearchApiParam[highlightParamName] = "";
			}

			$.ajax({
				url: pfSearchApiUrl,
				type: 'GET',
				data : pfSearchApiParam,
				dataType : 'json',
				cache : true,
				timeout : 20000,
				success: function(data){
					if(changeUrl !== ""){
						if(typeof(history.pushState) == "function"){
							pageChangeCnt++;
							history.pushState( null , null , changeUrl );
						}else{
							location.href = changeUrl;
						}
					}
					if(data.response.statusCode === 200){
						$LoaderEl.css("width", "80%");
						
						if(!eppIsFlash && !eppIsRefurbish){
						$(window).trigger("navGroupsUpdate", [data.response.resultData['navGroups']]);
						buildFilter(data.response.resultData);
						}
						buildProductGrid(data.response.resultData);
						fnFilterAvailable();
						window.sg.components.pd03ProductFinder.reInit();

						$loaderContainer.hide();

						if(type=="view-more"){
							var addedFirstIdx = (loadPageCount-1) * 12 ;

							if($('.pd03-product-finder__box').length > addedFirstIdx){
								window.sg.components.pd03ProductFinder.setFirstFocus($('.pd03-product-finder__box')[addedFirstIdx]);
							}
						} else {
							setHeader();
							clearCompare();
						}
						changeAddedWishlist();
						window.sg.components.pd03ProductCard.reInit();
						window.sg.components.pd03ProductFinder.setHeaderFixFlag();
						window.sg.common.icon.update();

						productCardEventListener();

					}
				},
				error: function(){
					// $LoaderEl.hide();
				},
				complete: function (data) {
					if(type === "sort"){
						// 소트 번경 시 첫 번째 아이템으로 스크롤
						window.sg.components.pd03ProductFinder.scrollToFirstItem();
					}
				}
			});

		};

		/**
		 * [US] epp discount store 선택 혹은 exit store 할 경우 compare 내용 초기화 처리
		 * pfCompareModelList Clear, layer close, pfCompareCategorySubTypeCode Clear
		 */
		var clearCompare = function(){
			pfCompareModelList = [];
			pfCompareCategorySubTypeCode = "";
			window.sg.components.pd03ProductFinder.comparebarClose();
		};

		/**
		 * [US] Epp Discount
		 * utils
		 */
		var toggleCookies = function(res) {
			var store = res && res.store_info;
			if (res) {
				window.AEMapp.eppStore.setEppStoreCookie(res);
			} else {
				window.AEMapp.eppStore.clearEppStoreCookie();
			}
			uiUpdateOnCookie();
		};

		var uiUpdateOnCookie = function() {
			if (window.AEMapp.eppStore.isUnverifiedEppUser()) {
				var programName = $.cookies.get('tmktname') || '';
				window.AEMapp.eppStore.updateEppGNB(programName, pageTrack);
				$gnb.show();
			} else {
				$gnb.hide();
			}
		};

		// [US] Epp discount 상단 banner 의 exit store 버튼 클릭 이벤트
		if(useUSEppDiscountSelect){
			$(document).off('exit__store').on('exit__store', () => {
				setUSEppDiscount();
				useUSEppDiscount = false;
				clearCompare();
				changeUsDefaultPrice();
				toggleCookies();
			});
		}

		/**
		 * [US] Epp Discount
		 * discount program select click event
		 */
		var usEppDiscountClickEvent = function(){
			$('.js-pfv2-epp-discount-item').on("click", function(e){
				if (!$(e.target).is('input')) return;
				var storeId = String($(this).find('input').attr("data-storeid"));
				// store 정보 쿠키 셋팅
				callUsPrivateStore( storeId );

				var tmpTsgmt = $(this).find('.radio-v2__label-text').text().replace(" Discounts","");

				tmktid = storeId;

				if(isNotNull(storeId)){
					useUSEppDiscount = true;
				}

				window.sg.components.usEppDiscount.closeLayer();
				$(this).find('input').prop("checked", false);

				setUSEppDiscount(tmpTsgmt);

				getUsEppDiscountPriceData();

				clearCompare();

				changeUsEppPrice();
			});
		};
		/**
		 * [US] Epp Discount
		 * -. discount program 선택 시 해당 discount program 명 표시 및 Discount Program select 숨김처리
		 * -. exit store 클릭 시 discount program 명 : Discount, Discount Program select 노출 처리
		 */
		var setUSEppDiscount = function(storeTitle){
			const $eppDiscountSelectEl = $('.js-pfv2-epp-discount-select');
			const $eppDiscountTitle = $('.js-pfv2-epp-discount-title');

			var eppDiscountTitle = '';
			$eppDiscountSelectEl.show();
			if(isNotNull(storeTitle)){
				tsgmt = storeTitle;
				eppDiscountTitle = storeTitle + ' Discount';
				$eppDiscountSelectEl.hide();
			} else {
				eppDiscountTitle = 'Discount';
				$eppDiscountSelectEl.show();
			}
			$eppDiscountTitle.find('.discount-title').html(eppDiscountTitle);

		};
		/**
		 * [US] Epp Discount
		 * discount program select 화면 build
		 */
		var buildUSEppDiscount = function(maxDiscountPercent){
			let eppDiscountTailPath = "/content-library/prepurchase/eppdiscount/epp-discount.json";
			if (location.host.indexOf("www") > -1) {
				eppDiscountTailPath = "/us/smg/content/samsung/content-library/prepurchase/eppdiscount/epp-discount.json";
			}
			const eppDiscountApiUrl = usEppApiDomain + eppDiscountTailPath;
			const $eppDiscountEl = $('.js-pfv2-epp-discount-area');
			const $eppDiscountSelectEl = $('.js-pfv2-epp-discount-select');
			const $eppDiscountListULEl = $('.js-pfv2-epp-discount-list');
			const $eppDiscountPercentEl = $('.js-pfv2-epp-discount-percent');
			const $eppDiscountTitle = $('.js-pfv2-epp-discount-title');


			// epp discount program select 셋팅
			$.ajax({
				url: eppDiscountApiUrl,
				type: 'GET',
				dataType : 'json',
				timeout : 20000,
				success: function(data){
					if(isNotNull(data) && isNotNull(data.eppDiscounts)){
						var eppDiscountItemHtml = '';
						var eppDiscountTitle = 'Save up to an extra <em class="us-epp-discount__title-price">'+maxDiscountPercent+'</em> with Samsung <span class="discount-title">Discount</span> Program';
						var useStoreID = false;
						for(var edi in data.eppDiscounts){
							var discountInfo = data.eppDiscounts[edi];
							eppDiscountItemHtml +=
								'<li class="us-epp-discount__select-item">'+
									'<div class="radio-v2 js-pfv2-epp-discount-item"' +
									  `an-tr="epp discount-${pageTrack}-text-link"` +
					'an-ca="content click"' +
					'an-ac="feature"' +
					`an-la="epp:store:${discountInfo.label}">`+
										'<input type="radio" name="radio" class="hidden" id="radio-'+discountInfo.storeId+'" data-storeid="'+discountInfo.storeId+'">'+
										'<label class="radio-v2__label" for="radio-'+discountInfo.storeId+'">'+
											'<span class="radio-v2__label-box-wrap">'+
												'<span class="radio-v2__label-box">'+
													'<span class="radio-v2__label-box-circle"></span>'+
												'</span>'+
											'</span>'+
											'<span class="radio-v2__label-text">'+discountInfo.label+'</span>'+
										'</label>'+
									'</div>'+
								'</li>';
							if(discountInfo.storeId == tmktid){
								useStoreID = true;
								eppDiscountTitle = 'Save up to an extra <em class="us-epp-discount__title-price">'+maxDiscountPercent+'</em> with Samsung <span class="discount-title">'+discountInfo.label+'</span> Program';
							}
						}
						$eppDiscountTitle.html(eppDiscountTitle);
						$eppDiscountListULEl.html(eppDiscountItemHtml);
						if(!useStoreID){
							$eppDiscountSelectEl.show();
						} else {
							$eppDiscountSelectEl.hide();
						}
						$eppDiscountEl.show();

						// GNB epp bar show/hide 로직
						uiUpdateOnCookie();

						window.sg.components.usEppDiscount.reInit();
						usEppDiscountClickEvent();
					}
				}
			});
		};

		/**
		 * [US] epp discount
		 * discount program 설정 시 제품 가격정보 업데이트 로직
		 */
		var changeUsEppPrice = function(){
			$('.js-pfv2-product-card').each(function(){
				var $this_card = $(this);
				var this_idx = Number($this_card.attr("data-productidx"));

				var this_product = productListData[this_idx];
				var this_model = this_product.modelList[this_product.frontModelIdx];

				var savePrice = 0;
				var currentPrice = 0;

				if((isNotNull(this_model.prdSavePriceInf) || isNotNull(this_model.tradeDiscountPrice)) && isNotNull(this_model.prdPriceInf)){
					if(isNotNull(this_model.prdSavePriceInf)){
						savePrice += this_model.prdSavePriceInf;
					}
					if(isNotNull(this_model.tradeDiscountPrice)){
						savePrice += this_model.tradeDiscountPrice;
					}

					// US Epp 할인 가격 : prdSavePriceInf + tradeDiscountPrice
					currentPrice = this_model.prdPriceInf - savePrice;

					// CTA tagging data 적용
					var $buyCTA = $this_card.find('.js-pfv2-buy-now');
					$buyCTA.removeAttr("data-modelprice").removeAttr("data-discountprice").
					attr("data-modelprice", this_model.prdPriceInf).
					attr("data-discountprice", currentPrice);

					var $this_saveEl = $this_card.find('.pd03-product-card__price-save');
					var $this_suggestEl = $this_card.find('.pd03-product-card__price-suggested');
					var $this_defPriceEl = $this_suggestEl.find('del');

					var usEppSaveText = Granite.I18n.get("Save {0}", [currencyComma(savePrice, pfPriceCurrency)]);
					$this_saveEl.html(usEppSaveText).show();
					$this_defPriceEl.html(currencyComma(this_model.prdPriceInf, pfPriceCurrency));
					$this_suggestEl.show();

					// current price 문구 & compare 용 data 처리
					var $this_currentEl = $this_card.find('.pd03-product-card__price-full');
					if($this_currentEl.attr("data-use-monthly") != 'true'){

						var tmp_currentDisplay = currencyComma(currentPrice, pfPriceCurrency);
						if(this_model.tradeDiscountPrice > 0){
							// tradeDiscount 가 있는경우 아래 문구로 표시
							tmp_currentDisplay = 'From '+tmp_currentDisplay+' with trade-in<sup>θ</sup>';
						}

						$this_currentEl.html(tmp_currentDisplay);
					} else {
						var defaultCurrentPriceText = $this_currentEl.attr("data-de-pricetext");
						defaultCurrentPriceText = defaultCurrentPriceText + currencyComma(currentPrice, pfPriceCurrency);

						$this_currentEl.html(defaultCurrentPriceText);
					}

					$this_currentEl.attr("data-use-epp-discount", "true");


					if(isNotNull(this_model.prdSavePriceTI)){
						// include text 영역 처리
						var includeText =
							'Includes '+this_model.prdSavePriceTI+' '+tsgmt+' Discount';
						$this_card.find('.js-pfv2-us-epp-include-area').html(includeText);
						$this_card.find('.js-pfv2-us-epp-include-area').show();
					}
				}
			});

			window.sg.components.pd03ProductCard.reInit();
		};

		/**
		 * [US] epp discount
		 * 상단의 exit store 클릭한 경우 가격정보 원복 로직
		 */
		var changeUsDefaultPrice = function(){
			for(var p_idx in productListData){
				for(var m_idx in productListData[p_idx].modelList){
					productListData[p_idx].modelList[m_idx].prdSavePriceTI = '';
					productListData[p_idx].modelList[m_idx].prdSavePriceInf = 0;
					productListData[p_idx].modelList[m_idx].prdPriceInf = 0;
					productListData[p_idx].modelList[m_idx].tradeDiscountPrice = 0;
				}
			}


			$('.js-pfv2-product-card').each(function(){
				var $this_card = $(this);

				// save 문구 처리
				var $this_saveEl = $this_card.find('.pd03-product-card__price-save');
				var $this_suggestEl = $this_card.find('.pd03-product-card__price-suggested');
				var $this_defPriceEl = $this_suggestEl.find('del');

				var defaultOrigin = $this_suggestEl.attr("data-de-originpricetxt");
				$this_defPriceEl.html(defaultOrigin);

				// current 문구 처리
				var $this_currentEl = $this_card.find('.pd03-product-card__price-full');

				var defaultCurrentPriceText = $this_currentEl.attr("data-de-pricetext");

				var defaultCurrentPrice = $this_currentEl.attr("data-de-currentprice");

				var useTradeIn = $this_currentEl.attr("data-de-use-tradein");

				// CTA tagging data 적용
				var $buyCTA = $this_card.find('.js-pfv2-buy-now');
				$buyCTA.removeAttr("data-modelprice").removeAttr("data-discountprice")
				.attr("data-modelprice", deleteCurrencyComma(defaultOrigin,pfPriceCurrency));

				var defaultSave = $this_saveEl.attr("data-de-saveprice");
				if(isNotNull(defaultSave) && defaultSave != 0 && defaultSave !='0'){
					var usDefaultSaveText = Granite.I18n.get("Save {0}", [currencyComma(defaultSave, pfPriceCurrency)]);
					$this_saveEl.html(usDefaultSaveText).show();
					$this_suggestEl.show();

					// CTA tagging data 적용
					$buyCTA.attr("data-discountprice", defaultCurrentPrice);
				} else {
					$this_saveEl.html('').hide();
					$this_suggestEl.hide();
				}

				// Include문구 hide 처리
				$this_card.find('.js-pfv2-us-epp-include-area').html('').hide();

				$this_currentEl.removeAttr("data-use-epp-discount");

				if(useTradeIn === "true"){
					$this_currentEl.html(defaultCurrentPriceText);
				} else if($this_currentEl.attr("data-use-monthly") != 'true'){
					$this_currentEl.html(currencyComma(defaultCurrentPrice, pfPriceCurrency));
				} else {
					defaultCurrentPriceText = defaultCurrentPriceText +' '+ currencyComma(defaultCurrentPrice, pfPriceCurrency);
					$this_currentEl.html(defaultCurrentPriceText);
				}
			});

			window.sg.components.pd03ProductCard.reInit();
		}

		/**
		 * US - Epp Discount
		 * -. Epp Discount 프로그램 선택 시 : 전역변수인 productListData 에 가격정보 셋팅
		 * -. epp 로그인 후 페이지 로드 시 : 파라미터로 전달받은 productList 에 가격정보 셋팅
		 * 모델별 discount 정보를 가져와서 가격부분 다시 셋팅해줌
		 */
		var getUsEppDiscountPriceData = function(productList){
			var tmpProductList;
			if(productList != null){
				tmpProductList = productList;
			} else {
				tmpProductList = productListData;
			}

			if(isNotNull(tmktid)){
				var usEppDiscountPriceApiUrl = usEppApiDomain+'/us/shop/price.us';

				var modelCodes = "";
				var tmpModelCodeList = [];
				for(var pi in tmpProductList){
					if(isNotNull(tmpProductList[pi].modelList)){
						for(var mi in tmpProductList[pi].modelList){
							if(isNotNull(tmpProductList[pi].modelList[mi]) &&
								(isNotNull(tmpProductList[pi].modelList[mi].priceDisplay) || isNotNull(tmpProductList[pi].modelList[mi].promotionPriceDisplay))){
								if(modelCodes != ''){
									modelCodes += ',';
								}
								modelCodes += tmpProductList[pi].modelList[mi].modelCode;

								var tmpModelCodeObj = {
										"modelCode":tmpProductList[pi].modelList[mi].modelCode,
										"productIdx":pi,
										"modelIdx":mi
								};
								tmpModelCodeList.push(tmpModelCodeObj);
							}
						}
					}
				}

				var usEppDiscountPriceParam = {
					"referralUrl" :"",
					"marketId": tmktid,
					"modelCodes":modelCodes
				};
				$.ajax({
					url: usEppDiscountPriceApiUrl,
					type: 'POST',
					data : usEppDiscountPriceParam,
					dataType : 'json',
					async : false,
					timeout : 20000,
					success: function(data){
						for(var midx in tmpModelCodeList){
							var tmpModelCode = tmpModelCodeList[midx].modelCode;

							for(var didx in data){
								var tmpData = data[didx];
								if(tmpModelCode == data[didx].prdMdlCd){
									var proIdx = tmpModelCodeList[midx].productIdx;
									var moIdx = tmpModelCodeList[midx].modelIdx;

									var tmp_prdSavePriceTI = data[didx].prdSavePriceTI;

									// 숫자로 변환하여 저장함
									var tmp_prdSavePriceInf = isNotNull(data[didx].prdSavePriceInf) ? parseFloat(deleteCurrencyComma(data[didx].prdSavePriceInf, pfPriceCurrency)) : 0;
									var tmp_tradeDiscountPrice = isNotNull(data[didx].tradeDiscountPrice) ? parseFloat(deleteCurrencyComma(data[didx].tradeDiscountPrice, pfPriceCurrency)) : 0;
									var tmp_prdPriceInf = isNotNull(data[didx].prdPriceInf) ? parseFloat(deleteCurrencyComma(data[didx].prdPriceInf, pfPriceCurrency)) : 0;

									if(productList != null){
										productList[proIdx].modelList[moIdx].prdSavePriceTI = tmp_prdSavePriceTI;
										productList[proIdx].modelList[moIdx].prdSavePriceInf = tmp_prdSavePriceInf;
										productList[proIdx].modelList[moIdx].tradeDiscountPrice = tmp_tradeDiscountPrice;
										productList[proIdx].modelList[moIdx].prdPriceInf = tmp_prdPriceInf;
									} else {
										productListData[proIdx].modelList[moIdx].prdSavePriceTI = tmp_prdSavePriceTI;
										productListData[proIdx].modelList[moIdx].prdSavePriceInf = tmp_prdSavePriceInf;
										productListData[proIdx].modelList[moIdx].tradeDiscountPrice = tmp_tradeDiscountPrice;
										productListData[proIdx].modelList[moIdx].prdPriceInf = tmp_prdPriceInf;
									}

									data.splice(didx,1);
									data.push(tmpData);
									break;
								}
							}
						}
					}
				});
			}
			return productList;
		};

		/**
		 * p6 us용 api 호출 후 쿠키 세팅 부
		 * @param storeId
		 * @returns
		 */
		var callUsPrivateStore = function( storeId ){
			if( storeId ){
				$.ajax({
					headers: {
						"Cache-Control": "no-cache",
						"Content-Type": "application/json",
						"Access-Control-Allow-Origin" : "*"
					},
					url: usEppApiDomain+'/us/api/v1/sso/user/private-store/'+storeId,
					type: "GET",
					dataType: "json",
					timeout: 20000,
					xhrFields: { withCredentials: true },
					async : true,
					success : function ( data ) {
						toggleCookies(data);
					},
					complete : function(){
					}
				});

			}

		};

		var loadPFWithoutFilter = function(){
			$LoaderEl.css("width", "30%");
			$loaderContainer.show();
			
			var sortText = $.trim($sortBySelect.data("default-messageop"));
			pfSearchApiParam.sort = getSortId(sortText);

			pfSearchApiParam.onlyFilterInfoYN = "N";


			pfSearchApiParam["keySummaryYN"] = "Y";

			$LoaderEl.css("width", "50%");

			$.ajax({
				url: pfSearchApiUrl,
				type: 'GET',
				data : pfSearchApiParam,
				dataType : 'json',
				cache : true,
				timeout : 20000,
				success: function(data){
					$LoaderEl.css("width", "80%");
					if(data.response.statusCode === 200){
						setTotalCount(data.response.resultData);

						setHeader();

						buildProductGrid(data.response.resultData);

						filteringClickListener();
						window.sg.components.pd03ProductFinder.init();

						$loaderContainer.hide();

						if(commonLoginCheck()){
							commonGetWishlist(changeAddedWishlist);
						}
						
						window.sg.components.pd03ProductCard.reInit();
						window.sg.components.pd03ProductFinder.setHeaderFixFlag();
						window.sg.components.pd03ProductFinder.setFilterDisplay(false);
						window.sg.common.icon.update();
						
						productCardEventListener();

					} else {
						buildNoResult();
					}
				},
				error: function(){
					buildNoResult();
				}
			});
		};

		var loadPF = function(){

			$LoaderEl.css("width", "30%");
			$loaderContainer.show();

			var sortText = $.trim($sortBySelect.data("default-messageop"));
			pfSearchApiParam.sort = getSortId(sortText);

			loadPageCount = 1;

			$.ajax({
				url: pfSearchApiUrl,
				type: 'GET',
				data : pfSearchApiParam,
				dataType : 'json',
				cache : true,
				timeout : 20000,
				success: function(data){
					if(data.response.statusCode === 200){
						buildFullFilter(data.response.resultData);

						setFinderApiParam();

						loadPageCount = 1;

						$LoaderEl.css("width", "50%");

						pfSearchApiParam.onlyFilterInfoYN = "N";

						searchApiTotalRecord = data.response.resultData.common.totalRecord;

						pfSearchApiParam["keySummaryYN"] = "Y";

						//[US] Epp Discount 최대 할인율 적용
						if(siteCode === "us" && isNotNull(data.response.resultData.finderInfo)){
							var eppMaxSavingPercentage = (Number(data.response.resultData.finderInfo.eppMaxSavingPercentage)*100).toFixed(2);
							var maxDiscountPercent = ''+eppMaxSavingPercentage+'%';

							if(useUSEppDiscountSelect){
								buildUSEppDiscount(maxDiscountPercent);
							} else if (window.AEMapp.eppStore.isRealEppUser()) {
								var storeName = $.cookies.get('tsgmt');
								if (storeName) {
									var eppDiscountTitle = 'Save up to an extra <em class="us-epp-discount__title-price">'+maxDiscountPercent+'</em> with '+storeName+' Discount Program';
									$('.js-pfv2-epp-discount-title').html(eppDiscountTitle);
								} else {
									$('.us-epp-discount__title-price').html(maxDiscountPercent);
								}
								$('.js-pfv2-epp-discount-area').show();
								$('.js-pfv2-epp-discount-select').hide();
								$('.us-epp-discount-dummy').height($('.js-pfv2-epp-discount-area').height());
							}
						}

						//[US-Zipcode] 페이지 로딩 시 쿠키에 있는 zipcode 셋팅
						if(useZipCode && isNotNull($.trim($zipCodeInput.val()))){
							$zipCodeInput.attr("value",zipCodeText);
							$zipCodePlaceHolder.hide();
							pfSearchApiParam['zipCode'] = zipCodeText;
						}
						if(isApplyFilter === false && highlightSku !== "" && (pfSearchApiParam.sort === "recommended" || pfSearchApiParam.sort === "onlineavailability")) {
							pfSearchApiParam[highlightParamName] = highlightSku;
						} else {
							pfSearchApiParam[highlightParamName] = "";
						}

						$.ajax({
							url: pfSearchApiUrl,
							type: 'GET',
							data : pfSearchApiParam,
							dataType : 'json',
							cache : true,
							timeout : 20000,
							success: function(data){
								$LoaderEl.css("width", "80%");
								if(data.response.statusCode === 200){

									buildFilter(data.response.resultData);

									setHeader();

									buildProductGrid(data.response.resultData);

									filteringClickListener();
									fnFilterAvailable();

									window.sg.components.pd03ProductFinder.init();

									$loaderContainer.hide();

									if(commonLoginCheck()){
										commonGetWishlist(changeAddedWishlist);
									}

									window.sg.components.pd03ProductCard.reInit();
									window.sg.components.pd03ProductFinder.setHeaderFixFlag();
									window.sg.components.pd03ProductFinder.setFilterDisplay(useFilter);
									window.sg.common.icon.update();

									productCardEventListener();

								} else {
									buildNoResult();
								}
							},
							error: function(){
								buildNoResult();
							}
						});
					}
				},
				error: function(){
				}
			});
		};

		var openTnCPopup = function(){
			if(isNotNull(eppTermsAndConditions)){
				let popupTitle = "";
				if(eppIsFlash){
					popupTitle = Granite.I18n.get("Flash sale");
				} else if(eppIsRefurbish){
					popupTitle = Granite.I18n.get("Refurbished");
				}

				$('.tnc-popup__sub-title').text(popupTitle);
				$('.tnc-popup__desc').html(eppTermsAndConditions);

				window.sg.components.tncPopup.showPopup(); 

				const $tncCloseBtn = $('.js-tnc-popup__btn-close');
				$tncCloseBtn.on("click.finder", function(){
					history.go(-2);
				});

				const $tncAgreeBtn = $('.tnc-popup__btn-agree');
				$tncAgreeBtn.on("click", function(){
					window.sg.components.tncPopup.closePopup();
					loadPFWithoutFilter();
				});
			} else {
				loadPFWithoutFilter();
			}
		};

		// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건
		const getEppOfflineStockBadge = function(frontModel){
			let stockBadgeHtml = '';
			if ( checkEppOffline() && isNotNull(frontModel.ctaTypeUpperCase) && frontModel.ctaTypeUpperCase != "OUTOFSTOCK" ) {
				const offStockCount = frontModel.offlineStockCount;
				let onAble = false;
				let offAble = false;
				
				//offline 가능
				if ( offStockCount != undefined && parseInt(offStockCount,10) >= 1 ) {
					offAble = true;
				}
				//online 가능
				if ( frontModel.ctaTypeUpperCase === "INSTOCK" ){
					onAble = true;	
				} 
				
				//online,offline 모두 가능한 경우 "Available In-Store"
				if ( onAble && offAble ){
					stockBadgeHtml = '<span class="badge-icon  badge-icon--label  badge-icon--bg-color-orange">' + Granite.I18n.get("Available In-Store") + '</span>';				
				//online만 가능할 경우 "Doorstep Delivery"
				} else if ( onAble && !offAble ){
					stockBadgeHtml = '<span class="badge-icon  badge-icon--label  badge-icon--bg-color-teal">' + Granite.I18n.get("Doorstep Delivery") + '</span>';				
				}
			} 			
			return stockBadgeHtml;
		}
		
		// COMP6FE-1619 [EPP] SIEL Offline 뱃지 추가건
		// storePopupFlag 추가 : offline badge 존재하는 경우 cta 클릭시 매장구매 팝업 호출 여부 판단 변수(true : 팝업 호출) 		
		const checkStorePopup = function(frontModel) {
			let storePopupFlag = false;
			if ( checkEppOffline() && isNotNull(frontModel.ctaTypeUpperCase) && frontModel.ctaTypeUpperCase != "OUTOFSTOCK" ) {
				const offStockCount = frontModel.offlineStockCount;
				if ( offStockCount != undefined && parseInt(offStockCount,10) >= 1 ) {
					storePopupFlag = true;
				}
			}
			
			return storePopupFlag;
		}
		
		/**
		 * [EPP] COMP6FE-1619 SIEL Offline 뱃지 추가건 : offline stock 조회 api
		 */ 
		const offlineStockAjax = function(modelList) {
			const param = {
				"sku" : modelList
			};
			return $.ajax({
						type: "POST",
						async : false,
						url: storeDomain + "/v4/configurator/epos/inventory-status",
						dataType: "json",
						data: JSON.stringify(param),
						beforeSend : function(xhr){
							xhr.setRequestHeader("Content-type","application/json");
							xhr.setRequestHeader("x-ecom-app-id", "fulfillment-aem"); 
							xhr.setRequestHeader("x-ecom-app-secret", "NGRjsMLxtDkYAKkghdgbcjUrVGueISJvxaCUvJtkKkQDePVx"); 
							xhr.setRequestHeader("x-store-id", eppCompanyCode);
							xhr.setRequestHeader("x-ecom-jwt", $.cookies.get("jwt_"+$("#countryIsoCode").val(), {domain:".samsung.com"})||'');
						}
				});
		}
		
		if(eppIsFlash || eppIsRefurbish){
			//Filter 영역 제거
			$filterListWrap.parent().remove();
			$filterBtn.remove();
			$filtersCTAWrap.addClass("result--only");
			// T&C popup close 후 호출
			openTnCPopup();
		} else {
			loadPF();
		}
	};

	$(function() {
		productFinderGrid();
	});
}(window, $));

