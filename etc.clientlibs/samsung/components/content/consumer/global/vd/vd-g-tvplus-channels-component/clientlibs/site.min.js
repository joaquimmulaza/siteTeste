(() => {
  const $q = window.sg.common.$q;
  const utils = window.sg.common.utils;

  const selector = {
    section: '.tvplus-channels',
  };

  class TvPlusChannels {
    constructor(element) {
      this.el = {
        window: $q(window),
        section: $q(element),
      };

      this.handler = {

        resize: () => {
          this.tooltipShow();
        },

        tooltipShowEvent: (e) => {
          e.preventDefault();
          const target = $q(e.target);
          const tooltip = target.closest('.is-ellipsis').find('.icon-name--tooltip');
          tooltip.css({
            display: 'block',
          });
        },
        tooltipHideEvent: (e) => {
          e.preventDefault();
          const target = $q(e.target);
          const tooltip = target.closest('.is-ellipsis').find('.icon-name--tooltip');
          tooltip.css({
            display: 'none',
          });
        },
        chipLinkFocus: (e) => {
          const target = $q(e.target);
          const chipLink = target.attr('href').slice(1);
          const channel = target.closest('.tvplus-channels__inner').find(`#${chipLink}`);
          const channelId = channel.attr('id');

          if(chipLink === channelId) {
            channel.target[0].focus();
          }
        },
      };

      TvPlusChannels.instances.set(element, this);
      
      this.init();
    }

    setElements() {
      this.el.icon = this.el.section.find('.tvplus-channels__icon');
      this.el.chip = this.el.section.find('.tvplus-channels__chip');
    }

    init() {
      this.setElements();
      this.bindEvents();
      this.tooltipShow();
    }

    reInit() {
      this.setElements();
      this.bindEvents();
    }

    bindEvents() {
      this.el.window.off('resize', this.handler.resize).on('resize', this.handler.resize);
      this.el.icon.off('mouseover', this.handler.tooltipShowEvent).on('mouseover', this.handler.tooltipShowEvent);
      this.el.icon.off('mouseout', this.handler.tooltipHideEvent).on('mouseout', this.handler.tooltipHideEvent);
      this.el.icon.off('focusin', this.handler.tooltipShowEvent).on('focusin', this.handler.tooltipShowEvent);
      this.el.icon.off('focusout', this.handler.tooltipHideEvent).on('focusout', this.handler.tooltipHideEvent);
      this.el.chip.off('click', this.handler.chipLinkFocus).on('click', this.handler.chipLinkFocus);
    }

    tooltipShow() {
      const textName = document.querySelectorAll('.icon-name');

      for (let i = 0; i < textName.length; i++) {
        const textNameClientHeight = textName[i].clientHeight;
        const textNameScrollHieght = textName[i].scrollHeight;
        const parent = textName[i].closest('.tvplus-channels__icon-list');

        const idx = utils.getCurrentDevice() === 'mobile' ? 1 : 0;
        if(textNameClientHeight >= textNameScrollHieght || idx === 1) {
          parent.classList.remove('is-ellipsis');
        } else {
          parent.classList.add('is-ellipsis');
        }
      }

      const iconNameBox = document.querySelectorAll('.tvplus-channels__icon-list.is-ellipsis .icon-name-box');
      
      iconNameBox.forEach((el) => {
        const tooltipSpan = document.createElement('span');
        const channelsName = el.querySelector('.icon-name');
        const tooltipText = channelsName.innerText;
        tooltipSpan.setAttribute('class','icon-name--tooltip');
        tooltipSpan.innerText = tooltipText;
        
        const tooltipOffset = () => {
          const channelsInner = document.querySelector('.tvplus-channels__inner');
          const tooltip = el.querySelector('.icon-name--tooltip');
          tooltip.style.display = 'block';
          const channelsOffsetRight = channelsInner.getBoundingClientRect().right;
          const channelsOffsetLeft = channelsInner.getBoundingClientRect().left;
          const tooltipOffsetRight = tooltip.getBoundingClientRect().right;
          const tooltipOffsetLeft = tooltip.getBoundingClientRect().left;

          if(document.dir === 'rtl' || document.querySelector('html').classList.contains('rtl')){
            if(channelsOffsetLeft >= tooltipOffsetLeft) {
              tooltip.style.left = '50%';
              tooltip.style.right = 'auto';
            }
          } else {
            if(channelsOffsetRight <= tooltipOffsetRight){
              tooltip.style.left = 'auto';
              tooltip.style.right = '50%';
            }
          }
          tooltip.style.display = 'none';
        };

        if(!el.querySelector('.icon-name--tooltip')){
          el.appendChild(tooltipSpan);
          tooltipOffset();
        }else if(el.querySelector('.icon-name--tooltip')){
          tooltipOffset();  
        } 
      });
    }
  }

  const init = () => {
    $q(selector.section).target.forEach((element) => {
      if (TvPlusChannels.instances.has(element)) {
        TvPlusChannels.instances.get(element).reInit();
      } else {
        new TvPlusChannels(element);
      }
    });
  };

  const tooltipShow = () => {
    $q(selector.section).target.forEach((element) => {
      if (TvPlusChannels.instances.has(element)) {
        TvPlusChannels.instances.get(element).tooltipShow();
      } else {
        new TvPlusChannels(element).tooltipShow();
      }
    });
  };

  TvPlusChannels.instances = new WeakMap();

  $q.load(init);

  window.sg.components.tvPlusChannels = {
    init,
    tooltipShow,
  };
})();

;
(()=>{
    const tvPlusChannelsFlag = ($('#tvplus-channels-added-flag').val());

    if(!(typeof tvPlusChannelsFlag != 'undefined' && tvPlusChannelsFlag == 'true')){
        return;
    }

    const _$COMP = $('div.tvplus-channels')
    const _$ui = {
        categoryList : _$COMP.find('.tvplus-channels__chip-list'),
        channels : _$COMP.find('.tvplus-channels__list-wrap')
    }
    const vdApiDomain = $("#vdApiDomain").val();
    const API_COMMON_URL = '/tvs/tvpersonalize/api/tvapps';
    const siteCode = ($('#siteCode').val());
    let countryCode = ($('#countryCode').val());

    // CRHQ-9084 [VDTV] tvplus component /global 사이트 접속 시 uk api 호출
    if(siteCode == 'global'){
        countryCode = 'GB';
    }
    
    const init = ()=>{
        TvPlusChannelsComponent.load();
    }

    const _apis = {
		/**
		 * TV Plus 채널 장르 API
		 */
		getTvPlusGenres: function () {
			return $.ajax({
				url: `${vdApiDomain}${API_COMMON_URL}/appserver/tvplusGenre?country=${countryCode}`,
				type: "GET",
			});
		},
        /**
		 * TV Plus 채널 장르 정렬 API
		 */
		getTvPlusGenresOrder: function (){
			return $.ajax({
				url: `${vdApiDomain}${API_COMMON_URL}/appserver/tvplusGenreOrder?country=${countryCode}`,
				type: "GET",
			});
		},
        /**
		 * TV Plus 채널 API
		 */
		getTvPlusChannel: function (genre) {
			return $.ajax({
				url: `${vdApiDomain}${API_COMMON_URL}/appserver/tvplusApp?country=${countryCode}&genre=${encodeURIComponent(genre)}&order=asc&offset=0&size=999`,
				type: "GET"
			});
		}
    }

    class CommonComponent{
        state = {}
        composer = {}
        renderer = {}
        handler = {}
        processor = {}
        callback = {}
    }

    class TvPlusChannelsComponent extends CommonComponent{
        constructor(config){
            super();
            this.callback = {}
            this.handler = {}
            this.processor = {
                processTvPlusData : (genreData, genreOrderData)=>{
                    if(genreData && genreData.tvPlusGenre && genreData.tvPlusGenre.length > 0 && genreOrderData && genreOrderData.length > 0){
				
                        const genres = genreData['tvPlusGenre'];
        
                        // Process Order Data
                        genreOrderData.forEach(genreOrder => {
                            if(genreOrder && genreOrder.GENRENAME && genreOrder.GENREORDER){
                                const orderTargetName = genreOrder.GENRENAME;
                                genreOrder = genreOrder.GENREORDER;
            
                                genres.forEach((genre)=>{
                                    const genreName = genre.GENRENAME;
                                    if(genreName == orderTargetName && genreOrder){
                                        genre.GENREORDER = genreOrder;	
                                    }
                                })
                            }
                            
                        })
        
                        genres.sort((a, b) => (Number(a.GENREORDER) > Number(b.GENREORDER)) ? 1 : -1);
                        
                        return genres
                    }
                },
                setAllChannel : (genres)=>{
                    let _deferred = $.Deferred();
                    const channelList = [];
                    genres.forEach((genre)=>{
                        $.when(
                            _apis.getTvPlusChannel(genre.GENRENAME)
                        ).done((channels)=>{
                        	channels.sort((a, b) => (Number(a.CHANNELNUMBER) > Number(b.CHANNELNUMBER)) ? 1 : -1);
                            channelList.push({
                                genre : genre,
                                channels : channels
                            });
                            if(genres.length == channelList.length){
                                _deferred.resolve('complete');
                                // api 호출이 완료된 순서대로 channelList 에 추가되므로 GENREORDER 로 재정렬
                                channelList.sort((a, b) => (Number(a.genre.GENREORDER) > Number(b.genre.GENREORDER)) ? 1 : -1);
                                this.state.allChannels = channelList;
                            }
        
                        })
                    })

                    return _deferred.promise();
                },
                getSpecialCharsRemovedString : (string)=>{
                    const regSpecialChar = /[\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"]/gim;
                    const regBlank = /\s/gim;
                    return string.toLowerCase().replace(regSpecialChar,'').replace(regBlank,'');
                }
            }
            this.composer = {
                composeCategory : ()=>{
                    return this.state.genres.map((genre)=>{
                        return /*html*/`
                        <li class="tvplus-channels__chip-item" role="listitem">
                            <a class="tvplus-channels__chip" href="#${this.processor.getSpecialCharsRemovedString(genre.GENRENAME)}">${genre.GENRENAME}</a>
                        </li>` 
                    }).join('')
                },
                composeChannels : ()=>{
                    const subHeadingLevel = ($('#sub-heading-level').val());

                    return this.state.allChannels.map((channelByGenre)=>{
                        return /*html*/`
                        <div class="tvplus-channels__list" id="${this.processor.getSpecialCharsRemovedString(channelByGenre.genre.GENRENAME)}" tabindex="0">
                            <${subHeadingLevel} class="tvplus-channels__list-title">${channelByGenre.genre.GENRENAME}</${subHeadingLevel}>
                            <ul class="tvplus-channels__icon-box" role="list">
                            ${channelByGenre.channels.map((ch)=>{
                                return /*html*/`
                                <li class="tvplus-channels__icon-list" role="listitem" data-ch-id="${ch.CHANNELID}">
                                    <button type="button" class="tvplus-channels__icon" aria-label="${ch.CHANNELNAME} view detail">
                                        <span class="s-box">
                                            <span class="image">
                                                <img class="image__preview lazy-load responsive-img" data-desktop-src="${ch.LOGOURL}" data-mobile-src="${ch.LOGOURL}" alt="" role="img" data-comp-name="image">
                                                <img class="image__main lazy-load responsive-img" data-desktop-src="${ch.LOGOURL}" data-mobile-src="${ch.LOGOURL}" alt="" role="img" data-comp-name="image">
                                            </span>
                                        </span>
                                        <span class="icon-name-box">
                                            <span class="icon-number">${ch.CHANNELNUMBER}</span>
                                            <span class="icon-name">${ch.CHANNELNAME}</span>
                                        </span>
                                    </button>
                                </li>`
                            }).join('')}
                            </ul>
                        </div>`
                    }).join('');
                }
            }
            this.renderer = {
                renderCategory : ()=>{
                    _$ui.categoryList.html(this.composer.composeCategory());
                },
                renderChannels : ()=>{
                    _$ui.channels.html(this.composer.composeChannels());
                    window.sg.common.lazyLoad.initAll();
                    window.sg.common.lazyLoad.setLazyLoad();
                    window.sg.components.tvPlusChannels.init();
                    window.sg.components.tvPlusChannels.tooltipShow();
                }
            }
        }

        load = ()=>{
            $.when(
                _apis.getTvPlusGenres(),
                _apis.getTvPlusGenresOrder()
            ).done((genreData, genreOrderData)=>{
                const genres = this.processor.processTvPlusData(genreData[0], genreOrderData[0]);
                if(genres){                    
                    this.state.genres = genres;
                    this.renderer.renderCategory()
                    $.when(
                        this.processor.setAllChannel(this.state.genres)
                    ).done(()=>{
                        this.renderer.renderChannels();
                    })
                }
            })
        }

        bindEvent = ()=>{}
    }

    TvPlusChannelsComponent = new TvPlusChannelsComponent();

    $(()=>{
        init();
    })

})();
